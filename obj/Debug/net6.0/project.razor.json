{
  "FilePath": "c:\\Users\\furbina\\source\\repos\\BlazorControlCefa\\BlazorControlCefa.csproj",
  "Configuration": {
    "ConfigurationName": "MVC-3.0",
    "LanguageVersion": "6.0",
    "Extensions": [
      {
        "ExtensionName": "MVC-3.0"
      }
    ]
  },
  "ProjectWorkspaceState": {
    "TagHelpers": [
      {
        "HashCode": 1517890661,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Components.Pagination",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Pagination"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "MetaData",
            "TypeName": "BlazorControlCefa.Application.Wrappers.MetaData",
            "Metadata": {
              "Common.PropertyName": "MetaData"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Spread",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "Spread"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedPage",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Metadata": {
              "Common.PropertyName": "SelectedPage",
              "Components.EventCallback": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Components.Pagination"
        }
      },
      {
        "HashCode": 457121150,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Components.Pagination",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BlazorControlCefa.Components.Pagination"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "MetaData",
            "TypeName": "BlazorControlCefa.Application.Wrappers.MetaData",
            "Metadata": {
              "Common.PropertyName": "MetaData"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Spread",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "Spread"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedPage",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Metadata": {
              "Common.PropertyName": "SelectedPage",
              "Components.EventCallback": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Components.Pagination",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1396332271,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Components.Search",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Search"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ToolTips",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "ToolTips"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnSearchChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Metadata": {
              "Common.PropertyName": "OnSearchChanged",
              "Components.EventCallback": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Components.Search"
        }
      },
      {
        "HashCode": 1051330023,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Components.Search",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BlazorControlCefa.Components.Search"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ToolTips",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "ToolTips"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnSearchChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Metadata": {
              "Common.PropertyName": "OnSearchChanged",
              "Components.EventCallback": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Components.Search",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1120100633,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.Department.DepartmentEditComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "DepartmentEditComponent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Id",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Id"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Action",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Action"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.Department.DepartmentEditComponent"
        }
      },
      {
        "HashCode": -2060428885,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.Department.DepartmentEditComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BlazorControlCefa.Pages.Department.DepartmentEditComponent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Id",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Id"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Action",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Action"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.Department.DepartmentEditComponent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1493816655,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.Department.DepartmentListComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "DepartmentListComponent"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.Department.DepartmentListComponent"
        }
      },
      {
        "HashCode": 1516183690,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.Department.DepartmentListComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BlazorControlCefa.Pages.Department.DepartmentListComponent"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.Department.DepartmentListComponent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -2137033477,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.Index",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Index"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.Index"
        }
      },
      {
        "HashCode": -728181396,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.Index",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BlazorControlCefa.Pages.Index"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.Index",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1040806422,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.PersonType.PersonTypeEditComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "PersonTypeEditComponent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Id",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Id"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Action",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Action"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.PersonType.PersonTypeEditComponent"
        }
      },
      {
        "HashCode": 652971546,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.PersonType.PersonTypeEditComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BlazorControlCefa.Pages.PersonType.PersonTypeEditComponent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Id",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Id"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Action",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Action"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.PersonType.PersonTypeEditComponent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 708922838,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.PersonType.PersonTypesListComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "PersonTypesListComponent"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.PersonType.PersonTypesListComponent"
        }
      },
      {
        "HashCode": 1851237590,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.PersonType.PersonTypesListComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BlazorControlCefa.Pages.PersonType.PersonTypesListComponent"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.PersonType.PersonTypesListComponent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 65793146,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.Person.PersonEditComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "PersonEditComponent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Id",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Id"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Action",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Action"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.Person.PersonEditComponent"
        }
      },
      {
        "HashCode": -1809986030,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.Person.PersonEditComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BlazorControlCefa.Pages.Person.PersonEditComponent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Id",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Id"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Action",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Action"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.Person.PersonEditComponent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 22231289,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.Person.PersonsListComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "PersonsListComponent"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.Person.PersonsListComponent"
        }
      },
      {
        "HashCode": -2077935472,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.Person.PersonsListComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BlazorControlCefa.Pages.Person.PersonsListComponent"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.Person.PersonsListComponent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1706443939,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.Person.VehicleAsigment.CreateVehicleForAPerson",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "CreateVehicleForAPerson"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Hiden",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "Hiden"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PersonId",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "PersonId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnCancelSelected",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Metadata": {
              "Common.PropertyName": "OnCancelSelected",
              "Components.EventCallback": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.Person.VehicleAsigment.CreateVehicleForAPerson"
        }
      },
      {
        "HashCode": -774558830,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.Person.VehicleAsigment.CreateVehicleForAPerson",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BlazorControlCefa.Pages.Person.VehicleAsigment.CreateVehicleForAPerson"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Hiden",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "Hiden"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PersonId",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "PersonId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnCancelSelected",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Metadata": {
              "Common.PropertyName": "OnCancelSelected",
              "Components.EventCallback": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.Person.VehicleAsigment.CreateVehicleForAPerson",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -128509017,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.Person.VehicleAsigment.PersonVehicleComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "PersonVehicleComponent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "PersonId",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "PersonId"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.Person.VehicleAsigment.PersonVehicleComponent"
        }
      },
      {
        "HashCode": 1513729751,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.Person.VehicleAsigment.PersonVehicleComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BlazorControlCefa.Pages.Person.VehicleAsigment.PersonVehicleComponent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "PersonId",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "PersonId"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.Person.VehicleAsigment.PersonVehicleComponent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -862843158,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.Position.PositionEditComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "PositionEditComponent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Id",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Id"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Action",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Action"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.Position.PositionEditComponent"
        }
      },
      {
        "HashCode": -537279161,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.Position.PositionEditComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BlazorControlCefa.Pages.Position.PositionEditComponent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Id",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Id"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Action",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Action"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.Position.PositionEditComponent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 2125928377,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.Position.PositionListComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "PositionListComponent"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.Position.PositionListComponent"
        }
      },
      {
        "HashCode": -1368974675,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.Position.PositionListComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BlazorControlCefa.Pages.Position.PositionListComponent"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.Position.PositionListComponent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1222521902,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.Reason.ReasonEditComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ReasonEditComponent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Id",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Id"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Action",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Action"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.Reason.ReasonEditComponent"
        }
      },
      {
        "HashCode": -803906652,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.Reason.ReasonEditComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BlazorControlCefa.Pages.Reason.ReasonEditComponent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Id",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Id"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Action",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Action"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.Reason.ReasonEditComponent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -882943210,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.Reason.ReasonListComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ReasonListComponent"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.Reason.ReasonListComponent"
        }
      },
      {
        "HashCode": 341697550,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.Reason.ReasonListComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BlazorControlCefa.Pages.Reason.ReasonListComponent"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.Reason.ReasonListComponent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -2078106296,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.VehicleBrand.VehicleBrandEditComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "VehicleBrandEditComponent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Id",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Id"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Action",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Action"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.VehicleBrand.VehicleBrandEditComponent"
        }
      },
      {
        "HashCode": -1776722782,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.VehicleBrand.VehicleBrandEditComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BlazorControlCefa.Pages.VehicleBrand.VehicleBrandEditComponent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Id",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Id"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Action",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Action"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.VehicleBrand.VehicleBrandEditComponent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -829960344,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.VehicleBrand.VehicleBrandListComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "VehicleBrandListComponent"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.VehicleBrand.VehicleBrandListComponent"
        }
      },
      {
        "HashCode": 1899128090,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.VehicleBrand.VehicleBrandListComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BlazorControlCefa.Pages.VehicleBrand.VehicleBrandListComponent"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.VehicleBrand.VehicleBrandListComponent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 48763005,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.VehicleType.VehicleTypeEditComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "VehicleTypeEditComponent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Id",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Id"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Action",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Action"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.VehicleType.VehicleTypeEditComponent"
        }
      },
      {
        "HashCode": -959813434,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.VehicleType.VehicleTypeEditComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BlazorControlCefa.Pages.VehicleType.VehicleTypeEditComponent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Id",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Id"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Action",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Action"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.VehicleType.VehicleTypeEditComponent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 352281709,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.VehicleType.VehicleTypeListComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "VehicleTypeListComponent"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.VehicleType.VehicleTypeListComponent"
        }
      },
      {
        "HashCode": 1307643104,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.VehicleType.VehicleTypeListComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BlazorControlCefa.Pages.VehicleType.VehicleTypeListComponent"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.VehicleType.VehicleTypeListComponent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 307926404,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.Vehicle.VehicleEditComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "VehicleEditComponent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Id",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Id"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Action",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Action"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.Vehicle.VehicleEditComponent"
        }
      },
      {
        "HashCode": 714876936,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.Vehicle.VehicleEditComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BlazorControlCefa.Pages.Vehicle.VehicleEditComponent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Id",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Id"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Action",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Action"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.Vehicle.VehicleEditComponent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1732214460,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.Vehicle.VehicleListComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "VehicleListComponent"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.Vehicle.VehicleListComponent"
        }
      },
      {
        "HashCode": 1676241333,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.Vehicle.VehicleListComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BlazorControlCefa.Pages.Vehicle.VehicleListComponent"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.Vehicle.VehicleListComponent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1733477567,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.Vehicle.VehiclePlateFinderComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "VehiclePlateFinderComponent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "OnPlateSeleted",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Metadata": {
              "Common.PropertyName": "OnPlateSeleted",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Plate",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "Plate"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.Vehicle.VehiclePlateFinderComponent"
        }
      },
      {
        "HashCode": 971883033,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.Vehicle.VehiclePlateFinderComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BlazorControlCefa.Pages.Vehicle.VehiclePlateFinderComponent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "OnPlateSeleted",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Metadata": {
              "Common.PropertyName": "OnPlateSeleted",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Plate",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "Plate"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.Vehicle.VehiclePlateFinderComponent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1057534589,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.VisitType.VisitTypeEditComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "VisitTypeEditComponent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Id",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Id"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Action",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Action"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.VisitType.VisitTypeEditComponent"
        }
      },
      {
        "HashCode": -23701588,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.VisitType.VisitTypeEditComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BlazorControlCefa.Pages.VisitType.VisitTypeEditComponent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Id",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Id"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Action",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Action"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.VisitType.VisitTypeEditComponent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1827409265,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.VisitType.VisitTypeListComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "VisitTypeListComponent"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.VisitType.VisitTypeListComponent"
        }
      },
      {
        "HashCode": 864434170,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.VisitType.VisitTypeListComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BlazorControlCefa.Pages.VisitType.VisitTypeListComponent"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.VisitType.VisitTypeListComponent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 706951571,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.Visit.CreatePersonForAVisitComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "CreatePersonForAVisitComponent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Hiden",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "Hiden"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "VisitId",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "VisitId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnCancelSelected",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Metadata": {
              "Common.PropertyName": "OnCancelSelected",
              "Components.EventCallback": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.Visit.CreatePersonForAVisitComponent"
        }
      },
      {
        "HashCode": -136044170,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.Visit.CreatePersonForAVisitComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BlazorControlCefa.Pages.Visit.CreatePersonForAVisitComponent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Hiden",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "Hiden"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "VisitId",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "VisitId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnCancelSelected",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Metadata": {
              "Common.PropertyName": "OnCancelSelected",
              "Components.EventCallback": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.Visit.CreatePersonForAVisitComponent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 4668593,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.Visit.NotesComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NotesComponent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "PersonId",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "PersonId"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.Visit.NotesComponent"
        }
      },
      {
        "HashCode": -1418928851,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.Visit.NotesComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BlazorControlCefa.Pages.Visit.NotesComponent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "PersonId",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "PersonId"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.Visit.NotesComponent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -37549142,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.Visit.PersonFinderComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "PersonFinderComponent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "OnPersonSeleted",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Metadata": {
              "Common.PropertyName": "OnPersonSeleted",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Person",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "Person"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.Visit.PersonFinderComponent"
        }
      },
      {
        "HashCode": -1316952050,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.Visit.PersonFinderComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BlazorControlCefa.Pages.Visit.PersonFinderComponent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "OnPersonSeleted",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Metadata": {
              "Common.PropertyName": "OnPersonSeleted",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Person",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "Person"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.Visit.PersonFinderComponent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 926932013,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.Visit.VehicleVisitDetailComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "VehicleVisitDetailComponent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "VisitId",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "VisitId"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.Visit.VehicleVisitDetailComponent"
        }
      },
      {
        "HashCode": 2140565251,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.Visit.VehicleVisitDetailComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BlazorControlCefa.Pages.Visit.VehicleVisitDetailComponent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "VisitId",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "VisitId"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.Visit.VehicleVisitDetailComponent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -944183693,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.Visit.CompanionComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "CompanionComponent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "VisitId",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "VisitId"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.Visit.CompanionComponent"
        }
      },
      {
        "HashCode": 2099923783,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.Visit.CompanionComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BlazorControlCefa.Pages.Visit.CompanionComponent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "VisitId",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "VisitId"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.Visit.CompanionComponent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 931655555,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.Visit.VisitComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "VisitComponent"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.Visit.VisitComponent"
        }
      },
      {
        "HashCode": 281426591,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Pages.Visit.VisitComponent",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BlazorControlCefa.Pages.Visit.VisitComponent"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Pages.Visit.VisitComponent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -2140133516,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.App",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "App"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.App"
        }
      },
      {
        "HashCode": -55692708,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.App",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BlazorControlCefa.App"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.App",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 224236919,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Shared.LoginDisplay",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "LoginDisplay"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Shared.LoginDisplay"
        }
      },
      {
        "HashCode": -4022899,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Shared.LoginDisplay",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BlazorControlCefa.Shared.LoginDisplay"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Shared.LoginDisplay",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1881722292,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Shared.SurveyPrompt",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "SurveyPrompt"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Title",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Title"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Shared.SurveyPrompt"
        }
      },
      {
        "HashCode": 437653415,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Shared.SurveyPrompt",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BlazorControlCefa.Shared.SurveyPrompt"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Title",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Title"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Shared.SurveyPrompt",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -290567728,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Shared.MainLayout",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MainLayout"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Body",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Gets the content to be rendered inside the layout.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Body",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Shared.MainLayout"
        }
      },
      {
        "HashCode": 1812837231,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Shared.MainLayout",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BlazorControlCefa.Shared.MainLayout"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Body",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Gets the content to be rendered inside the layout.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Body",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Shared.MainLayout",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -248539748,
        "Kind": "Components.ChildContent",
        "Name": "BlazorControlCefa.Shared.MainLayout.Body",
        "AssemblyName": "BlazorControlCefa",
        "Documentation": "\n            <summary>\n            Gets the content to be rendered inside the layout.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Body",
            "ParentTag": "MainLayout"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "BlazorControlCefa.Shared.MainLayout.Body",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 986027541,
        "Kind": "Components.ChildContent",
        "Name": "BlazorControlCefa.Shared.MainLayout.Body",
        "AssemblyName": "BlazorControlCefa",
        "Documentation": "\n            <summary>\n            Gets the content to be rendered inside the layout.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Body",
            "ParentTag": "BlazorControlCefa.Shared.MainLayout"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "BlazorControlCefa.Shared.MainLayout.Body",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1211961684,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Shared.NavMenu",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NavMenu"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Shared.NavMenu"
        }
      },
      {
        "HashCode": -1881286455,
        "Kind": "Components.Component",
        "Name": "BlazorControlCefa.Shared.NavMenu",
        "AssemblyName": "BlazorControlCefa",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BlazorControlCefa.Shared.NavMenu"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorControlCefa.Shared.NavMenu",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 922442269,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxAccordion",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <a href=\"https://getbootstrap.com/docs/5.1/components/accordion/\">Bootstrap accordion</a> component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxAccordion"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS classes for the accordion container.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ExpandedItemId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            ID of the expanded item.\n            Do not use constant value as it reverts the accordion to that item on every roundtrip. Use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordion.InitialExpandedItemId\" /> to set the initial state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ExpandedItemId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ExpandedItemIdChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Metadata": {
              "Common.PropertyName": "ExpandedItemIdChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "StayOpen",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set to <c>true</c> to make accordion items stay open when another item is opened.\n            Default is <c>false</c>, openning another item collapses current item.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "StayOpen"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InitialExpandedItemId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            ID of the item you want to expand at the very beginning (overwrites <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordion.ExpandedItemId\" /> if set).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InitialExpandedItemId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxAccordion"
        }
      },
      {
        "HashCode": 855912278,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxAccordion",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <a href=\"https://getbootstrap.com/docs/5.1/components/accordion/\">Bootstrap accordion</a> component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxAccordion"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS classes for the accordion container.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ExpandedItemId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            ID of the expanded item.\n            Do not use constant value as it reverts the accordion to that item on every roundtrip. Use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordion.InitialExpandedItemId\" /> to set the initial state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ExpandedItemId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ExpandedItemIdChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Metadata": {
              "Common.PropertyName": "ExpandedItemIdChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "StayOpen",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set to <c>true</c> to make accordion items stay open when another item is opened.\n            Default is <c>false</c>, openning another item collapses current item.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "StayOpen"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InitialExpandedItemId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            ID of the item you want to expand at the very beginning (overwrites <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordion.ExpandedItemId\" /> if set).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InitialExpandedItemId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxAccordion",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1181592388,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxAccordion.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxAccordion"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxAccordion.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 273687300,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxAccordion.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxAccordion"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxAccordion.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1911716682,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Single item for <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxAccordion\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxAccordionItem"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "HeaderTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Clickable header (always visible).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BodyTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Body (collapsible).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BodyTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Id",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            ID of the item (<see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordion.ExpandedItemId\" />). (Gets generated GUID if not set.)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Id"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnExpanded",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Raised after the transition to this item (the animation is finished).\n            Is not raised for the initial rendering even if the item is not collapsed (no transition happened).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnExpanded",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnCollapsed",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Raised after the transition from this item (the animation is finished).\n            Is not raised for the initial rendering even if the item is collapsed (no transition happened).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnCollapsed",
              "Components.EventCallback": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem"
        }
      },
      {
        "HashCode": -1194148003,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Single item for <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxAccordion\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "HeaderTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Clickable header (always visible).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BodyTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Body (collapsible).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BodyTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Id",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            ID of the item (<see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordion.ExpandedItemId\" />). (Gets generated GUID if not set.)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Id"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnExpanded",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Raised after the transition to this item (the animation is finished).\n            Is not raised for the initial rendering even if the item is not collapsed (no transition happened).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnExpanded",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnCollapsed",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Raised after the transition from this item (the animation is finished).\n            Is not raised for the initial rendering even if the item is collapsed (no transition happened).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnCollapsed",
              "Components.EventCallback": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -350424012,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem.HeaderTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Clickable header (always visible).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HeaderTemplate",
            "ParentTag": "HxAccordionItem"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem.HeaderTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1721324421,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem.HeaderTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Clickable header (always visible).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HeaderTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem.HeaderTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 191245886,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem.BodyTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Body (collapsible).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BodyTemplate",
            "ParentTag": "HxAccordionItem"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem.BodyTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 934833795,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem.BodyTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Body (collapsible).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BodyTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem.BodyTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1916654886,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxAlert",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Bootstrap alert component <a href=\"https://getbootstrap.com/docs/5.0/components/alerts/\" />\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxAlert"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ThemeColor",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Alert color (background). Required.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Dismissible",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Shows the Close button and allows dissmissing of the alert.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Dismissible"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Any additional CSS class to apply.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxAlert"
        }
      },
      {
        "HashCode": 1831393035,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxAlert",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Bootstrap alert component <a href=\"https://getbootstrap.com/docs/5.0/components/alerts/\" />\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxAlert"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ThemeColor",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Alert color (background). Required.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Dismissible",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Shows the Close button and allows dissmissing of the alert.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Dismissible"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Any additional CSS class to apply.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxAlert",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -910194592,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxAlert.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxAlert"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxAlert.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1556988976,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxAlert.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxAlert"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxAlert.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 682068074,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxBadge",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <a href=\"https://getbootstrap.com/docs/5.0/components/badge/\">Bootstrap Badge</a> component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxBadge"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.BadgeSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxBadge.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ThemeColor?",
            "Documentation": "\n            <summary>\n            Badge color (background).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextColor",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ThemeColor?",
            "Documentation": "\n            <summary>\n            Color of badge text. Use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxBadge.Color\" /> for the background color.\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ThemeColor.None\" /> (color automatically selected to work with chosen background color).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Type",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.BadgeType?",
            "Documentation": "\n            <summary>\n            Badge type - Regular or rounded-pills. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.BadgeType.Regular\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Type"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Any additional CSS class to apply.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Additional attributes to be splatted onto an underlying HTML element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxBadge"
        }
      },
      {
        "HashCode": 1953773933,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxBadge",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <a href=\"https://getbootstrap.com/docs/5.0/components/badge/\">Bootstrap Badge</a> component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxBadge"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.BadgeSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxBadge.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ThemeColor?",
            "Documentation": "\n            <summary>\n            Badge color (background).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextColor",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ThemeColor?",
            "Documentation": "\n            <summary>\n            Color of badge text. Use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxBadge.Color\" /> for the background color.\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ThemeColor.None\" /> (color automatically selected to work with chosen background color).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Type",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.BadgeType?",
            "Documentation": "\n            <summary>\n            Badge type - Regular or rounded-pills. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.BadgeType.Regular\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Type"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Any additional CSS class to apply.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Additional attributes to be splatted onto an underlying HTML element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxBadge",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -606835583,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxBadge.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxBadge"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxBadge.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 983160108,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxBadge.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxBadge"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxBadge.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1339742106,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxButton",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Button (<c>&lt;button type=\"button\"&gt;</c>). See also <see href=\"https://getbootstrap.com/docs/5.1/components/buttons/\">Bootstrap Buttons</see>.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxButton"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text of the button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Button content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "Havit.Blazor.Components.Web.IconBase",
            "Documentation": "\n            <summary>\n            Icon to render into the button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconPlacement",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement?",
            "Documentation": "\n            <summary>\n            Position of the icon within the button. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement.Start\" /> (configurable through <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconPlacement"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ThemeColor?",
            "Documentation": "\n            <summary>\n            Bootstrap button style - theme color.<br />\n            Default is taken from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" /> (<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ThemeColor.None\" /> if not customized).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonSize?",
            "Documentation": "\n            <summary>\n            Button size. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonSize.Regular\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Outline",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            <see href=\"https://getbootstrap.com/docs/5.0/components/buttons/#outline-buttons\">Bootstrap \"outline\" button</see> style.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Outline"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the <c>&lt;button /&gt;</c>.<br />\n            When using <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> you might want to use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" /> to get the desired result.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EditContext",
            "TypeName": "Microsoft.AspNetCore.Components.Forms.EditContext",
            "Documentation": "\n            <summary>\n            Associated <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.EditContext\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EditContext"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FormId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Specifies the form the button belongs to.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FormId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tooltip",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Tooltip text.<br />\n            If set, a <c>span</c> wrapper will be rendered around the <c>&lt;button /&gt;</c>. For most scenarios you will then use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tooltip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TooltipPlacement",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Tooltip placement.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TooltipPlacement"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TooltipCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the tooltip.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TooltipCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TooltipWrapperCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the tooltip <c>span</c> wrapper of the <c>&lt;button /&gt;</c>.<br />\n            If set, the <c>span</c> wrapper will be rendered no matter the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> text is set or not.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TooltipWrapperCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised after the button is clicked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnValidClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised after the button is clicked and EditContext validation succeeds.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnValidClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInvalidClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised after the button is clicked and EditContext validation fails.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnInvalidClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClickStopPropagation",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Stop onClick-event propagation. Deafult is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClickStopPropagation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClickPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevents the default action for the onclick event. Deafult is <c>false</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClickPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Spinner",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Set state of the embedded <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSpinner\" />.\n            Leave <c>null</c> if you want automated spinner when any of the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers is running.\n            You can set an explicit <c>false</c> constant to disable (override) the spinner automation.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Spinner"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SingleClickProtection",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set <c>false</c> if you want to allow multiple <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers in parallel. Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SingleClickProtection"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Additional attributes to be splatted onto an underlying <c>&lt;button&gt;</c> element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxButton"
        }
      },
      {
        "HashCode": -102915723,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxButton",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Button (<c>&lt;button type=\"button\"&gt;</c>). See also <see href=\"https://getbootstrap.com/docs/5.1/components/buttons/\">Bootstrap Buttons</see>.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxButton"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text of the button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Button content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "Havit.Blazor.Components.Web.IconBase",
            "Documentation": "\n            <summary>\n            Icon to render into the button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconPlacement",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement?",
            "Documentation": "\n            <summary>\n            Position of the icon within the button. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement.Start\" /> (configurable through <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconPlacement"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ThemeColor?",
            "Documentation": "\n            <summary>\n            Bootstrap button style - theme color.<br />\n            Default is taken from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" /> (<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ThemeColor.None\" /> if not customized).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonSize?",
            "Documentation": "\n            <summary>\n            Button size. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonSize.Regular\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Outline",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            <see href=\"https://getbootstrap.com/docs/5.0/components/buttons/#outline-buttons\">Bootstrap \"outline\" button</see> style.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Outline"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the <c>&lt;button /&gt;</c>.<br />\n            When using <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> you might want to use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" /> to get the desired result.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EditContext",
            "TypeName": "Microsoft.AspNetCore.Components.Forms.EditContext",
            "Documentation": "\n            <summary>\n            Associated <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.EditContext\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EditContext"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FormId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Specifies the form the button belongs to.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FormId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tooltip",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Tooltip text.<br />\n            If set, a <c>span</c> wrapper will be rendered around the <c>&lt;button /&gt;</c>. For most scenarios you will then use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tooltip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TooltipPlacement",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Tooltip placement.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TooltipPlacement"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TooltipCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the tooltip.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TooltipCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TooltipWrapperCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the tooltip <c>span</c> wrapper of the <c>&lt;button /&gt;</c>.<br />\n            If set, the <c>span</c> wrapper will be rendered no matter the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> text is set or not.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TooltipWrapperCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised after the button is clicked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnValidClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised after the button is clicked and EditContext validation succeeds.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnValidClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInvalidClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised after the button is clicked and EditContext validation fails.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnInvalidClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClickStopPropagation",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Stop onClick-event propagation. Deafult is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClickStopPropagation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClickPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevents the default action for the onclick event. Deafult is <c>false</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClickPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Spinner",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Set state of the embedded <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSpinner\" />.\n            Leave <c>null</c> if you want automated spinner when any of the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers is running.\n            You can set an explicit <c>false</c> constant to disable (override) the spinner automation.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Spinner"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SingleClickProtection",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set <c>false</c> if you want to allow multiple <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers in parallel. Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SingleClickProtection"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Additional attributes to be splatted onto an underlying <c>&lt;button&gt;</c> element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxButton",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1417335395,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxButton.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Button content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxButton"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxButton.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 871416424,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxButton.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Button content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxButton"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxButton.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1603825824,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxButtonGroup",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Bootstrap <see href=\"https://getbootstrap.com/docs/5.0/components/button-group/\">Button group</see>s. \n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxButtonGroup"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonGroupSize",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Size. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonGroupSize.Regular\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Orientation",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonGroupOrientation",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Orientation. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonGroupOrientation.Horizontal\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Orientation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AriaLabel",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Groups should be given an explicit label, as most assistive technologies will otherwise not announce them, despite the presence of the correct role attribute. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AriaLabel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class(es) to be added.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxButtonGroup"
        }
      },
      {
        "HashCode": 908529890,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxButtonGroup",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Bootstrap <see href=\"https://getbootstrap.com/docs/5.0/components/button-group/\">Button group</see>s. \n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxButtonGroup"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonGroupSize",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Size. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonGroupSize.Regular\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Orientation",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonGroupOrientation",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Orientation. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonGroupOrientation.Horizontal\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Orientation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AriaLabel",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Groups should be given an explicit label, as most assistive technologies will otherwise not announce them, despite the presence of the correct role attribute. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AriaLabel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class(es) to be added.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxButtonGroup",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -169553135,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxButtonGroup.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxButtonGroup"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxButtonGroup.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -897302224,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxButtonGroup.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxButtonGroup"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxButtonGroup.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1009392101,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxButtonToolbar",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Bootstrap <see href=\"https://getbootstrap.com/docs/5.1/components/button-group/#button-toolbar\">Button toolbar</see> component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxButtonToolbar"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Toolbar's content\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AriaLabel",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            An explicit label should be set, as most assistive technologies will otherwise not announce them, despite the presence of the correct role attribute. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AriaLabel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            CSS class(es) to add to the HTML element with the <c>.btn-toolbar</c> class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxButtonToolbar"
        }
      },
      {
        "HashCode": -1676968911,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxButtonToolbar",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Bootstrap <see href=\"https://getbootstrap.com/docs/5.1/components/button-group/#button-toolbar\">Button toolbar</see> component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxButtonToolbar"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Toolbar's content\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AriaLabel",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            An explicit label should be set, as most assistive technologies will otherwise not announce them, despite the presence of the correct role attribute. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AriaLabel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            CSS class(es) to add to the HTML element with the <c>.btn-toolbar</c> class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxButtonToolbar",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 2107254870,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxButtonToolbar.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Toolbar's content\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxButtonToolbar"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxButtonToolbar.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -957236706,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxButtonToolbar.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Toolbar's content\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxButtonToolbar"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxButtonToolbar.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 615592672,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxSubmit",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Button <c>&lt;button type=\"submit\"&gt;</c>.\n            Direct ancestor of <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxButton\" /> with the same API.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxSubmit"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text of the button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Button content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "Havit.Blazor.Components.Web.IconBase",
            "Documentation": "\n            <summary>\n            Icon to render into the button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconPlacement",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement?",
            "Documentation": "\n            <summary>\n            Position of the icon within the button. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement.Start\" /> (configurable through <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconPlacement"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ThemeColor?",
            "Documentation": "\n            <summary>\n            Bootstrap button style - theme color.<br />\n            Default is taken from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" /> (<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ThemeColor.None\" /> if not customized).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonSize?",
            "Documentation": "\n            <summary>\n            Button size. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonSize.Regular\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Outline",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            <see href=\"https://getbootstrap.com/docs/5.0/components/buttons/#outline-buttons\">Bootstrap \"outline\" button</see> style.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Outline"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the <c>&lt;button /&gt;</c>.<br />\n            When using <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> you might want to use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" /> to get the desired result.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EditContext",
            "TypeName": "Microsoft.AspNetCore.Components.Forms.EditContext",
            "Documentation": "\n            <summary>\n            Associated <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.EditContext\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EditContext"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FormId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Specifies the form the button belongs to.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FormId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tooltip",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Tooltip text.<br />\n            If set, a <c>span</c> wrapper will be rendered around the <c>&lt;button /&gt;</c>. For most scenarios you will then use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tooltip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TooltipPlacement",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Tooltip placement.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TooltipPlacement"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TooltipCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the tooltip.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TooltipCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TooltipWrapperCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the tooltip <c>span</c> wrapper of the <c>&lt;button /&gt;</c>.<br />\n            If set, the <c>span</c> wrapper will be rendered no matter the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> text is set or not.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TooltipWrapperCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised after the button is clicked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnValidClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised after the button is clicked and EditContext validation succeeds.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnValidClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInvalidClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised after the button is clicked and EditContext validation fails.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnInvalidClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClickStopPropagation",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Stop onClick-event propagation. Deafult is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClickStopPropagation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClickPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevents the default action for the onclick event. Deafult is <c>false</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClickPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Spinner",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Set state of the embedded <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSpinner\" />.\n            Leave <c>null</c> if you want automated spinner when any of the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers is running.\n            You can set an explicit <c>false</c> constant to disable (override) the spinner automation.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Spinner"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SingleClickProtection",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set <c>false</c> if you want to allow multiple <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers in parallel. Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SingleClickProtection"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Additional attributes to be splatted onto an underlying <c>&lt;button&gt;</c> element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxSubmit"
        }
      },
      {
        "HashCode": 273030886,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxSubmit",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Button <c>&lt;button type=\"submit\"&gt;</c>.\n            Direct ancestor of <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxButton\" /> with the same API.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxSubmit"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text of the button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Button content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "Havit.Blazor.Components.Web.IconBase",
            "Documentation": "\n            <summary>\n            Icon to render into the button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconPlacement",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement?",
            "Documentation": "\n            <summary>\n            Position of the icon within the button. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement.Start\" /> (configurable through <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconPlacement"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ThemeColor?",
            "Documentation": "\n            <summary>\n            Bootstrap button style - theme color.<br />\n            Default is taken from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" /> (<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ThemeColor.None\" /> if not customized).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonSize?",
            "Documentation": "\n            <summary>\n            Button size. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonSize.Regular\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Outline",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            <see href=\"https://getbootstrap.com/docs/5.0/components/buttons/#outline-buttons\">Bootstrap \"outline\" button</see> style.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Outline"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the <c>&lt;button /&gt;</c>.<br />\n            When using <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> you might want to use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" /> to get the desired result.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EditContext",
            "TypeName": "Microsoft.AspNetCore.Components.Forms.EditContext",
            "Documentation": "\n            <summary>\n            Associated <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.EditContext\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EditContext"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FormId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Specifies the form the button belongs to.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FormId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tooltip",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Tooltip text.<br />\n            If set, a <c>span</c> wrapper will be rendered around the <c>&lt;button /&gt;</c>. For most scenarios you will then use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tooltip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TooltipPlacement",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Tooltip placement.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TooltipPlacement"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TooltipCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the tooltip.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TooltipCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TooltipWrapperCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the tooltip <c>span</c> wrapper of the <c>&lt;button /&gt;</c>.<br />\n            If set, the <c>span</c> wrapper will be rendered no matter the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> text is set or not.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TooltipWrapperCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised after the button is clicked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnValidClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised after the button is clicked and EditContext validation succeeds.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnValidClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInvalidClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised after the button is clicked and EditContext validation fails.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnInvalidClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClickStopPropagation",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Stop onClick-event propagation. Deafult is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClickStopPropagation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClickPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevents the default action for the onclick event. Deafult is <c>false</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClickPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Spinner",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Set state of the embedded <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSpinner\" />.\n            Leave <c>null</c> if you want automated spinner when any of the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers is running.\n            You can set an explicit <c>false</c> constant to disable (override) the spinner automation.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Spinner"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SingleClickProtection",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set <c>false</c> if you want to allow multiple <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers in parallel. Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SingleClickProtection"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Additional attributes to be splatted onto an underlying <c>&lt;button&gt;</c> element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxSubmit",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 75139833,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxSubmit.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Button content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxSubmit"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxSubmit.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1955540633,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxSubmit.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Button content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxSubmit"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxSubmit.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1268737832,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCalendar",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Basic calendar building block. Used for <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1\" /> and <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange\" /> implementation.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxCalendar"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.CalendarSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCalendar.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.DateTime?",
            "Documentation": "\n            <summary>\n            Date selected.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.DateTime?>",
            "Documentation": "\n            <summary>\n            Raised when selected date changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayMonth",
            "TypeName": "System.DateTime",
            "Documentation": "\n            <summary>\n            Month to display.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayMonth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayMonthChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.DateTime>",
            "Documentation": "\n            <summary>\n            Raised when month selection changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayMonthChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MinDate",
            "TypeName": "System.DateTime?",
            "Documentation": "\n            <summary>\n            First date selectable from the calendar.<br />\n            Default is <c>1.1.1900</c> (configurable from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCalendar.Defaults\" />).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MinDate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxDate",
            "TypeName": "System.DateTime?",
            "Documentation": "\n            <summary>\n            Last date selectable from the calendar.<br />\n            Default is <c>31.12.2099</c> (configurable from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCalendar.Defaults\" />).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxDate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DateCustomizationProvider",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.CalendarDateCustomizationProviderDelegate",
            "Documentation": "\n            <summary>\n            Allows customization of the dates in calendar.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DateCustomizationProvider",
              "Components.DelegateSignature": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCalendar"
        }
      },
      {
        "HashCode": 1048148412,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCalendar",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Basic calendar building block. Used for <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1\" /> and <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange\" /> implementation.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxCalendar"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.CalendarSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCalendar.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.DateTime?",
            "Documentation": "\n            <summary>\n            Date selected.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.DateTime?>",
            "Documentation": "\n            <summary>\n            Raised when selected date changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayMonth",
            "TypeName": "System.DateTime",
            "Documentation": "\n            <summary>\n            Month to display.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayMonth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayMonthChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.DateTime>",
            "Documentation": "\n            <summary>\n            Raised when month selection changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayMonthChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MinDate",
            "TypeName": "System.DateTime?",
            "Documentation": "\n            <summary>\n            First date selectable from the calendar.<br />\n            Default is <c>1.1.1900</c> (configurable from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCalendar.Defaults\" />).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MinDate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxDate",
            "TypeName": "System.DateTime?",
            "Documentation": "\n            <summary>\n            Last date selectable from the calendar.<br />\n            Default is <c>31.12.2099</c> (configurable from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCalendar.Defaults\" />).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxDate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DateCustomizationProvider",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.CalendarDateCustomizationProviderDelegate",
            "Documentation": "\n            <summary>\n            Allows customization of the dates in calendar.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DateCustomizationProvider",
              "Components.DelegateSignature": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCalendar",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 58341989,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCard",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Bootstrap <a href=\"https://getbootstrap.com/docs/5.1/components/card/\">Card</a> component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxCard"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.CardSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ImageSrc",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Image to be placed in the card. For image position see <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.ImagePlacement\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ImageSrc"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ImagePlacement",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.CardImagePlacement",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Placement of the image. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.CardImagePlacement.Top\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ImagePlacement"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ImageAlt",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Image <c>alt</c> attribute value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ImageAlt"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ImageWidth",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Image <c>width</c> attribute value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ImageWidth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ImageHeight",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Image <c>height</c> attribute value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ImageHeight"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Header content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BodyTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Body content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BodyTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Footer content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FooterTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Generic card content (outside <c>.card-body</c>).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS classes for the card-container.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class for the header.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BodyCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class for the body.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BodyCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class for the footer.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FooterCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Additional attributes to be splatted onto an underlying HTML element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCard"
        }
      },
      {
        "HashCode": -1174588149,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCard",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Bootstrap <a href=\"https://getbootstrap.com/docs/5.1/components/card/\">Card</a> component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxCard"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.CardSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ImageSrc",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Image to be placed in the card. For image position see <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.ImagePlacement\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ImageSrc"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ImagePlacement",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.CardImagePlacement",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Placement of the image. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.CardImagePlacement.Top\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ImagePlacement"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ImageAlt",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Image <c>alt</c> attribute value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ImageAlt"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ImageWidth",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Image <c>width</c> attribute value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ImageWidth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ImageHeight",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Image <c>height</c> attribute value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ImageHeight"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Header content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BodyTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Body content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BodyTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Footer content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FooterTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Generic card content (outside <c>.card-body</c>).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS classes for the card-container.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class for the header.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BodyCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class for the body.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BodyCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class for the footer.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FooterCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Additional attributes to be splatted onto an underlying HTML element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCard",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1364461617,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCard.HeaderTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Header content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HeaderTemplate",
            "ParentTag": "HxCard"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCard.HeaderTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -693937877,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCard.HeaderTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Header content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HeaderTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxCard"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCard.HeaderTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 905772872,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCard.BodyTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Body content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BodyTemplate",
            "ParentTag": "HxCard"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCard.BodyTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -432152858,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCard.BodyTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Body content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BodyTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxCard"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCard.BodyTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1603587016,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCard.FooterTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Footer content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "FooterTemplate",
            "ParentTag": "HxCard"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCard.FooterTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1013852395,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCard.FooterTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Footer content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "FooterTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxCard"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCard.FooterTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1620693372,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCard.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Generic card content (outside <c>.card-body</c>).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxCard"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCard.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -44691673,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCard.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Generic card content (outside <c>.card-body</c>).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxCard"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCard.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -667689904,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCardSubtitle",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Bootstrap <see href=\"https://getbootstrap.com/docs/5.1/components/card/#titles-text-and-links\">card-subtitle</see> component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxCardSubtitle"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Text content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HtmlElement",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Underlying HTML element for card-subtitle. Default is <c>h6</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HtmlElement"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class(es) for the card-subtitle element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Additional attributes to be splatted onto an underlying HTML element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCardSubtitle"
        }
      },
      {
        "HashCode": 231652670,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCardSubtitle",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Bootstrap <see href=\"https://getbootstrap.com/docs/5.1/components/card/#titles-text-and-links\">card-subtitle</see> component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxCardSubtitle"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Text content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HtmlElement",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Underlying HTML element for card-subtitle. Default is <c>h6</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HtmlElement"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class(es) for the card-subtitle element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Additional attributes to be splatted onto an underlying HTML element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCardSubtitle",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 196355219,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCardSubtitle.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Text content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxCardSubtitle"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCardSubtitle.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -271129826,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCardSubtitle.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Text content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxCardSubtitle"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCardSubtitle.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 482406245,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCardText",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Bootstrap <see href=\"https://getbootstrap.com/docs/5.1/components/card/#titles-text-and-links\">card-title</see> component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxCardText"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Text content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class(es) for the card-text element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCardText"
        }
      },
      {
        "HashCode": -1593004640,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCardText",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Bootstrap <see href=\"https://getbootstrap.com/docs/5.1/components/card/#titles-text-and-links\">card-title</see> component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxCardText"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Text content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class(es) for the card-text element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCardText",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 471697655,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCardText.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Text content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxCardText"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCardText.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1898636727,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCardText.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Text content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxCardText"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCardText.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1023359254,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCardTitle",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Bootstrap <see href=\"https://getbootstrap.com/docs/5.1/components/card/#titles-text-and-links\">card-title</see> component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxCardTitle"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Text content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HtmlElement",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Underlying HTML element for card-title. Default is <c>h5</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HtmlElement"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class(es) for the card-title element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Additional attributes to be splatted onto an underlying HTML element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCardTitle"
        }
      },
      {
        "HashCode": -804540258,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCardTitle",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Bootstrap <see href=\"https://getbootstrap.com/docs/5.1/components/card/#titles-text-and-links\">card-title</see> component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxCardTitle"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Text content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HtmlElement",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Underlying HTML element for card-title. Default is <c>h5</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HtmlElement"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class(es) for the card-title element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Additional attributes to be splatted onto an underlying HTML element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCardTitle",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1478944171,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCardTitle.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Text content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxCardTitle"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCardTitle.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1278497066,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCardTitle.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Text content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxCardTitle"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCardTitle.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1134589870,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCarousel",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            A slideshow component for cycling through elements—images or slides of text—like a carousel.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxCarousel"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Content of the carousel.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Carousel CSS class. Added to root div <c>.carousel</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Controls",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Display controls to switch between slides.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Controls"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Indicators",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Display indicators showing which slide is active. Can also be used to switch between slides.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Indicators"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Dark",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Show controls, captions, etc. to dark colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Dark"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Crossfade",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Animate slides with a fade transition instead of slide.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Crossfade"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Interval",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Delay for automatically switching slides. Default is <c>3000 ms</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Interval"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TouchSwiping",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Enable or disable swiping left/right on touchscreen devices to move between slides.\n            Default is <c>true</c> (enabled).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TouchSwiping"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnSlide",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.Bootstrap.CarouselSlideEventArgs>",
            "Documentation": "\n            <summary>\n            Is fired when the current slide is changed (at the very start of the sliding transition).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnSlide",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnSlid",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.Bootstrap.CarouselSlideEventArgs>",
            "Documentation": "\n            <summary>\n            Is fired when the current slide is changed (once the transition is completed).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnSlid",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Ride",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.CarouselRide",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Carousel ride (autoplay) behavior. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.CarouselRide.Carousel\" /> (autoplays the carousel on load).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Ride"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Pause",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.CarouselPause",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Carousel pause behavior. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.CarouselPause.Hover\" /> (carousel will stop sliding on hover).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Pause"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCarousel"
        }
      },
      {
        "HashCode": -1788416406,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCarousel",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            A slideshow component for cycling through elements—images or slides of text—like a carousel.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxCarousel"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Content of the carousel.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Carousel CSS class. Added to root div <c>.carousel</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Controls",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Display controls to switch between slides.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Controls"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Indicators",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Display indicators showing which slide is active. Can also be used to switch between slides.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Indicators"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Dark",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Show controls, captions, etc. to dark colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Dark"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Crossfade",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Animate slides with a fade transition instead of slide.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Crossfade"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Interval",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Delay for automatically switching slides. Default is <c>3000 ms</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Interval"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TouchSwiping",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Enable or disable swiping left/right on touchscreen devices to move between slides.\n            Default is <c>true</c> (enabled).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TouchSwiping"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnSlide",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.Bootstrap.CarouselSlideEventArgs>",
            "Documentation": "\n            <summary>\n            Is fired when the current slide is changed (at the very start of the sliding transition).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnSlide",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnSlid",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.Bootstrap.CarouselSlideEventArgs>",
            "Documentation": "\n            <summary>\n            Is fired when the current slide is changed (once the transition is completed).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnSlid",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Ride",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.CarouselRide",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Carousel ride (autoplay) behavior. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.CarouselRide.Carousel\" /> (autoplays the carousel on load).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Ride"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Pause",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.CarouselPause",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Carousel pause behavior. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.CarouselPause.Hover\" /> (carousel will stop sliding on hover).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Pause"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCarousel",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -436232891,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCarousel.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Content of the carousel.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxCarousel"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCarousel.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 334307907,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCarousel.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Content of the carousel.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxCarousel"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCarousel.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 432158887,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCarouselCaption",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxCarouselCaption"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCarouselCaption"
        }
      },
      {
        "HashCode": -486822157,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCarouselCaption",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxCarouselCaption"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCarouselCaption",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -189297650,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCarouselCaption.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxCarouselCaption"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCarouselCaption.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1231668858,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCarouselCaption.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxCarouselCaption"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCarouselCaption.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -14246988,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCarouselItem",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxCarouselItem"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Active",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "Active"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Interval",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Time before automatically cycling to the next item.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Interval"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCarouselItem"
        }
      },
      {
        "HashCode": -1467506244,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCarouselItem",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxCarouselItem"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Active",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "Active"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Interval",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Time before automatically cycling to the next item.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Interval"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCarouselItem",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 825890695,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCarouselItem.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxCarouselItem"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCarouselItem.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 868959331,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCarouselItem.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxCarouselItem"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCarouselItem.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1114932759,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxChipGenerator"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChipRemoveAction",
            "TypeName": "System.Action<System.Object>",
            "Metadata": {
              "Common.PropertyName": "ChipRemoveAction",
              "Components.DelegateSignature": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator"
        }
      },
      {
        "HashCode": -845378106,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChipRemoveAction",
            "TypeName": "System.Action<System.Object>",
            "Metadata": {
              "Common.PropertyName": "ChipRemoveAction",
              "Components.DelegateSignature": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1773824236,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxChipGenerator"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1467767393,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -61111702,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxChipList",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Presents a list of chips as badges.<br />\n            Usualy being used to present filter-criteria gathered by <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxFilterForm`1\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxChipList"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Chips",
            "TypeName": "System.Collections.Generic.IEnumerable<Havit.Blazor.Components.Web.Bootstrap.ChipItem>",
            "Documentation": "\n            <summary>\n            Chips to be presented.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Chips"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnChipRemoveClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.Bootstrap.ChipItem>",
            "Documentation": "\n            <summary>\n            Called when chip remove button is clicked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnChipRemoveClick",
              "Components.EventCallback": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxChipList"
        }
      },
      {
        "HashCode": 257975872,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxChipList",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Presents a list of chips as badges.<br />\n            Usualy being used to present filter-criteria gathered by <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxFilterForm`1\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxChipList"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Chips",
            "TypeName": "System.Collections.Generic.IEnumerable<Havit.Blazor.Components.Web.Bootstrap.ChipItem>",
            "Documentation": "\n            <summary>\n            Chips to be presented.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Chips"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnChipRemoveClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.Bootstrap.ChipItem>",
            "Documentation": "\n            <summary>\n            Called when chip remove button is clicked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnChipRemoveClick",
              "Components.EventCallback": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxChipList",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1773164248,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCollapse",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <see href=\"https://getbootstrap.com/docs/5.1/components/collapse/\">Bootstrap 5 Collapse</see> component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxCollapse"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Id",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Element ID. To be referenced by <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleButton.CollapseTarget\" />.\n            (Autogenerated GUID if not set explicitly.)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Id"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CollapseDirection",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.CollapseDirection",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Direction of the animation.\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.CollapseDirection.Vertical\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CollapseDirection"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Parent",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If parent is provided, then all collapsible elements under the specified parent will be closed when this collapsible item is shown.\n            (Similar to traditional accordion behavior.)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Parent"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Content of the collapse.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnShown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            This event is fired when a collapse element has been made visible to the user (will wait for CSS transitions to complete).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnShown",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnHidden",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            This event is fired when a collapse element has been hidden from the user (will wait for CSS transitions to complete).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnHidden",
              "Components.EventCallback": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCollapse"
        }
      },
      {
        "HashCode": -1927958928,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCollapse",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <see href=\"https://getbootstrap.com/docs/5.1/components/collapse/\">Bootstrap 5 Collapse</see> component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxCollapse"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Id",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Element ID. To be referenced by <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleButton.CollapseTarget\" />.\n            (Autogenerated GUID if not set explicitly.)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Id"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CollapseDirection",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.CollapseDirection",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Direction of the animation.\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.CollapseDirection.Vertical\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CollapseDirection"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Parent",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If parent is provided, then all collapsible elements under the specified parent will be closed when this collapsible item is shown.\n            (Similar to traditional accordion behavior.)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Parent"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Content of the collapse.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnShown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            This event is fired when a collapse element has been made visible to the user (will wait for CSS transitions to complete).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnShown",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnHidden",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            This event is fired when a collapse element has been hidden from the user (will wait for CSS transitions to complete).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnHidden",
              "Components.EventCallback": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCollapse",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 243683836,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCollapse.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Content of the collapse.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxCollapse"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCollapse.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 131488898,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCollapse.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Content of the collapse.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxCollapse"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCollapse.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 457605271,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleButton",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Bootstrap Collapse toggle (in form of button) which triggers the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapse\" /> to toggle.\n            Derived from <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxButton\" /> (incl. <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" /> inheritance).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxCollapseToggleButton"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "CollapseTarget",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Target selector of the toggle.\n            Use <c>#id</c> to reference single <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapse\" /> or <c>.class</c> for multiple <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapse\" />s.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CollapseTarget"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text of the button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Button content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "Havit.Blazor.Components.Web.IconBase",
            "Documentation": "\n            <summary>\n            Icon to render into the button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconPlacement",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement?",
            "Documentation": "\n            <summary>\n            Position of the icon within the button. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement.Start\" /> (configurable through <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconPlacement"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ThemeColor?",
            "Documentation": "\n            <summary>\n            Bootstrap button style - theme color.<br />\n            Default is taken from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" /> (<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ThemeColor.None\" /> if not customized).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonSize?",
            "Documentation": "\n            <summary>\n            Button size. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonSize.Regular\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Outline",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            <see href=\"https://getbootstrap.com/docs/5.0/components/buttons/#outline-buttons\">Bootstrap \"outline\" button</see> style.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Outline"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the <c>&lt;button /&gt;</c>.<br />\n            When using <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> you might want to use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" /> to get the desired result.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EditContext",
            "TypeName": "Microsoft.AspNetCore.Components.Forms.EditContext",
            "Documentation": "\n            <summary>\n            Associated <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.EditContext\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EditContext"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FormId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Specifies the form the button belongs to.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FormId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tooltip",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Tooltip text.<br />\n            If set, a <c>span</c> wrapper will be rendered around the <c>&lt;button /&gt;</c>. For most scenarios you will then use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tooltip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TooltipPlacement",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Tooltip placement.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TooltipPlacement"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TooltipCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the tooltip.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TooltipCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TooltipWrapperCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the tooltip <c>span</c> wrapper of the <c>&lt;button /&gt;</c>.<br />\n            If set, the <c>span</c> wrapper will be rendered no matter the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> text is set or not.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TooltipWrapperCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised after the button is clicked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnValidClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised after the button is clicked and EditContext validation succeeds.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnValidClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInvalidClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised after the button is clicked and EditContext validation fails.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnInvalidClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClickStopPropagation",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Stop onClick-event propagation. Deafult is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClickStopPropagation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClickPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevents the default action for the onclick event. Deafult is <c>false</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClickPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Spinner",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Set state of the embedded <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSpinner\" />.\n            Leave <c>null</c> if you want automated spinner when any of the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers is running.\n            You can set an explicit <c>false</c> constant to disable (override) the spinner automation.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Spinner"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SingleClickProtection",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set <c>false</c> if you want to allow multiple <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers in parallel. Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SingleClickProtection"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Additional attributes to be splatted onto an underlying <c>&lt;button&gt;</c> element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleButton"
        }
      },
      {
        "HashCode": 1552416245,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleButton",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Bootstrap Collapse toggle (in form of button) which triggers the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapse\" /> to toggle.\n            Derived from <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxButton\" /> (incl. <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" /> inheritance).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleButton"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "CollapseTarget",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Target selector of the toggle.\n            Use <c>#id</c> to reference single <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapse\" /> or <c>.class</c> for multiple <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapse\" />s.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CollapseTarget"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text of the button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Button content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "Havit.Blazor.Components.Web.IconBase",
            "Documentation": "\n            <summary>\n            Icon to render into the button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconPlacement",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement?",
            "Documentation": "\n            <summary>\n            Position of the icon within the button. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement.Start\" /> (configurable through <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconPlacement"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ThemeColor?",
            "Documentation": "\n            <summary>\n            Bootstrap button style - theme color.<br />\n            Default is taken from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" /> (<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ThemeColor.None\" /> if not customized).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonSize?",
            "Documentation": "\n            <summary>\n            Button size. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonSize.Regular\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Outline",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            <see href=\"https://getbootstrap.com/docs/5.0/components/buttons/#outline-buttons\">Bootstrap \"outline\" button</see> style.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Outline"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the <c>&lt;button /&gt;</c>.<br />\n            When using <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> you might want to use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" /> to get the desired result.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EditContext",
            "TypeName": "Microsoft.AspNetCore.Components.Forms.EditContext",
            "Documentation": "\n            <summary>\n            Associated <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.EditContext\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EditContext"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FormId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Specifies the form the button belongs to.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FormId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tooltip",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Tooltip text.<br />\n            If set, a <c>span</c> wrapper will be rendered around the <c>&lt;button /&gt;</c>. For most scenarios you will then use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tooltip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TooltipPlacement",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Tooltip placement.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TooltipPlacement"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TooltipCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the tooltip.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TooltipCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TooltipWrapperCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the tooltip <c>span</c> wrapper of the <c>&lt;button /&gt;</c>.<br />\n            If set, the <c>span</c> wrapper will be rendered no matter the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> text is set or not.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TooltipWrapperCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised after the button is clicked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnValidClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised after the button is clicked and EditContext validation succeeds.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnValidClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInvalidClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised after the button is clicked and EditContext validation fails.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnInvalidClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClickStopPropagation",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Stop onClick-event propagation. Deafult is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClickStopPropagation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClickPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevents the default action for the onclick event. Deafult is <c>false</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClickPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Spinner",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Set state of the embedded <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSpinner\" />.\n            Leave <c>null</c> if you want automated spinner when any of the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers is running.\n            You can set an explicit <c>false</c> constant to disable (override) the spinner automation.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Spinner"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SingleClickProtection",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set <c>false</c> if you want to allow multiple <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers in parallel. Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SingleClickProtection"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Additional attributes to be splatted onto an underlying <c>&lt;button&gt;</c> element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleButton",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 898186122,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleButton.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Button content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxCollapseToggleButton"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleButton.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -766859562,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleButton.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Button content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleButton"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleButton.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 925003382,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleElement",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Bootstrap Collapse toggle triggering the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapse\" /> to toggle.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxCollapseToggleElement"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ElementName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the name of the element to render. Default is <c>span</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ElementName"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the toggle element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IDictionary<System.String, System.Object>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CollapseTarget",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Target selector of the toggle.\n            Use <c>#id</c> to reference single <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapse\" /> or <c>.class</c> for multiple <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapse\" />s.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CollapseTarget"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleElement"
        }
      },
      {
        "HashCode": 1610311683,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleElement",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Bootstrap Collapse toggle triggering the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapse\" /> to toggle.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleElement"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ElementName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the name of the element to render. Default is <c>span</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ElementName"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the toggle element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IDictionary<System.String, System.Object>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CollapseTarget",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Target selector of the toggle.\n            Use <c>#id</c> to reference single <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapse\" /> or <c>.class</c> for multiple <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapse\" />s.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CollapseTarget"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleElement",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1675621157,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleElement.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxCollapseToggleElement"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleElement.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 806664844,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleElement.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleElement"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleElement.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 2108484859,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxContextMenu",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Ready-made context menu (based on <see href=\"https://getbootstrap.com/docs/5.1/components/dropdowns/\">Bootstrap Dropdown</see>).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxContextMenu"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxContextMenu"
        }
      },
      {
        "HashCode": 1183983925,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxContextMenu",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Ready-made context menu (based on <see href=\"https://getbootstrap.com/docs/5.1/components/dropdowns/\">Bootstrap Dropdown</see>).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxContextMenu"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxContextMenu",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1667661086,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxContextMenu.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxContextMenu"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxContextMenu.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 538830966,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxContextMenu.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxContextMenu"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxContextMenu.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1886388974,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxContextMenuItem",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxContextMenuItem"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Item text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Custom item content to be rendered.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "Havit.Blazor.Components.Web.IconBase",
            "Documentation": "\n            <summary>\n            Item icon (use <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.BootstrapIcon\" />).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ConfirmationQuestion",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Displays <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxMessageBox\" /> to get a confirmation.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ConfirmationQuestion"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Item clicked event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClickStopPropagation",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Stop onClick-event propagation. Deafult is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClickStopPropagation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxContextMenuItem"
        }
      },
      {
        "HashCode": 518728435,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxContextMenuItem",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxContextMenuItem"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Item text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Custom item content to be rendered.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "Havit.Blazor.Components.Web.IconBase",
            "Documentation": "\n            <summary>\n            Item icon (use <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.BootstrapIcon\" />).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ConfirmationQuestion",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Displays <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxMessageBox\" /> to get a confirmation.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ConfirmationQuestion"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Item clicked event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClickStopPropagation",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Stop onClick-event propagation. Deafult is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClickStopPropagation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxContextMenuItem",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1857055538,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxContextMenuItem.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Custom item content to be rendered.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxContextMenuItem"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxContextMenuItem.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 873617199,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxContextMenuItem.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Custom item content to be rendered.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxContextMenuItem"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxContextMenuItem.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -783601862,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxDropdown",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <see href=\"https://getbootstrap.com/docs/5.1/components/dropdowns/\">Bootstrap 5 Dropdown</see> component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxDropdown"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Direction",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.DropdownDirection",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "Direction"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Split",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set <c>true</c> to create a <a href=\"https://getbootstrap.com/docs/5.1/components/dropdowns/#split-button\">split dropdown</a>\n            (using a <c>btn-group</c>).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Split"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AutoClose",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.DropdownAutoClose",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            By default, the dropdown menu is closed when clicking inside or outside the dropdown menu (<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.DropdownAutoClose.True\" />).\n            You can use the AutoClose parameter to change this behavior of the dropdown.\n            <see href=\"https://getbootstrap.com/docs/5.1/components/dropdowns/#auto-close-behavior\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AutoClose"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Any additional CSS class to apply.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdown"
        }
      },
      {
        "HashCode": 18985026,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxDropdown",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <see href=\"https://getbootstrap.com/docs/5.1/components/dropdowns/\">Bootstrap 5 Dropdown</see> component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdown"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Direction",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.DropdownDirection",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "Direction"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Split",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set <c>true</c> to create a <a href=\"https://getbootstrap.com/docs/5.1/components/dropdowns/#split-button\">split dropdown</a>\n            (using a <c>btn-group</c>).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Split"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AutoClose",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.DropdownAutoClose",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            By default, the dropdown menu is closed when clicking inside or outside the dropdown menu (<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.DropdownAutoClose.True\" />).\n            You can use the AutoClose parameter to change this behavior of the dropdown.\n            <see href=\"https://getbootstrap.com/docs/5.1/components/dropdowns/#auto-close-behavior\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AutoClose"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Any additional CSS class to apply.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdown",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -950770128,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxDropdown.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxDropdown"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdown.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -267997855,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxDropdown.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxDropdown"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdown.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1051819573,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Custom dropdown content for <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdown\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxDropdownContent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Any additional CSS class to apply.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownContent"
        }
      },
      {
        "HashCode": -529729944,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Custom dropdown content for <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdown\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownContent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Any additional CSS class to apply.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -958018334,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownContent.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxDropdownContent"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownContent.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -219868425,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownContent.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownContent"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownContent.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -110580153,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownDivider",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Divider for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxDropdownDivider"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownDivider"
        }
      },
      {
        "HashCode": -293271680,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownDivider",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Divider for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownDivider"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownDivider",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1062196783,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownHeader",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <a href=\"https://getbootstrap.com/docs/5.1/components/dropdowns/#headers\">Dropdown menu header</a> for <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxDropdownHeader"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Any additional CSS class to apply.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownHeader"
        }
      },
      {
        "HashCode": 324608421,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownHeader",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <a href=\"https://getbootstrap.com/docs/5.1/components/dropdowns/#headers\">Dropdown menu header</a> for <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownHeader"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Any additional CSS class to apply.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownHeader",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1768029699,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownHeader.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxDropdownHeader"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownHeader.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1391542473,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownHeader.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownHeader"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownHeader.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1945430500,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownItem",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Generic item for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxDropdownItem"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Any additional CSS class to apply.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised when the item is clicked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownItem"
        }
      },
      {
        "HashCode": 130682541,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownItem",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Generic item for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownItem"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Any additional CSS class to apply.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised when the item is clicked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownItem",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 748143924,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownItem.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxDropdownItem"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownItem.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -722717470,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownItem.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownItem"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownItem.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1825617093,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemNavLink",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\" /> item for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxDropdownItemNavLink"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Href",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Navigation target.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Href"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text of the item.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Match",
            "TypeName": "Microsoft.AspNetCore.Components.Routing.NavLinkMatch?",
            "Documentation": "\n            <summary>\n            URL matching behavior for the underlying <see cref=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\" />.\n            Default is <see cref=\"F:Microsoft.AspNetCore.Components.Routing.NavLinkMatch.Prefix\" />.\n            You can set the value to <c>null</c> to disable the matching.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Match"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised when the item is clicked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Additional attributes to be splatted onto an underlying <see cref=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\" /> component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemNavLink"
        }
      },
      {
        "HashCode": 1192129975,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemNavLink",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\" /> item for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemNavLink"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Href",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Navigation target.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Href"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text of the item.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Match",
            "TypeName": "Microsoft.AspNetCore.Components.Routing.NavLinkMatch?",
            "Documentation": "\n            <summary>\n            URL matching behavior for the underlying <see cref=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\" />.\n            Default is <see cref=\"F:Microsoft.AspNetCore.Components.Routing.NavLinkMatch.Prefix\" />.\n            You can set the value to <c>null</c> to disable the matching.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Match"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised when the item is clicked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Additional attributes to be splatted onto an underlying <see cref=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\" /> component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemNavLink",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1326322437,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemNavLink.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxDropdownItemNavLink"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemNavLink.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1348257133,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemNavLink.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemNavLink"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemNavLink.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1750957943,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemText",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Text item for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxDropdownItemText"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Any additional CSS class to apply.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemText"
        }
      },
      {
        "HashCode": 2096535594,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemText",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Text item for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemText"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Any additional CSS class to apply.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemText",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1585885947,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemText.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxDropdownItemText"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemText.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 984102182,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemText.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemText"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemText.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 839436156,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Bootstrap Dropdown menu which opens when triggered.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxDropdownMenu"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Any additional CSS class to apply.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu"
        }
      },
      {
        "HashCode": 708242896,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Bootstrap Dropdown menu which opens when triggered.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Any additional CSS class to apply.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 756462045,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxDropdownMenu"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1366093472,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 321582761,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleButton",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <see href=\"https://getbootstrap.com/docs/5.1/components/dropdowns/\">Bootstrap Dropdown</see> toggle button which triggers the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdown\" /> to open.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxDropdownToggleButton"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "DropdownOffset",
            "TypeName": "(System.Int32 Skidding, System.Int32 Distance)?",
            "Documentation": "\n            <summary>\n            Offset <c>(<see href=\"https://popper.js.org/docs/v2/modifiers/offset/#skidding-1\">skidding</see>, <see href=\"https://popper.js.org/docs/v2/modifiers/offset/#distance-1\">distance</see>)</c>\n            of the dropdown relative to its target.  Default is <c>(0, 2)</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DropdownOffset"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DropdownReference",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Reference element of the dropdown menu. Accepts the values of <c>toggle</c> (default), <c>parent</c>,\n            an HTMLElement reference (e.g. <c>#id</c>) or an object providing <c>getBoundingClientRect</c>.\n            For more information refer to Popper's <see href=\"https://popper.js.org/docs/v2/constructors/#createpopper\">constructor docs</see>\n            and <see href=\"https://popper.js.org/docs/v2/virtual-elements/\">virtual element docs</see>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DropdownReference"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnShown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Fired when the dropdown has been made visible to the user and CSS transitions have completed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnShown",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnHidden",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Fired when the dropdown has finished being hidden from the user and CSS transitions have completed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnHidden",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text of the button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Button content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "Havit.Blazor.Components.Web.IconBase",
            "Documentation": "\n            <summary>\n            Icon to render into the button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconPlacement",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement?",
            "Documentation": "\n            <summary>\n            Position of the icon within the button. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement.Start\" /> (configurable through <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconPlacement"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ThemeColor?",
            "Documentation": "\n            <summary>\n            Bootstrap button style - theme color.<br />\n            Default is taken from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" /> (<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ThemeColor.None\" /> if not customized).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonSize?",
            "Documentation": "\n            <summary>\n            Button size. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonSize.Regular\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Outline",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            <see href=\"https://getbootstrap.com/docs/5.0/components/buttons/#outline-buttons\">Bootstrap \"outline\" button</see> style.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Outline"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the <c>&lt;button /&gt;</c>.<br />\n            When using <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> you might want to use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" /> to get the desired result.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EditContext",
            "TypeName": "Microsoft.AspNetCore.Components.Forms.EditContext",
            "Documentation": "\n            <summary>\n            Associated <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.EditContext\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EditContext"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FormId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Specifies the form the button belongs to.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FormId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tooltip",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Tooltip text.<br />\n            If set, a <c>span</c> wrapper will be rendered around the <c>&lt;button /&gt;</c>. For most scenarios you will then use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tooltip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TooltipPlacement",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Tooltip placement.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TooltipPlacement"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TooltipCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the tooltip.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TooltipCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TooltipWrapperCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the tooltip <c>span</c> wrapper of the <c>&lt;button /&gt;</c>.<br />\n            If set, the <c>span</c> wrapper will be rendered no matter the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> text is set or not.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TooltipWrapperCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised after the button is clicked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnValidClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised after the button is clicked and EditContext validation succeeds.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnValidClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInvalidClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised after the button is clicked and EditContext validation fails.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnInvalidClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClickStopPropagation",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Stop onClick-event propagation. Deafult is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClickStopPropagation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClickPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevents the default action for the onclick event. Deafult is <c>false</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClickPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Spinner",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Set state of the embedded <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSpinner\" />.\n            Leave <c>null</c> if you want automated spinner when any of the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers is running.\n            You can set an explicit <c>false</c> constant to disable (override) the spinner automation.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Spinner"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SingleClickProtection",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set <c>false</c> if you want to allow multiple <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers in parallel. Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SingleClickProtection"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Additional attributes to be splatted onto an underlying <c>&lt;button&gt;</c> element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleButton"
        }
      },
      {
        "HashCode": -287894663,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleButton",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <see href=\"https://getbootstrap.com/docs/5.1/components/dropdowns/\">Bootstrap Dropdown</see> toggle button which triggers the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdown\" /> to open.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleButton"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "DropdownOffset",
            "TypeName": "(System.Int32 Skidding, System.Int32 Distance)?",
            "Documentation": "\n            <summary>\n            Offset <c>(<see href=\"https://popper.js.org/docs/v2/modifiers/offset/#skidding-1\">skidding</see>, <see href=\"https://popper.js.org/docs/v2/modifiers/offset/#distance-1\">distance</see>)</c>\n            of the dropdown relative to its target.  Default is <c>(0, 2)</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DropdownOffset"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DropdownReference",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Reference element of the dropdown menu. Accepts the values of <c>toggle</c> (default), <c>parent</c>,\n            an HTMLElement reference (e.g. <c>#id</c>) or an object providing <c>getBoundingClientRect</c>.\n            For more information refer to Popper's <see href=\"https://popper.js.org/docs/v2/constructors/#createpopper\">constructor docs</see>\n            and <see href=\"https://popper.js.org/docs/v2/virtual-elements/\">virtual element docs</see>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DropdownReference"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnShown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Fired when the dropdown has been made visible to the user and CSS transitions have completed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnShown",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnHidden",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Fired when the dropdown has finished being hidden from the user and CSS transitions have completed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnHidden",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text of the button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Button content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "Havit.Blazor.Components.Web.IconBase",
            "Documentation": "\n            <summary>\n            Icon to render into the button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconPlacement",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement?",
            "Documentation": "\n            <summary>\n            Position of the icon within the button. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement.Start\" /> (configurable through <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconPlacement"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ThemeColor?",
            "Documentation": "\n            <summary>\n            Bootstrap button style - theme color.<br />\n            Default is taken from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" /> (<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ThemeColor.None\" /> if not customized).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonSize?",
            "Documentation": "\n            <summary>\n            Button size. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonSize.Regular\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Outline",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            <see href=\"https://getbootstrap.com/docs/5.0/components/buttons/#outline-buttons\">Bootstrap \"outline\" button</see> style.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Outline"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the <c>&lt;button /&gt;</c>.<br />\n            When using <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> you might want to use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" /> to get the desired result.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EditContext",
            "TypeName": "Microsoft.AspNetCore.Components.Forms.EditContext",
            "Documentation": "\n            <summary>\n            Associated <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.EditContext\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EditContext"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FormId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Specifies the form the button belongs to.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FormId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tooltip",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Tooltip text.<br />\n            If set, a <c>span</c> wrapper will be rendered around the <c>&lt;button /&gt;</c>. For most scenarios you will then use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tooltip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TooltipPlacement",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Tooltip placement.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TooltipPlacement"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TooltipCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the tooltip.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TooltipCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TooltipWrapperCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the tooltip <c>span</c> wrapper of the <c>&lt;button /&gt;</c>.<br />\n            If set, the <c>span</c> wrapper will be rendered no matter the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> text is set or not.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TooltipWrapperCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised after the button is clicked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnValidClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised after the button is clicked and EditContext validation succeeds.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnValidClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInvalidClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised after the button is clicked and EditContext validation fails.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnInvalidClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClickStopPropagation",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Stop onClick-event propagation. Deafult is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClickStopPropagation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClickPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevents the default action for the onclick event. Deafult is <c>false</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClickPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Spinner",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Set state of the embedded <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSpinner\" />.\n            Leave <c>null</c> if you want automated spinner when any of the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers is running.\n            You can set an explicit <c>false</c> constant to disable (override) the spinner automation.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Spinner"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SingleClickProtection",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set <c>false</c> if you want to allow multiple <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers in parallel. Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SingleClickProtection"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Additional attributes to be splatted onto an underlying <c>&lt;button&gt;</c> element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleButton",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -844153173,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleButton.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Button content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxDropdownToggleButton"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleButton.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 381200243,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleButton.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Button content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleButton"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleButton.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1349168436,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleElement",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <see href=\"https://getbootstrap.com/docs/5.1/components/dropdowns/\">Bootstrap Dropdown</see> toggle button which triggers the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdown\" /> to open.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxDropdownToggleElement"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ElementName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the name of the element to render. Default is <c>span</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ElementName"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DropdownReference",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Reference element of the dropdown menu. Accepts the values of <c>toggle</c> (default), <c>parent</c>,\n            an HTMLElement reference (e.g. <c>#id</c>) or an object providing <c>getBoundingClientRect</c>.\n            For more information refer to Popper's <see href=\"https://popper.js.org/docs/v2/constructors/#createpopper\">constructor docs</see>\n            and <see href=\"https://popper.js.org/docs/v2/virtual-elements/\">virtual element docs</see>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DropdownReference"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DropdownOffset",
            "TypeName": "(System.Int32 Skidding, System.Int32 Distance)?",
            "Documentation": "\n            <summary>\n            Offset <c>(<see href=\"https://popper.js.org/docs/v2/modifiers/offset/#skidding-1\">skidding</see>, <see href=\"https://popper.js.org/docs/v2/modifiers/offset/#distance-1\">distance</see>)</c>\n            of the dropdown relative to its target.  Default is <c>(0, 2)</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DropdownOffset"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the toggle element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IDictionary<System.String, System.Object>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnShown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Fired when the dropdown has been made visible to the user and CSS transitions have completed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnShown",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnHidden",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Fired when the dropdown has finished being hidden from the user and CSS transitions have completed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnHidden",
              "Components.EventCallback": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleElement"
        }
      },
      {
        "HashCode": 825619887,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleElement",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <see href=\"https://getbootstrap.com/docs/5.1/components/dropdowns/\">Bootstrap Dropdown</see> toggle button which triggers the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdown\" /> to open.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleElement"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ElementName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the name of the element to render. Default is <c>span</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ElementName"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DropdownReference",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Reference element of the dropdown menu. Accepts the values of <c>toggle</c> (default), <c>parent</c>,\n            an HTMLElement reference (e.g. <c>#id</c>) or an object providing <c>getBoundingClientRect</c>.\n            For more information refer to Popper's <see href=\"https://popper.js.org/docs/v2/constructors/#createpopper\">constructor docs</see>\n            and <see href=\"https://popper.js.org/docs/v2/virtual-elements/\">virtual element docs</see>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DropdownReference"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DropdownOffset",
            "TypeName": "(System.Int32 Skidding, System.Int32 Distance)?",
            "Documentation": "\n            <summary>\n            Offset <c>(<see href=\"https://popper.js.org/docs/v2/modifiers/offset/#skidding-1\">skidding</see>, <see href=\"https://popper.js.org/docs/v2/modifiers/offset/#distance-1\">distance</see>)</c>\n            of the dropdown relative to its target.  Default is <c>(0, 2)</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DropdownOffset"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the toggle element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IDictionary<System.String, System.Object>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnShown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Fired when the dropdown has been made visible to the user and CSS transitions have completed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnShown",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnHidden",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Fired when the dropdown has finished being hidden from the user and CSS transitions have completed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnHidden",
              "Components.EventCallback": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleElement",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -338132337,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleElement.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxDropdownToggleElement"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleElement.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1752784713,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleElement.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleElement"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleElement.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -696860079,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputFile",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Wraps <see cref=\"T:Havit.Blazor.Components.Web.HxInputFileCore\" /> as Bootstrap form control (incl. <c>Label</c> etc.)\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxInputFile"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputFileSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UploadUrl",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            URL of the server endpoint receiving the files.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UploadUrl"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnChange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>",
            "Documentation": "\n            <summary>\n            Gets or sets the event callback that will be invoked when the collection of selected files changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnChange",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnProgress",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.UploadProgressEventArgs>",
            "Documentation": "\n            <summary>\n            Raised during running file upload (the frequency depends on browser implementation).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnProgress",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnFileUploaded",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.FileUploadedEventArgs>",
            "Documentation": "\n            <summary>\n            Raised after a file is uploaded (for every single file separately).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnFileUploaded",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnUploadCompleted",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.UploadCompletedEventArgs>",
            "Documentation": "\n            <summary>\n            Raised when all files are uploaded (after all <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.OnFileUploaded\" /> events).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnUploadCompleted",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Multiple",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Single <c>false</c> or multiple <c>true</c> files upload.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Multiple"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxParallelUploads",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Maximum number of concurrent uploads. Default is <c>6</c> (from <see cref=\"T:Havit.Blazor.Components.Web.HxInputFileCore\" />).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxParallelUploads"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Accept",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Takes as its value a comma-separated list of one or more file types, or unique file type specifiers, describing which file types to allow.\n            <see href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept\">MDN Web Docs - HTML attribute: accept</see>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Accept"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxFileSize",
            "TypeName": "System.Int64?",
            "Documentation": "\n            <summary>\n            The maximum files size in bytes.\n            When exceeded, the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.OnFileUploaded\" /> returns <c>413-RequestEntityTooLarge</c> as <see cref=\"P:Havit.Blazor.Components.Web.FileUploadedEventArgs.ResponseStatus\" />.\n            Default is <c>null</c> (unlimited).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxFileSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\t\t\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Hint",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Hint"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HintTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HintTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with wrapping div.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the label.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputSize",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputSize?",
            "Documentation": "\n            <summary>\n            Size of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputFile"
        }
      },
      {
        "HashCode": 1007962339,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputFile",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Wraps <see cref=\"T:Havit.Blazor.Components.Web.HxInputFileCore\" /> as Bootstrap form control (incl. <c>Label</c> etc.)\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxInputFile"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputFileSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UploadUrl",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            URL of the server endpoint receiving the files.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UploadUrl"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnChange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>",
            "Documentation": "\n            <summary>\n            Gets or sets the event callback that will be invoked when the collection of selected files changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnChange",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnProgress",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.UploadProgressEventArgs>",
            "Documentation": "\n            <summary>\n            Raised during running file upload (the frequency depends on browser implementation).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnProgress",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnFileUploaded",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.FileUploadedEventArgs>",
            "Documentation": "\n            <summary>\n            Raised after a file is uploaded (for every single file separately).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnFileUploaded",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnUploadCompleted",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.UploadCompletedEventArgs>",
            "Documentation": "\n            <summary>\n            Raised when all files are uploaded (after all <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.OnFileUploaded\" /> events).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnUploadCompleted",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Multiple",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Single <c>false</c> or multiple <c>true</c> files upload.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Multiple"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxParallelUploads",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Maximum number of concurrent uploads. Default is <c>6</c> (from <see cref=\"T:Havit.Blazor.Components.Web.HxInputFileCore\" />).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxParallelUploads"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Accept",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Takes as its value a comma-separated list of one or more file types, or unique file type specifiers, describing which file types to allow.\n            <see href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept\">MDN Web Docs - HTML attribute: accept</see>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Accept"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxFileSize",
            "TypeName": "System.Int64?",
            "Documentation": "\n            <summary>\n            The maximum files size in bytes.\n            When exceeded, the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.OnFileUploaded\" /> returns <c>413-RequestEntityTooLarge</c> as <see cref=\"P:Havit.Blazor.Components.Web.FileUploadedEventArgs.ResponseStatus\" />.\n            Default is <c>null</c> (unlimited).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxFileSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\t\t\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Hint",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Hint"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HintTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HintTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with wrapping div.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the label.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputSize",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputSize?",
            "Documentation": "\n            <summary>\n            Size of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputFile",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1199651977,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputFile.LabelTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "LabelTemplate",
            "ParentTag": "HxInputFile"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputFile.LabelTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1434440132,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputFile.LabelTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "LabelTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxInputFile"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputFile.LabelTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -579026232,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputFile.HintTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HintTemplate",
            "ParentTag": "HxInputFile"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputFile.HintTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -2021657874,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputFile.HintTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HintTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxInputFile"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputFile.HintTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1386398135,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Ready-made UX for drag&amp;drop file upload.\n            For custom drag&amp;drop UX, use <see cref=\"T:Havit.Blazor.Components.Web.HxInputFileCore\" /> and <a href=\"https://github.com/havit/Havit.Blazor/blob/728567c9c83a0b4ab7fe2e031bf1ff378f1b1ce7/Havit.Blazor.Components.Web.Bootstrap/Files/HxInputFileDropZone.razor.css#L20-L26\">a little bit of HTML/CSS</a>.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxInputFileDropZone"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "UploadUrl",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            URL of the server endpoint receiving the files.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UploadUrl"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnChange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>",
            "Documentation": "\n            <summary>\n            Gets or sets the event callback that will be invoked when the collection of selected files changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnChange",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnProgress",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.UploadProgressEventArgs>",
            "Documentation": "\n            <summary>\n            Raised during running file upload (the frequency depends on browser implementation).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnProgress",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnFileUploaded",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.FileUploadedEventArgs>",
            "Documentation": "\n            <summary>\n            Raised after a file is uploaded (for every single file separately).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnFileUploaded",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnUploadCompleted",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.UploadCompletedEventArgs>",
            "Documentation": "\n            <summary>\n            Raised when all files are uploaded (after all <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone.OnFileUploaded\" /> events).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnUploadCompleted",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Multiple",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Single <c>false</c> or multiple <c>true</c> files upload.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Multiple"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxFileSize",
            "TypeName": "System.Int64?",
            "Documentation": "\n            <summary>\n            The maximum files size in bytes.\n            When exceeded, the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone.OnFileUploaded\" /> returns <c>413-RequestEntityTooLarge</c> as <see cref=\"P:Havit.Blazor.Components.Web.FileUploadedEventArgs.ResponseStatus\" />.\n            Default is <c>null</c> (unlimited).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxFileSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Accept",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Takes as its value a comma-separated list of one or more file types, or unique file type specifiers, describing which file types to allow.\n            <see href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept\">MDN Web Docs - HTML attribute: accept</see>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Accept"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NoFilesTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Content to render when no files are picked. Default content is displayed when not set.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NoFilesTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with wrapping div.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone"
        }
      },
      {
        "HashCode": -680365732,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Ready-made UX for drag&amp;drop file upload.\n            For custom drag&amp;drop UX, use <see cref=\"T:Havit.Blazor.Components.Web.HxInputFileCore\" /> and <a href=\"https://github.com/havit/Havit.Blazor/blob/728567c9c83a0b4ab7fe2e031bf1ff378f1b1ce7/Havit.Blazor.Components.Web.Bootstrap/Files/HxInputFileDropZone.razor.css#L20-L26\">a little bit of HTML/CSS</a>.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "UploadUrl",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            URL of the server endpoint receiving the files.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UploadUrl"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnChange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>",
            "Documentation": "\n            <summary>\n            Gets or sets the event callback that will be invoked when the collection of selected files changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnChange",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnProgress",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.UploadProgressEventArgs>",
            "Documentation": "\n            <summary>\n            Raised during running file upload (the frequency depends on browser implementation).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnProgress",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnFileUploaded",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.FileUploadedEventArgs>",
            "Documentation": "\n            <summary>\n            Raised after a file is uploaded (for every single file separately).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnFileUploaded",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnUploadCompleted",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.UploadCompletedEventArgs>",
            "Documentation": "\n            <summary>\n            Raised when all files are uploaded (after all <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone.OnFileUploaded\" /> events).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnUploadCompleted",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Multiple",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Single <c>false</c> or multiple <c>true</c> files upload.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Multiple"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxFileSize",
            "TypeName": "System.Int64?",
            "Documentation": "\n            <summary>\n            The maximum files size in bytes.\n            When exceeded, the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone.OnFileUploaded\" /> returns <c>413-RequestEntityTooLarge</c> as <see cref=\"P:Havit.Blazor.Components.Web.FileUploadedEventArgs.ResponseStatus\" />.\n            Default is <c>null</c> (unlimited).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxFileSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Accept",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Takes as its value a comma-separated list of one or more file types, or unique file type specifiers, describing which file types to allow.\n            <see href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept\">MDN Web Docs - HTML attribute: accept</see>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Accept"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NoFilesTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Content to render when no files are picked. Default content is displayed when not set.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NoFilesTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with wrapping div.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -2060498220,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone.NoFilesTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Content to render when no files are picked. Default content is displayed when not set.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NoFilesTemplate",
            "ParentTag": "HxInputFileDropZone"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone.NoFilesTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 48793959,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone.NoFilesTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Content to render when no files are picked. Default content is displayed when not set.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NoFilesTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone.NoFilesTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1791712772,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxFilterForm<TModel>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Edit form derived from HxModelEditForm with support for chip generators.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxFilterForm"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TModel",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TModel for the Havit.Blazor.Components.Web.Bootstrap.HxFilterForm<TModel> component.",
            "Metadata": {
              "Common.PropertyName": "TModel",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnChipsUpdated",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.Bootstrap.ChipItem[]>",
            "Metadata": {
              "Common.PropertyName": "OnChipsUpdated",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Id",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Form element id.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Id"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Model",
            "TypeName": "TModel",
            "Documentation": "\n            <summary>\n            Model.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Model",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ModelChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TModel>",
            "Documentation": "\n            <summary>\n            Model event callback. Invoked when valid form is updated.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ModelChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<TModel>",
            "Documentation": "\n            <summary>\n            Child content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxFilterForm<TModel>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": 1954744437,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxFilterForm<TModel>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Edit form derived from HxModelEditForm with support for chip generators.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxFilterForm"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TModel",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TModel for the Havit.Blazor.Components.Web.Bootstrap.HxFilterForm<TModel> component.",
            "Metadata": {
              "Common.PropertyName": "TModel",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnChipsUpdated",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.Bootstrap.ChipItem[]>",
            "Metadata": {
              "Common.PropertyName": "OnChipsUpdated",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Id",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Form element id.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Id"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Model",
            "TypeName": "TModel",
            "Documentation": "\n            <summary>\n            Model.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Model",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ModelChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TModel>",
            "Documentation": "\n            <summary>\n            Model event callback. Invoked when valid form is updated.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ModelChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<TModel>",
            "Documentation": "\n            <summary>\n            Child content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxFilterForm<TModel>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1163592284,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxFilterForm<TModel>.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Child content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxFilterForm"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ChildContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxFilterForm<TModel>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1038370228,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxFilterForm<TModel>.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Child content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxFilterForm"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ChildContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxFilterForm<TModel>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -91247892,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Component for single item selection with dynamic suggestions (based on typed characters).\n            </summary>\n            <remarks>\n            Defaults located in separate non-generic type <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest\" />.\n            </remarks>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxAutosuggest"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TItem",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TItem",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.AutosuggestSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DataProvider",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.AutosuggestDataProviderDelegate<TItem>",
            "Documentation": "\n            <summary>\n            Method (delegate) which provides data of the suggestions.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DataProvider",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueSelector",
            "TypeName": "System.Func<TItem, TValue>",
            "Documentation": "\n            <summary>\n            Selects value from item.\n            Not required when <c>TValue</c> is same as  <c>TItem</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueSelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextSelector",
            "TypeName": "System.Func<TItem, System.String>",
            "Documentation": "\n            <summary>\n            Selects text to display from item.\n            When not set <c>ToString()</c> is used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextSelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<TItem>",
            "Documentation": "\n            <summary>\n            Template to display item.\n            When not set, <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.TextSelector\" /> is used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EmptyTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Template to display when items are empty.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EmptyTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SearchIcon",
            "TypeName": "Havit.Blazor.Components.Web.IconBase",
            "Documentation": "\n            <summary>\n            Icon displayed in input when no item is selected.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SearchIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ClearIcon",
            "TypeName": "Havit.Blazor.Components.Web.IconBase",
            "Documentation": "\n            <summary>\n            Icon displayed in input on selection clear button when item is selected.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ClearIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MinimumLength",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Minimal number of characters to start suggesting.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MinimumLength"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Delay",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Debounce delay in miliseconds.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Delay"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Short hint displayed in the input field before the user enters a value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputSize",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputSize?",
            "Documentation": "\n            <summary>\n            Size of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelType",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.LabelType?",
            "Documentation": "\n            <inheritdoc cref=\"T:Havit.Blazor.Components.Web.Bootstrap.LabelType\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemFromValueResolver",
            "TypeName": "System.Func<TValue, System.Threading.Tasks.Task<TItem>>",
            "Documentation": "\n            <summary>\n            Returns corresponding item for (select) Value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemFromValueResolver",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\t\t\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Hint",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Hint"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HintTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HintTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with wrapping div.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the label.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowValidationMessage",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>false</c>, validation message is not rendered. Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowValidationMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GenerateChip",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GenerateChip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChipTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChipTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\n            When value is <c>false</c>, input is rendered as disabled.\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": -498127165,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Component for single item selection with dynamic suggestions (based on typed characters).\n            </summary>\n            <remarks>\n            Defaults located in separate non-generic type <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest\" />.\n            </remarks>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TItem",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TItem",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.AutosuggestSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DataProvider",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.AutosuggestDataProviderDelegate<TItem>",
            "Documentation": "\n            <summary>\n            Method (delegate) which provides data of the suggestions.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DataProvider",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueSelector",
            "TypeName": "System.Func<TItem, TValue>",
            "Documentation": "\n            <summary>\n            Selects value from item.\n            Not required when <c>TValue</c> is same as  <c>TItem</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueSelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextSelector",
            "TypeName": "System.Func<TItem, System.String>",
            "Documentation": "\n            <summary>\n            Selects text to display from item.\n            When not set <c>ToString()</c> is used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextSelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<TItem>",
            "Documentation": "\n            <summary>\n            Template to display item.\n            When not set, <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.TextSelector\" /> is used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EmptyTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Template to display when items are empty.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EmptyTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SearchIcon",
            "TypeName": "Havit.Blazor.Components.Web.IconBase",
            "Documentation": "\n            <summary>\n            Icon displayed in input when no item is selected.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SearchIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ClearIcon",
            "TypeName": "Havit.Blazor.Components.Web.IconBase",
            "Documentation": "\n            <summary>\n            Icon displayed in input on selection clear button when item is selected.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ClearIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MinimumLength",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Minimal number of characters to start suggesting.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MinimumLength"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Delay",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Debounce delay in miliseconds.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Delay"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Short hint displayed in the input field before the user enters a value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputSize",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputSize?",
            "Documentation": "\n            <summary>\n            Size of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelType",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.LabelType?",
            "Documentation": "\n            <inheritdoc cref=\"T:Havit.Blazor.Components.Web.Bootstrap.LabelType\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemFromValueResolver",
            "TypeName": "System.Func<TValue, System.Threading.Tasks.Task<TItem>>",
            "Documentation": "\n            <summary>\n            Returns corresponding item for (select) Value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemFromValueResolver",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\t\t\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Hint",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Hint"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HintTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HintTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with wrapping div.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the label.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowValidationMessage",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>false</c>, validation message is not rendered. Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowValidationMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GenerateChip",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GenerateChip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChipTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChipTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\n            When value is <c>false</c>, input is rendered as disabled.\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 2020123871,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.ItemTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Template to display item.\n            When not set, <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.TextSelector\" /> is used.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemTemplate",
            "ParentTag": "HxAutosuggest"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ItemTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.ItemTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -118209841,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.ItemTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Template to display item.\n            When not set, <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.TextSelector\" /> is used.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ItemTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.ItemTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1852491935,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.EmptyTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Template to display when items are empty.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "EmptyTemplate",
            "ParentTag": "HxAutosuggest"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.EmptyTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1783728426,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.EmptyTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Template to display when items are empty.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "EmptyTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.EmptyTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 659595978,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.LabelTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "LabelTemplate",
            "ParentTag": "HxAutosuggest"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.LabelTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -128527495,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.LabelTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "LabelTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.LabelTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1951699786,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.HintTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HintTemplate",
            "ParentTag": "HxAutosuggest"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.HintTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1069839044,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.HintTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HintTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.HintTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1455734839,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.ChipTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChipTemplate",
            "ParentTag": "HxAutosuggest"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.ChipTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1511905490,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.ChipTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChipTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.ChipTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 144622976,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Renders a multi-selection list of <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputCheckbox\" /> controls.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxCheckboxList"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TItem",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem> component.",
            "Metadata": {
              "Common.PropertyName": "TItem",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Data",
            "TypeName": "System.Collections.Generic.IEnumerable<TItem>",
            "Documentation": "\n            <summary>\n            Items to display. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Data",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextSelector",
            "TypeName": "System.Func<TItem, System.String>",
            "Documentation": "\n            <summary>\n            Selects text to display from item.\n            When not set, ToString() is used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextSelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueSelector",
            "TypeName": "System.Func<TItem, TValue>",
            "Documentation": "\n            <summary>\n            Selects value from item.\n            Not required when TValue is same as TItem.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueSelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SortKeySelector",
            "TypeName": "System.Func<TItem, System.IComparable>",
            "Documentation": "\n            <summary>\n            Selects value for items sorting. When not set, <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList`2.TextSelector\" /> property will be used.\n            If you need complex sorting, pre-sort data manually or create a custom comparable property.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SortKeySelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AutoSort",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>true</c>, items are sorted before displaying in select.\n            Default value is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AutoSort"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Inline",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Allows grouping checkboxes on the same horizontal row by rendering them inline. Default is <c>false</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Inline"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\t\t\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Hint",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Hint"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HintTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HintTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with wrapping div.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the label.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowValidationMessage",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>false</c>, validation message is not rendered. Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowValidationMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GenerateChip",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GenerateChip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChipTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChipTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\n            When value is <c>false</c>, input is rendered as disabled.\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.Collections.Generic.List<TValue>",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.List<TValue>>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.Collections.Generic.List<TValue>>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": 1861785053,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Renders a multi-selection list of <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputCheckbox\" /> controls.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TItem",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem> component.",
            "Metadata": {
              "Common.PropertyName": "TItem",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Data",
            "TypeName": "System.Collections.Generic.IEnumerable<TItem>",
            "Documentation": "\n            <summary>\n            Items to display. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Data",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextSelector",
            "TypeName": "System.Func<TItem, System.String>",
            "Documentation": "\n            <summary>\n            Selects text to display from item.\n            When not set, ToString() is used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextSelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueSelector",
            "TypeName": "System.Func<TItem, TValue>",
            "Documentation": "\n            <summary>\n            Selects value from item.\n            Not required when TValue is same as TItem.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueSelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SortKeySelector",
            "TypeName": "System.Func<TItem, System.IComparable>",
            "Documentation": "\n            <summary>\n            Selects value for items sorting. When not set, <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList`2.TextSelector\" /> property will be used.\n            If you need complex sorting, pre-sort data manually or create a custom comparable property.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SortKeySelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AutoSort",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>true</c>, items are sorted before displaying in select.\n            Default value is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AutoSort"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Inline",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Allows grouping checkboxes on the same horizontal row by rendering them inline. Default is <c>false</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Inline"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\t\t\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Hint",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Hint"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HintTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HintTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with wrapping div.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the label.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowValidationMessage",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>false</c>, validation message is not rendered. Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowValidationMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GenerateChip",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GenerateChip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChipTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChipTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\n            When value is <c>false</c>, input is rendered as disabled.\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.Collections.Generic.List<TValue>",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.List<TValue>>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.Collections.Generic.List<TValue>>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1402020248,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem>.LabelTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "LabelTemplate",
            "ParentTag": "HxCheckboxList"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem>.LabelTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -542918886,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem>.LabelTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "LabelTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem>.LabelTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1767156922,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem>.HintTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HintTemplate",
            "ParentTag": "HxCheckboxList"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem>.HintTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1830372765,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem>.HintTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HintTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem>.HintTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -51719925,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem>.ChipTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChipTemplate",
            "ParentTag": "HxCheckboxList"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem>.ChipTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 216737141,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem>.ChipTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChipTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem>.ChipTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1290749159,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCustomSelect",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxCustomSelect"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCustomSelect"
        }
      },
      {
        "HashCode": 182462754,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCustomSelect",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxCustomSelect"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCustomSelect",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 722338475,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxFormValue",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Displays a read-only value in the form control visual (as <c>.form-control</c>, with label, border, etc.).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxFormValue"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.Forms.FormValueSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxFormValue.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent.CssClass\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent.Label\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent.LabelTemplate\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent.LabelCssClass\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Hint",
            "TypeName": "System.String",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent.Hint\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "Hint"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HintTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent.HintTemplate\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "HintTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Value to be presented.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Template to render value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputGroupStartText",
            "TypeName": "System.String",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponentWithInputGroups.InputGroupStartText\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "InputGroupStartText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputGroupStartTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponentWithInputGroups.InputGroupStartTemplate\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "InputGroupStartTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputGroupEndText",
            "TypeName": "System.String",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponentWithInputGroups.InputGroupEndText\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "InputGroupEndText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputGroupEndTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponentWithInputGroups.InputGroupEndTemplate\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "InputGroupEndTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputSize",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputSize?",
            "Documentation": "\n            <summary>\n            Size of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputSize"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxFormValue"
        }
      },
      {
        "HashCode": 1564087357,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxFormValue",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Displays a read-only value in the form control visual (as <c>.form-control</c>, with label, border, etc.).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxFormValue"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.Forms.FormValueSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxFormValue.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent.CssClass\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent.Label\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent.LabelTemplate\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent.LabelCssClass\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Hint",
            "TypeName": "System.String",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent.Hint\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "Hint"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HintTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent.HintTemplate\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "HintTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Value to be presented.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Template to render value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputGroupStartText",
            "TypeName": "System.String",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponentWithInputGroups.InputGroupStartText\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "InputGroupStartText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputGroupStartTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponentWithInputGroups.InputGroupStartTemplate\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "InputGroupStartTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputGroupEndText",
            "TypeName": "System.String",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponentWithInputGroups.InputGroupEndText\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "InputGroupEndText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputGroupEndTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponentWithInputGroups.InputGroupEndTemplate\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "InputGroupEndTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputSize",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputSize?",
            "Documentation": "\n            <summary>\n            Size of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputSize"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxFormValue",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1904420009,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxFormValue.LabelTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent.LabelTemplate\" />\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "LabelTemplate",
            "ParentTag": "HxFormValue"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxFormValue.LabelTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 2128863389,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxFormValue.LabelTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent.LabelTemplate\" />\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "LabelTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxFormValue"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxFormValue.LabelTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1829529837,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxFormValue.HintTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent.HintTemplate\" />\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HintTemplate",
            "ParentTag": "HxFormValue"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxFormValue.HintTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1463817091,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxFormValue.HintTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent.HintTemplate\" />\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HintTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxFormValue"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxFormValue.HintTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -404023359,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxFormValue.ValueTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Template to render value.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ValueTemplate",
            "ParentTag": "HxFormValue"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxFormValue.ValueTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1458984122,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxFormValue.ValueTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Template to render value.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ValueTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxFormValue"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxFormValue.ValueTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1182662880,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxFormValue.InputGroupStartTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponentWithInputGroups.InputGroupStartTemplate\" />\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputGroupStartTemplate",
            "ParentTag": "HxFormValue"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxFormValue.InputGroupStartTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1975031722,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxFormValue.InputGroupStartTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponentWithInputGroups.InputGroupStartTemplate\" />\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputGroupStartTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxFormValue"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxFormValue.InputGroupStartTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1501683571,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxFormValue.InputGroupEndTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponentWithInputGroups.InputGroupEndTemplate\" />\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputGroupEndTemplate",
            "ParentTag": "HxFormValue"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxFormValue.InputGroupEndTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1049526042,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxFormValue.InputGroupEndTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponentWithInputGroups.InputGroupEndTemplate\" />\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputGroupEndTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxFormValue"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxFormValue.InputGroupEndTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1903449088,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputCheckbox",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Checkbox input.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxInputCheckbox"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Inline",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Allows grouping checkboxes on the same horizontal row by rendering them inline. Default is <c>false</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Inline"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\t\t\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Hint",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Hint"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HintTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HintTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with wrapping div.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the label.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowValidationMessage",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>false</c>, validation message is not rendered. Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowValidationMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GenerateChip",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GenerateChip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChipTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChipTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\n            When value is <c>false</c>, input is rendered as disabled.\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.Boolean>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputCheckbox"
        }
      },
      {
        "HashCode": 1038432010,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputCheckbox",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Checkbox input.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxInputCheckbox"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Inline",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Allows grouping checkboxes on the same horizontal row by rendering them inline. Default is <c>false</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Inline"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\t\t\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Hint",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Hint"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HintTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HintTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with wrapping div.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the label.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowValidationMessage",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>false</c>, validation message is not rendered. Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowValidationMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GenerateChip",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GenerateChip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChipTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChipTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\n            When value is <c>false</c>, input is rendered as disabled.\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.Boolean>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputCheckbox",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -354796005,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputCheckbox.LabelTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "LabelTemplate",
            "ParentTag": "HxInputCheckbox"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputCheckbox.LabelTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 982859365,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputCheckbox.LabelTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "LabelTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxInputCheckbox"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputCheckbox.LabelTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 594595109,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputCheckbox.HintTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HintTemplate",
            "ParentTag": "HxInputCheckbox"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputCheckbox.HintTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -878860987,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputCheckbox.HintTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HintTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxInputCheckbox"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputCheckbox.HintTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1859444274,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputCheckbox.ChipTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChipTemplate",
            "ParentTag": "HxInputCheckbox"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputCheckbox.ChipTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1043874711,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputCheckbox.ChipTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChipTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxInputCheckbox"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputCheckbox.ChipTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 727378674,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Date picker. Form input component for entering a date.\n            </summary>\n            <remarks>\n            Defaults located in separate non-generic type <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputDate\" />.\n            </remarks>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxInputDate"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputDateSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowPredefinedDates",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            When enabled (default is <c>true</c>), shows predefined days (from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1.PredefinedDates\" />, e.g. Today).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowPredefinedDates"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PredefinedDates",
            "TypeName": "System.Collections.Generic.IEnumerable<Havit.Blazor.Components.Web.Bootstrap.InputDatePredefinedDatesItem>",
            "Documentation": "\n            <summary>\n            Predefined dates to be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PredefinedDates"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ParsingErrorMessage",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the error message used when displaying a parsing error.\n            Used with <c>String.Format(...)</c>, <c>{0}</c> is replaced by <c>Label</c> property, <c>{1}</c> name of bounded property.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ParsingErrorMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IInputWithPlaceholder.Placeholder\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputSize",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputSize?",
            "Documentation": "\n            <summary>\n            Size of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CalendarIcon",
            "TypeName": "Havit.Blazor.Components.Web.IconBase",
            "Documentation": "\n            <summary>\n            Optional icon to display within the input. Use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate.Defaults\" /> to set the icon for the whole project.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CalendarIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowCalendarButtons",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Indicates whether the <i>Clear</i> and <i>OK</i> buttons in calendar should be visible.<br />\n            Default is <c>true</c> (configurable in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate.Defaults\" />).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowCalendarButtons"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MinDate",
            "TypeName": "System.DateTime?",
            "Documentation": "\n            <summary>\n            First date selectable from the dropdown calendar.<br />\n            Default is <c>1.1.1900</c> (configurable from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate.Defaults\" />).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MinDate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxDate",
            "TypeName": "System.DateTime?",
            "Documentation": "\n            <summary>\n            Last date selectable from the dropdown calendar.<br />\n            Default is <c>31.12.2099</c> (configurable from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate.Defaults\" />).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxDate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CalendarDateCustomizationProvider",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.CalendarDateCustomizationProviderDelegate",
            "Documentation": "\n            <summary>\n            Allows customization of the dates in dropdown calendar.<br />\n            Default customization is configurable with <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate.Defaults\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CalendarDateCustomizationProvider",
              "Components.DelegateSignature": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelType",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.LabelType?",
            "Documentation": "\n            <inheritdoc cref=\"T:Havit.Blazor.Components.Web.Bootstrap.LabelType\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\t\t\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Hint",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Hint"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HintTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HintTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with wrapping div.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the label.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowValidationMessage",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>false</c>, validation message is not rendered. Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowValidationMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GenerateChip",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GenerateChip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChipTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChipTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\n            When value is <c>false</c>, input is rendered as disabled.\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": -337145224,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Date picker. Form input component for entering a date.\n            </summary>\n            <remarks>\n            Defaults located in separate non-generic type <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputDate\" />.\n            </remarks>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxInputDate"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputDateSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowPredefinedDates",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            When enabled (default is <c>true</c>), shows predefined days (from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1.PredefinedDates\" />, e.g. Today).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowPredefinedDates"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PredefinedDates",
            "TypeName": "System.Collections.Generic.IEnumerable<Havit.Blazor.Components.Web.Bootstrap.InputDatePredefinedDatesItem>",
            "Documentation": "\n            <summary>\n            Predefined dates to be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PredefinedDates"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ParsingErrorMessage",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the error message used when displaying a parsing error.\n            Used with <c>String.Format(...)</c>, <c>{0}</c> is replaced by <c>Label</c> property, <c>{1}</c> name of bounded property.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ParsingErrorMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IInputWithPlaceholder.Placeholder\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputSize",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputSize?",
            "Documentation": "\n            <summary>\n            Size of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CalendarIcon",
            "TypeName": "Havit.Blazor.Components.Web.IconBase",
            "Documentation": "\n            <summary>\n            Optional icon to display within the input. Use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate.Defaults\" /> to set the icon for the whole project.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CalendarIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowCalendarButtons",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Indicates whether the <i>Clear</i> and <i>OK</i> buttons in calendar should be visible.<br />\n            Default is <c>true</c> (configurable in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate.Defaults\" />).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowCalendarButtons"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MinDate",
            "TypeName": "System.DateTime?",
            "Documentation": "\n            <summary>\n            First date selectable from the dropdown calendar.<br />\n            Default is <c>1.1.1900</c> (configurable from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate.Defaults\" />).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MinDate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxDate",
            "TypeName": "System.DateTime?",
            "Documentation": "\n            <summary>\n            Last date selectable from the dropdown calendar.<br />\n            Default is <c>31.12.2099</c> (configurable from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate.Defaults\" />).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxDate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CalendarDateCustomizationProvider",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.CalendarDateCustomizationProviderDelegate",
            "Documentation": "\n            <summary>\n            Allows customization of the dates in dropdown calendar.<br />\n            Default customization is configurable with <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate.Defaults\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CalendarDateCustomizationProvider",
              "Components.DelegateSignature": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelType",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.LabelType?",
            "Documentation": "\n            <inheritdoc cref=\"T:Havit.Blazor.Components.Web.Bootstrap.LabelType\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\t\t\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Hint",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Hint"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HintTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HintTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with wrapping div.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the label.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowValidationMessage",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>false</c>, validation message is not rendered. Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowValidationMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GenerateChip",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GenerateChip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChipTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChipTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\n            When value is <c>false</c>, input is rendered as disabled.\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1149873935,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>.LabelTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "LabelTemplate",
            "ParentTag": "HxInputDate"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>.LabelTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 547492344,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>.LabelTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "LabelTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxInputDate"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>.LabelTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -466529459,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>.HintTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HintTemplate",
            "ParentTag": "HxInputDate"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>.HintTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1218575095,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>.HintTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HintTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxInputDate"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>.HintTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1149365524,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>.ChipTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChipTemplate",
            "ParentTag": "HxInputDate"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>.ChipTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 2063238870,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>.ChipTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChipTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxInputDate"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>.ChipTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1554292959,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Date range picker. Form input component for entering start date and end date.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxInputDateRange"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputDateRangeSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowPredefinedDateRanges",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            When enabled (default is <c>true</c>), shows predefined days (from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.PredefinedDateRanges\" />, e.g. Today).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowPredefinedDateRanges"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PredefinedDateRanges",
            "TypeName": "System.Collections.Generic.IEnumerable<Havit.Blazor.Components.Web.Bootstrap.InputDateRangePredefinedRangesItem>",
            "Documentation": "\n            <summary>\n            Predefined dates to be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PredefinedDateRanges"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputSize",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputSize?",
            "Documentation": "\n            <summary>\n            Size of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FromParsingErrorMessage",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the error message used when displaying an a \"from\" parsing error.\n            Used with <c>String.Format(...)</c>, <c>{0}</c> is replaced by Label property, <c>{1}</c> name of bounded property.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FromParsingErrorMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ToParsingErrorMessage",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the error message used when displaying an a \"to\" parsing error.\n            Used with <c>String.Format(...)</c>, <c>{0}</c> is replaced by Label property, <c>{1}</c> name of bounded property.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ToParsingErrorMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowCalendarButtons",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Indicates whether the <i>Clear</i> and <i>OK</i> buttons in calendars should be visible.<br />\n            Default is <c>true</c> (configurable in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.Defaults\" />).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowCalendarButtons"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MinDate",
            "TypeName": "System.DateTime?",
            "Documentation": "\n            <summary>\n            First date selectable from the dropdown calendar.<br />\n            Default is <c>1.1.1900</c> (configurable from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.Defaults\" />).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MinDate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxDate",
            "TypeName": "System.DateTime?",
            "Documentation": "\n            <summary>\n            Last date selectable from the dropdown calendar.<br />\n            Default is <c>31.12.2099</c> (configurable from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.Defaults\" />).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxDate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CalendarDateCustomizationProvider",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.CalendarDateCustomizationProviderDelegate",
            "Documentation": "\n            <summary>\n            Allows customization of the dates in dropdown calendars.<br />\n            Default customization is configurable with <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.Defaults\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CalendarDateCustomizationProvider",
              "Components.DelegateSignature": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\t\t\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Hint",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Hint"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HintTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HintTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with wrapping div.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the label.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowValidationMessage",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>false</c>, validation message is not rendered. Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowValidationMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GenerateChip",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GenerateChip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChipTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChipTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\n            When value is <c>false</c>, input is rendered as disabled.\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.DateTimeRange",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.Bootstrap.DateTimeRange>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<Havit.Blazor.Components.Web.Bootstrap.DateTimeRange>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange"
        }
      },
      {
        "HashCode": -1108065473,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Date range picker. Form input component for entering start date and end date.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputDateRangeSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowPredefinedDateRanges",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            When enabled (default is <c>true</c>), shows predefined days (from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.PredefinedDateRanges\" />, e.g. Today).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowPredefinedDateRanges"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PredefinedDateRanges",
            "TypeName": "System.Collections.Generic.IEnumerable<Havit.Blazor.Components.Web.Bootstrap.InputDateRangePredefinedRangesItem>",
            "Documentation": "\n            <summary>\n            Predefined dates to be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PredefinedDateRanges"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputSize",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputSize?",
            "Documentation": "\n            <summary>\n            Size of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FromParsingErrorMessage",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the error message used when displaying an a \"from\" parsing error.\n            Used with <c>String.Format(...)</c>, <c>{0}</c> is replaced by Label property, <c>{1}</c> name of bounded property.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FromParsingErrorMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ToParsingErrorMessage",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the error message used when displaying an a \"to\" parsing error.\n            Used with <c>String.Format(...)</c>, <c>{0}</c> is replaced by Label property, <c>{1}</c> name of bounded property.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ToParsingErrorMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowCalendarButtons",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Indicates whether the <i>Clear</i> and <i>OK</i> buttons in calendars should be visible.<br />\n            Default is <c>true</c> (configurable in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.Defaults\" />).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowCalendarButtons"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MinDate",
            "TypeName": "System.DateTime?",
            "Documentation": "\n            <summary>\n            First date selectable from the dropdown calendar.<br />\n            Default is <c>1.1.1900</c> (configurable from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.Defaults\" />).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MinDate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxDate",
            "TypeName": "System.DateTime?",
            "Documentation": "\n            <summary>\n            Last date selectable from the dropdown calendar.<br />\n            Default is <c>31.12.2099</c> (configurable from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.Defaults\" />).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxDate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CalendarDateCustomizationProvider",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.CalendarDateCustomizationProviderDelegate",
            "Documentation": "\n            <summary>\n            Allows customization of the dates in dropdown calendars.<br />\n            Default customization is configurable with <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.Defaults\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CalendarDateCustomizationProvider",
              "Components.DelegateSignature": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\t\t\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Hint",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Hint"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HintTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HintTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with wrapping div.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the label.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowValidationMessage",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>false</c>, validation message is not rendered. Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowValidationMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GenerateChip",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GenerateChip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChipTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChipTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\n            When value is <c>false</c>, input is rendered as disabled.\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.DateTimeRange",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.Bootstrap.DateTimeRange>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<Havit.Blazor.Components.Web.Bootstrap.DateTimeRange>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -747295407,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.LabelTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "LabelTemplate",
            "ParentTag": "HxInputDateRange"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.LabelTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1460023867,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.LabelTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "LabelTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.LabelTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -117799609,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.HintTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HintTemplate",
            "ParentTag": "HxInputDateRange"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.HintTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 750110513,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.HintTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HintTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.HintTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -835337793,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.ChipTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChipTemplate",
            "ParentTag": "HxInputDateRange"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.ChipTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1158607291,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.ChipTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChipTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.ChipTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 800794427,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Numeric input.\n            </summary>\n            <remarks>\n            Defaults located in separate non-generic type <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber\" />.\n            </remarks>\n            <typeparam name=\"TValue\">Supported values: <c>int (Int32), long (Int64), float (Single), double, decimal</c>.</typeparam>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxInputNumber"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputNumberSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ParsingErrorMessage",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the error message used when displaying an a parsing error.\n            Used with String.Format(...), {0} is replaced by Label property, {1} name of bounded property.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ParsingErrorMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputMode",
            "TypeName": "Havit.Blazor.Components.Web.InputMode?",
            "Documentation": "\n            <summary>\n            Hint to browsers as to the type of virtual keyboard configuration to use when editing.<br />\n            If not set (neither with <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.Settings\" /> nor <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber.Defaults\" />, i.e. <c>null</c>),\n            the <see cref=\"F:Havit.Blazor.Components.Web.InputMode.Numeric\" />\twill be used for <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.Decimals\" /> equal to <c>0</c>.\n            </summary>\n            <remarks>\n            We cannot set <see cref=\"F:Havit.Blazor.Components.Web.InputMode.Decimal\" /> for <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.Decimals\" /> greater that <c>0</c>\n            as the users with keyboard locale not matching the application locale won't be able to enter decimal point\n            (is <kbd>,</kbd> in some locales and <kbd>.</kbd> in others).<br />\n            Feel free to set the InputMode on your own as needed.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Placeholder for the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputSize",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputSize?",
            "Documentation": "\n            <summary>\n            Size of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelType",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.LabelType?",
            "Documentation": "\n            <inheritdoc cref=\"T:Havit.Blazor.Components.Web.Bootstrap.LabelType\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Decimals",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Gets or sets the number of decimal digits.\n            Can be used only for floating point types, for integer types throws exception.\n            When not set, 2 decimal digits are used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Decimals"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputGroupStartText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Input-group at the beginning of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputGroupStartText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputGroupStartTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Input-group at the beginning of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputGroupStartTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputGroupEndText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Input-group at the end of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputGroupEndText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputGroupEndTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Input-group at the end of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputGroupEndTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\t\t\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Hint",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Hint"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HintTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HintTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with wrapping div.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the label.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowValidationMessage",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>false</c>, validation message is not rendered. Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowValidationMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GenerateChip",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GenerateChip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChipTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChipTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\n            When value is <c>false</c>, input is rendered as disabled.\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": -1367062819,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Numeric input.\n            </summary>\n            <remarks>\n            Defaults located in separate non-generic type <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber\" />.\n            </remarks>\n            <typeparam name=\"TValue\">Supported values: <c>int (Int32), long (Int64), float (Single), double, decimal</c>.</typeparam>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxInputNumber"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputNumberSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ParsingErrorMessage",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the error message used when displaying an a parsing error.\n            Used with String.Format(...), {0} is replaced by Label property, {1} name of bounded property.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ParsingErrorMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputMode",
            "TypeName": "Havit.Blazor.Components.Web.InputMode?",
            "Documentation": "\n            <summary>\n            Hint to browsers as to the type of virtual keyboard configuration to use when editing.<br />\n            If not set (neither with <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.Settings\" /> nor <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber.Defaults\" />, i.e. <c>null</c>),\n            the <see cref=\"F:Havit.Blazor.Components.Web.InputMode.Numeric\" />\twill be used for <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.Decimals\" /> equal to <c>0</c>.\n            </summary>\n            <remarks>\n            We cannot set <see cref=\"F:Havit.Blazor.Components.Web.InputMode.Decimal\" /> for <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.Decimals\" /> greater that <c>0</c>\n            as the users with keyboard locale not matching the application locale won't be able to enter decimal point\n            (is <kbd>,</kbd> in some locales and <kbd>.</kbd> in others).<br />\n            Feel free to set the InputMode on your own as needed.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Placeholder for the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputSize",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputSize?",
            "Documentation": "\n            <summary>\n            Size of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelType",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.LabelType?",
            "Documentation": "\n            <inheritdoc cref=\"T:Havit.Blazor.Components.Web.Bootstrap.LabelType\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Decimals",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Gets or sets the number of decimal digits.\n            Can be used only for floating point types, for integer types throws exception.\n            When not set, 2 decimal digits are used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Decimals"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputGroupStartText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Input-group at the beginning of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputGroupStartText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputGroupStartTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Input-group at the beginning of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputGroupStartTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputGroupEndText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Input-group at the end of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputGroupEndText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputGroupEndTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Input-group at the end of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputGroupEndTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\t\t\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Hint",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Hint"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HintTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HintTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with wrapping div.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the label.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowValidationMessage",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>false</c>, validation message is not rendered. Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowValidationMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GenerateChip",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GenerateChip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChipTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChipTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\n            When value is <c>false</c>, input is rendered as disabled.\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -861858156,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>.InputGroupStartTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Input-group at the beginning of the input.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputGroupStartTemplate",
            "ParentTag": "HxInputNumber"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>.InputGroupStartTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 372750623,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>.InputGroupStartTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Input-group at the beginning of the input.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputGroupStartTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxInputNumber"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>.InputGroupStartTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 356258251,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>.InputGroupEndTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Input-group at the end of the input.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputGroupEndTemplate",
            "ParentTag": "HxInputNumber"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>.InputGroupEndTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1856960655,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>.InputGroupEndTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Input-group at the end of the input.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputGroupEndTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxInputNumber"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>.InputGroupEndTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1945661614,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>.LabelTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "LabelTemplate",
            "ParentTag": "HxInputNumber"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>.LabelTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -220719307,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>.LabelTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "LabelTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxInputNumber"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>.LabelTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 19457560,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>.HintTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HintTemplate",
            "ParentTag": "HxInputNumber"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>.HintTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1832808638,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>.HintTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HintTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxInputNumber"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>.HintTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1731487677,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>.ChipTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChipTemplate",
            "ParentTag": "HxInputNumber"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>.ChipTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1935458754,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>.ChipTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChipTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxInputNumber"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>.ChipTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1472872927,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Numeric input in percentages with value normalization (0% = 0, 100% = 1.0).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxInputPercent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputNumberSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ParsingErrorMessage",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the error message used when displaying an a parsing error.\n            Used with String.Format(...), {0} is replaced by Label property, {1} name of bounded property.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ParsingErrorMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputMode",
            "TypeName": "Havit.Blazor.Components.Web.InputMode?",
            "Documentation": "\n            <summary>\n            Hint to browsers as to the type of virtual keyboard configuration to use when editing.<br />\n            If not set (neither with <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.Settings\" /> nor <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber.Defaults\" />, i.e. <c>null</c>),\n            the <see cref=\"F:Havit.Blazor.Components.Web.InputMode.Numeric\" />\twill be used for <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.Decimals\" /> equal to <c>0</c>.\n            </summary>\n            <remarks>\n            We cannot set <see cref=\"F:Havit.Blazor.Components.Web.InputMode.Decimal\" /> for <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.Decimals\" /> greater that <c>0</c>\n            as the users with keyboard locale not matching the application locale won't be able to enter decimal point\n            (is <kbd>,</kbd> in some locales and <kbd>.</kbd> in others).<br />\n            Feel free to set the InputMode on your own as needed.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Placeholder for the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputSize",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputSize?",
            "Documentation": "\n            <summary>\n            Size of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelType",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.LabelType?",
            "Documentation": "\n            <inheritdoc cref=\"T:Havit.Blazor.Components.Web.Bootstrap.LabelType\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Decimals",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Gets or sets the number of decimal digits.\n            Can be used only for floating point types, for integer types throws exception.\n            When not set, 2 decimal digits are used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Decimals"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputGroupStartText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Input-group at the beginning of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputGroupStartText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputGroupStartTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Input-group at the beginning of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputGroupStartTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputGroupEndText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Input-group at the end of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputGroupEndText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputGroupEndTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Input-group at the end of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputGroupEndTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\t\t\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Hint",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Hint"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HintTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HintTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with wrapping div.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the label.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowValidationMessage",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>false</c>, validation message is not rendered. Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowValidationMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GenerateChip",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GenerateChip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChipTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChipTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\n            When value is <c>false</c>, input is rendered as disabled.\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": -1535117569,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Numeric input in percentages with value normalization (0% = 0, 100% = 1.0).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxInputPercent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputNumberSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ParsingErrorMessage",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the error message used when displaying an a parsing error.\n            Used with String.Format(...), {0} is replaced by Label property, {1} name of bounded property.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ParsingErrorMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputMode",
            "TypeName": "Havit.Blazor.Components.Web.InputMode?",
            "Documentation": "\n            <summary>\n            Hint to browsers as to the type of virtual keyboard configuration to use when editing.<br />\n            If not set (neither with <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.Settings\" /> nor <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber.Defaults\" />, i.e. <c>null</c>),\n            the <see cref=\"F:Havit.Blazor.Components.Web.InputMode.Numeric\" />\twill be used for <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.Decimals\" /> equal to <c>0</c>.\n            </summary>\n            <remarks>\n            We cannot set <see cref=\"F:Havit.Blazor.Components.Web.InputMode.Decimal\" /> for <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.Decimals\" /> greater that <c>0</c>\n            as the users with keyboard locale not matching the application locale won't be able to enter decimal point\n            (is <kbd>,</kbd> in some locales and <kbd>.</kbd> in others).<br />\n            Feel free to set the InputMode on your own as needed.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Placeholder for the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputSize",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputSize?",
            "Documentation": "\n            <summary>\n            Size of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelType",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.LabelType?",
            "Documentation": "\n            <inheritdoc cref=\"T:Havit.Blazor.Components.Web.Bootstrap.LabelType\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Decimals",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Gets or sets the number of decimal digits.\n            Can be used only for floating point types, for integer types throws exception.\n            When not set, 2 decimal digits are used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Decimals"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputGroupStartText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Input-group at the beginning of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputGroupStartText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputGroupStartTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Input-group at the beginning of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputGroupStartTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputGroupEndText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Input-group at the end of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputGroupEndText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputGroupEndTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Input-group at the end of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputGroupEndTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\t\t\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Hint",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Hint"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HintTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HintTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with wrapping div.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the label.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowValidationMessage",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>false</c>, validation message is not rendered. Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowValidationMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GenerateChip",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GenerateChip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChipTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChipTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\n            When value is <c>false</c>, input is rendered as disabled.\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -279096815,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>.InputGroupStartTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Input-group at the beginning of the input.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputGroupStartTemplate",
            "ParentTag": "HxInputPercent"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>.InputGroupStartTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1655496011,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>.InputGroupStartTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Input-group at the beginning of the input.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputGroupStartTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxInputPercent"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>.InputGroupStartTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1276313446,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>.InputGroupEndTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Input-group at the end of the input.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputGroupEndTemplate",
            "ParentTag": "HxInputPercent"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>.InputGroupEndTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1009052488,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>.InputGroupEndTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Input-group at the end of the input.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputGroupEndTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxInputPercent"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>.InputGroupEndTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -2119228851,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>.LabelTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "LabelTemplate",
            "ParentTag": "HxInputPercent"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>.LabelTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 306127134,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>.LabelTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "LabelTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxInputPercent"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>.LabelTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1965407284,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>.HintTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HintTemplate",
            "ParentTag": "HxInputPercent"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>.HintTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1096743093,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>.HintTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HintTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxInputPercent"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>.HintTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1124364347,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>.ChipTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChipTemplate",
            "ParentTag": "HxInputPercent"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>.ChipTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1518865634,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>.ChipTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChipTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxInputPercent"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>.ChipTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1615606893,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputSwitch",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Switch input.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxInputSwitch"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Inline",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Allows grouping checkboxes on the same horizontal row by rendering them inline. Default is <c>false</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Inline"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\t\t\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Hint",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Hint"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HintTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HintTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with wrapping div.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the label.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowValidationMessage",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>false</c>, validation message is not rendered. Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowValidationMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GenerateChip",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GenerateChip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChipTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChipTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\n            When value is <c>false</c>, input is rendered as disabled.\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.Boolean>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputSwitch"
        }
      },
      {
        "HashCode": -574634941,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputSwitch",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Switch input.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxInputSwitch"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Inline",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Allows grouping checkboxes on the same horizontal row by rendering them inline. Default is <c>false</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Inline"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\t\t\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Hint",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Hint"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HintTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HintTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with wrapping div.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the label.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowValidationMessage",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>false</c>, validation message is not rendered. Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowValidationMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GenerateChip",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GenerateChip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChipTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChipTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\n            When value is <c>false</c>, input is rendered as disabled.\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.Boolean>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputSwitch",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 950152270,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputSwitch.LabelTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "LabelTemplate",
            "ParentTag": "HxInputSwitch"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputSwitch.LabelTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1064015335,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputSwitch.LabelTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "LabelTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxInputSwitch"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputSwitch.LabelTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -98583560,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputSwitch.HintTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HintTemplate",
            "ParentTag": "HxInputSwitch"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputSwitch.HintTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -2108518986,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputSwitch.HintTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HintTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxInputSwitch"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputSwitch.HintTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1255164394,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputSwitch.ChipTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChipTemplate",
            "ParentTag": "HxInputSwitch"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputSwitch.ChipTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -218682559,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputSwitch.ChipTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChipTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxInputSwitch"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputSwitch.ChipTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -553963530,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputText",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Text input (also password, search, etc.)\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxInputText"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Type",
            "TypeName": "Havit.Blazor.Components.Web.InputType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Input type.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Type"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputTextSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputText.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputMode",
            "TypeName": "Havit.Blazor.Components.Web.InputMode?",
            "Documentation": "\n            <summary>\n            Hint to browsers as to the type of virtual keyboard configuration to use when editing.<br />\n            Default is <c>null</c> (not set).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BindEvent",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.BindEvent",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Gets or sets the behavior when the model is updated from then input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BindEvent"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Placeholder for the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputSize",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputSize?",
            "Documentation": "\n            <summary>\n            Size of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelType",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.LabelType?",
            "Documentation": "\n            <inheritdoc cref=\"T:Havit.Blazor.Components.Web.Bootstrap.LabelType\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputGroupStartText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Input-group at the beginning of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputGroupStartText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputGroupStartTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Input-group at the beginning of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputGroupStartTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputGroupEndText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Input-group at the end of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputGroupEndText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputGroupEndTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Input-group at the end of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputGroupEndTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\t\t\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Hint",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Hint"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HintTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HintTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with wrapping div.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the label.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowValidationMessage",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>false</c>, validation message is not rendered. Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowValidationMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GenerateChip",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GenerateChip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChipTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChipTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\n            When value is <c>false</c>, input is rendered as disabled.\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.String>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputText"
        }
      },
      {
        "HashCode": 2070160093,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputText",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Text input (also password, search, etc.)\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxInputText"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Type",
            "TypeName": "Havit.Blazor.Components.Web.InputType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Input type.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Type"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputTextSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputText.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputMode",
            "TypeName": "Havit.Blazor.Components.Web.InputMode?",
            "Documentation": "\n            <summary>\n            Hint to browsers as to the type of virtual keyboard configuration to use when editing.<br />\n            Default is <c>null</c> (not set).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BindEvent",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.BindEvent",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Gets or sets the behavior when the model is updated from then input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BindEvent"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Placeholder for the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputSize",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputSize?",
            "Documentation": "\n            <summary>\n            Size of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelType",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.LabelType?",
            "Documentation": "\n            <inheritdoc cref=\"T:Havit.Blazor.Components.Web.Bootstrap.LabelType\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputGroupStartText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Input-group at the beginning of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputGroupStartText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputGroupStartTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Input-group at the beginning of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputGroupStartTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputGroupEndText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Input-group at the end of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputGroupEndText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputGroupEndTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Input-group at the end of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputGroupEndTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\t\t\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Hint",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Hint"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HintTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HintTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with wrapping div.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the label.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowValidationMessage",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>false</c>, validation message is not rendered. Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowValidationMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GenerateChip",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GenerateChip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChipTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChipTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\n            When value is <c>false</c>, input is rendered as disabled.\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.String>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputText",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -701234408,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputText.InputGroupStartTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Input-group at the beginning of the input.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputGroupStartTemplate",
            "ParentTag": "HxInputText"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputText.InputGroupStartTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1691161953,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputText.InputGroupStartTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Input-group at the beginning of the input.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputGroupStartTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxInputText"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputText.InputGroupStartTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 415352580,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputText.InputGroupEndTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Input-group at the end of the input.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputGroupEndTemplate",
            "ParentTag": "HxInputText"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputText.InputGroupEndTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -560167251,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputText.InputGroupEndTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Input-group at the end of the input.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputGroupEndTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxInputText"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputText.InputGroupEndTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -710026830,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputText.LabelTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "LabelTemplate",
            "ParentTag": "HxInputText"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputText.LabelTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1525648958,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputText.LabelTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "LabelTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxInputText"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputText.LabelTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -102988567,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputText.HintTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HintTemplate",
            "ParentTag": "HxInputText"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputText.HintTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1950320762,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputText.HintTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HintTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxInputText"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputText.HintTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 355765431,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputText.ChipTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChipTemplate",
            "ParentTag": "HxInputText"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputText.ChipTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -612911560,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputText.ChipTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChipTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxInputText"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputText.ChipTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1439574552,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <a href=\"https://getbootstrap.com/docs/5.0/forms/floating-labels/#textareas\" target=\"_blank\">Textarea</a>.\n            To set a custom height, do not use the rows attribute. Instead, set an explicit height (either inline or via custom CSS).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxInputTextArea"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Type",
            "TypeName": "Havit.Blazor.Components.Web.InputType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Input type.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Type"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputTextSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputText.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputMode",
            "TypeName": "Havit.Blazor.Components.Web.InputMode?",
            "Documentation": "\n            <summary>\n            Hint to browsers as to the type of virtual keyboard configuration to use when editing.<br />\n            Default is <c>null</c> (not set).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BindEvent",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.BindEvent",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Gets or sets the behavior when the model is updated from then input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BindEvent"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Placeholder for the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputSize",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputSize?",
            "Documentation": "\n            <summary>\n            Size of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelType",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.LabelType?",
            "Documentation": "\n            <inheritdoc cref=\"T:Havit.Blazor.Components.Web.Bootstrap.LabelType\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputGroupStartText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Input-group at the beginning of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputGroupStartText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputGroupStartTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Input-group at the beginning of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputGroupStartTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputGroupEndText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Input-group at the end of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputGroupEndText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputGroupEndTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Input-group at the end of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputGroupEndTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\t\t\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Hint",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Hint"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HintTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HintTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with wrapping div.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the label.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowValidationMessage",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>false</c>, validation message is not rendered. Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowValidationMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GenerateChip",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GenerateChip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChipTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChipTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\n            When value is <c>false</c>, input is rendered as disabled.\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.String>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea"
        }
      },
      {
        "HashCode": -1437930828,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <a href=\"https://getbootstrap.com/docs/5.0/forms/floating-labels/#textareas\" target=\"_blank\">Textarea</a>.\n            To set a custom height, do not use the rows attribute. Instead, set an explicit height (either inline or via custom CSS).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Type",
            "TypeName": "Havit.Blazor.Components.Web.InputType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Input type.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Type"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputTextSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputText.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputMode",
            "TypeName": "Havit.Blazor.Components.Web.InputMode?",
            "Documentation": "\n            <summary>\n            Hint to browsers as to the type of virtual keyboard configuration to use when editing.<br />\n            Default is <c>null</c> (not set).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BindEvent",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.BindEvent",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Gets or sets the behavior when the model is updated from then input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BindEvent"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Placeholder for the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputSize",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputSize?",
            "Documentation": "\n            <summary>\n            Size of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelType",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.LabelType?",
            "Documentation": "\n            <inheritdoc cref=\"T:Havit.Blazor.Components.Web.Bootstrap.LabelType\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputGroupStartText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Input-group at the beginning of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputGroupStartText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputGroupStartTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Input-group at the beginning of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputGroupStartTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputGroupEndText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Input-group at the end of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputGroupEndText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputGroupEndTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Input-group at the end of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputGroupEndTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\t\t\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Hint",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Hint"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HintTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HintTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with wrapping div.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the label.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowValidationMessage",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>false</c>, validation message is not rendered. Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowValidationMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GenerateChip",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GenerateChip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChipTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChipTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\n            When value is <c>false</c>, input is rendered as disabled.\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.String>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -225275008,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea.InputGroupStartTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Input-group at the beginning of the input.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputGroupStartTemplate",
            "ParentTag": "HxInputTextArea"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea.InputGroupStartTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1026926858,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea.InputGroupStartTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Input-group at the beginning of the input.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputGroupStartTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea.InputGroupStartTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 109893488,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea.InputGroupEndTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Input-group at the end of the input.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputGroupEndTemplate",
            "ParentTag": "HxInputTextArea"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea.InputGroupEndTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 268789606,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea.InputGroupEndTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Input-group at the end of the input.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputGroupEndTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea.InputGroupEndTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1054326898,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea.LabelTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "LabelTemplate",
            "ParentTag": "HxInputTextArea"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea.LabelTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1967916840,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea.LabelTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "LabelTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea.LabelTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1928492965,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea.HintTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HintTemplate",
            "ParentTag": "HxInputTextArea"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea.HintTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1555449500,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea.HintTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HintTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea.HintTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1854994508,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea.ChipTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChipTemplate",
            "ParentTag": "HxInputTextArea"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea.ChipTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1948792798,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea.ChipTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChipTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea.ChipTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 169288075,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Select. Consider creating custom picker derived from <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonListBase`2\" />.\n            </summary>\n            <typeparam name=\"TValue\">Type of value.</typeparam>\n            <typeparam name=\"TItem\">Type of items.</typeparam>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxRadioButtonList"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TItem",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem> component.",
            "Metadata": {
              "Common.PropertyName": "TItem",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueSelector",
            "TypeName": "System.Func<TItem, TValue>",
            "Documentation": "\n            <summary>\n            Selects value from item.\n            Not required when TValueType is same as TItemTime.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueSelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Data",
            "TypeName": "System.Collections.Generic.IEnumerable<TItem>",
            "Documentation": "\n            <summary>\n            Items to display. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Data",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextSelector",
            "TypeName": "System.Func<TItem, System.String>",
            "Documentation": "\n            <summary>\n            Selects text to display from item. Also used for chip text.\n            When not set <c>ToString()</c> is used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextSelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<TItem>",
            "Documentation": "\n            <summary>\n            Gets html to display from item.\n            When not set <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList`2.TextSelector\" /> is used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SortKeySelector",
            "TypeName": "System.Func<TItem, System.IComparable>",
            "Documentation": "\n            <summary>\n            Selects value to sort items. Uses <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList`2.TextSelector\" /> property when not set.\n            When complex sorting required, sort data manually and don't let sort them by this component. Alternatively create a custom comparable property.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SortKeySelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AutoSort",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>true</c>, items are sorted before displaying in select.\n            Default value is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AutoSort"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Inline",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Allows grouping radios on the same horizontal row by rendering them inline. Default is <c>false</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Inline"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\t\t\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Hint",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Hint"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HintTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HintTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with wrapping div.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the label.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowValidationMessage",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>false</c>, validation message is not rendered. Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowValidationMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GenerateChip",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GenerateChip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChipTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChipTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\n            When value is <c>false</c>, input is rendered as disabled.\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": -1990648999,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Select. Consider creating custom picker derived from <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonListBase`2\" />.\n            </summary>\n            <typeparam name=\"TValue\">Type of value.</typeparam>\n            <typeparam name=\"TItem\">Type of items.</typeparam>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TItem",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem> component.",
            "Metadata": {
              "Common.PropertyName": "TItem",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueSelector",
            "TypeName": "System.Func<TItem, TValue>",
            "Documentation": "\n            <summary>\n            Selects value from item.\n            Not required when TValueType is same as TItemTime.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueSelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Data",
            "TypeName": "System.Collections.Generic.IEnumerable<TItem>",
            "Documentation": "\n            <summary>\n            Items to display. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Data",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextSelector",
            "TypeName": "System.Func<TItem, System.String>",
            "Documentation": "\n            <summary>\n            Selects text to display from item. Also used for chip text.\n            When not set <c>ToString()</c> is used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextSelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<TItem>",
            "Documentation": "\n            <summary>\n            Gets html to display from item.\n            When not set <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList`2.TextSelector\" /> is used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SortKeySelector",
            "TypeName": "System.Func<TItem, System.IComparable>",
            "Documentation": "\n            <summary>\n            Selects value to sort items. Uses <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList`2.TextSelector\" /> property when not set.\n            When complex sorting required, sort data manually and don't let sort them by this component. Alternatively create a custom comparable property.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SortKeySelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AutoSort",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>true</c>, items are sorted before displaying in select.\n            Default value is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AutoSort"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Inline",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Allows grouping radios on the same horizontal row by rendering them inline. Default is <c>false</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Inline"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\t\t\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Hint",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Hint"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HintTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HintTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with wrapping div.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the label.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowValidationMessage",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>false</c>, validation message is not rendered. Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowValidationMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GenerateChip",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GenerateChip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChipTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChipTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\n            When value is <c>false</c>, input is rendered as disabled.\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -72071296,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>.ItemTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Gets html to display from item.\n            When not set <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList`2.TextSelector\" /> is used.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemTemplate",
            "ParentTag": "HxRadioButtonList"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ItemTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>.ItemTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1577946699,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>.ItemTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Gets html to display from item.\n            When not set <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList`2.TextSelector\" /> is used.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ItemTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>.ItemTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1718935425,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>.LabelTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "LabelTemplate",
            "ParentTag": "HxRadioButtonList"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>.LabelTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 642932007,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>.LabelTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "LabelTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>.LabelTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1929182286,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>.HintTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HintTemplate",
            "ParentTag": "HxRadioButtonList"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>.HintTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1859089316,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>.HintTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HintTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>.HintTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -617017306,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>.ChipTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChipTemplate",
            "ParentTag": "HxRadioButtonList"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>.ChipTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1133261847,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>.ChipTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChipTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>.ChipTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1062299884,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Select - DropDownList - single-item picker. Consider creating custom picker derived from <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSelectBase`2\" />.\n            </summary>\n            <typeparam name=\"TValue\">Type of value.</typeparam>\n            <typeparam name=\"TItem\">Type of items.</typeparam>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxSelect"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TItem",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem> component.",
            "Metadata": {
              "Common.PropertyName": "TItem",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Nullable",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Indicates whether <c>null</c> is a valid value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Nullable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NullText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text to display for <c>null</c> value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NullText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NullDataText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text to display when <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSelect`2.Data\" /> is <c>null</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NullDataText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueSelector",
            "TypeName": "System.Func<TItem, TValue>",
            "Documentation": "\n            <summary>\n            Selects value from item.\n            Not required when <c>TValueType</c> is same as <c>TItemTime</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueSelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Data",
            "TypeName": "System.Collections.Generic.IEnumerable<TItem>",
            "Documentation": "\n            <summary>\n            Items to display. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Data",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextSelector",
            "TypeName": "System.Func<TItem, System.String>",
            "Documentation": "\n            <summary>\n            Selects text to display from item.\n            When not set <c>ToString()</c> is used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextSelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SortKeySelector",
            "TypeName": "System.Func<TItem, System.IComparable>",
            "Documentation": "\n            <summary>\n            Selects value to sort items. Uses <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSelect`2.TextSelector\" /> property when not set.\n            When complex sorting required, sort data manually and don't let sort them by this component. Alternatively create a custom comparable property.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SortKeySelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AutoSort",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>true</c>, items are sorted before displaying in select.\n            Default value is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AutoSort"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.SelectSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSelect.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputSize",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputSize?",
            "Documentation": "\n            <summary>\n            Size of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\t\t\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Hint",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Hint"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HintTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HintTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with wrapping div.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the label.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowValidationMessage",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>false</c>, validation message is not rendered. Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowValidationMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GenerateChip",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GenerateChip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChipTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChipTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\n            When value is <c>false</c>, input is rendered as disabled.\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": 2088753984,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Select - DropDownList - single-item picker. Consider creating custom picker derived from <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSelectBase`2\" />.\n            </summary>\n            <typeparam name=\"TValue\">Type of value.</typeparam>\n            <typeparam name=\"TItem\">Type of items.</typeparam>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxSelect"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TItem",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem> component.",
            "Metadata": {
              "Common.PropertyName": "TItem",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Nullable",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Indicates whether <c>null</c> is a valid value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Nullable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NullText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text to display for <c>null</c> value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NullText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NullDataText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text to display when <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSelect`2.Data\" /> is <c>null</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NullDataText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueSelector",
            "TypeName": "System.Func<TItem, TValue>",
            "Documentation": "\n            <summary>\n            Selects value from item.\n            Not required when <c>TValueType</c> is same as <c>TItemTime</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueSelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Data",
            "TypeName": "System.Collections.Generic.IEnumerable<TItem>",
            "Documentation": "\n            <summary>\n            Items to display. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Data",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextSelector",
            "TypeName": "System.Func<TItem, System.String>",
            "Documentation": "\n            <summary>\n            Selects text to display from item.\n            When not set <c>ToString()</c> is used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextSelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SortKeySelector",
            "TypeName": "System.Func<TItem, System.IComparable>",
            "Documentation": "\n            <summary>\n            Selects value to sort items. Uses <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSelect`2.TextSelector\" /> property when not set.\n            When complex sorting required, sort data manually and don't let sort them by this component. Alternatively create a custom comparable property.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SortKeySelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AutoSort",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>true</c>, items are sorted before displaying in select.\n            Default value is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AutoSort"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.SelectSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSelect.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputSize",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputSize?",
            "Documentation": "\n            <summary>\n            Size of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\t\t\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Hint",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Hint"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HintTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HintTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with wrapping div.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the label.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowValidationMessage",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>false</c>, validation message is not rendered. Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowValidationMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GenerateChip",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GenerateChip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChipTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChipTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\n            When value is <c>false</c>, input is rendered as disabled.\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -850533643,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>.LabelTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "LabelTemplate",
            "ParentTag": "HxSelect"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>.LabelTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 445991128,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>.LabelTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "LabelTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxSelect"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>.LabelTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 697602827,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>.HintTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HintTemplate",
            "ParentTag": "HxSelect"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>.HintTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -2046540354,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>.HintTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HintTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxSelect"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>.HintTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1535336395,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>.ChipTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChipTemplate",
            "ParentTag": "HxSelect"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>.ChipTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -957121195,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>.ChipTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChipTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxSelect"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>.ChipTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 2092996562,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage<TValue>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Displays a list of validation messages for a specified field within a cascaded <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage`1.EditContext\" />.<br />\n            Reimplementation of Blazor <see cref=\"T:Microsoft.AspNetCore.Components.Forms.ValidationMessage`1\" /> as <see href=\"https://getbootstrap.com/docs/5.1/forms/validation/\">Bootstrap 5 validation</see> (using <c>.invalid-tooltip</c>).<br />\n            Used by <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1\" /> and derived components.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxValidationMessage"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EditContext",
            "TypeName": "Microsoft.AspNetCore.Components.Forms.EditContext",
            "Documentation": "\n            <summary>\n            EditContext. For exceptional use where EditContext is not used as a CascadingParameter.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EditContext"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "\n            <summary>\n            Specifies the field for which validation messages should be displayed.\n            Mutual exclusive with <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage`1.ForFieldName\" /> and <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage`1.ForFieldNames\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ForFieldName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Specifies the field for which validation messages should be displayed.\n            Mutual exclusive with <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage`1.For\" /> and <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage`1.ForFieldNames\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ForFieldName"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ForFieldNames",
            "TypeName": "System.String[]",
            "Documentation": "\n            <summary>\n            Specifies the field for which validation messages should be displayed.\n            Mutual exclusive with <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage`1.For\" /> and <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage`1.ForFieldName\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ForFieldNames"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage<TValue>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": -1108067697,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage<TValue>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Displays a list of validation messages for a specified field within a cascaded <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage`1.EditContext\" />.<br />\n            Reimplementation of Blazor <see cref=\"T:Microsoft.AspNetCore.Components.Forms.ValidationMessage`1\" /> as <see href=\"https://getbootstrap.com/docs/5.1/forms/validation/\">Bootstrap 5 validation</see> (using <c>.invalid-tooltip</c>).<br />\n            Used by <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1\" /> and derived components.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EditContext",
            "TypeName": "Microsoft.AspNetCore.Components.Forms.EditContext",
            "Documentation": "\n            <summary>\n            EditContext. For exceptional use where EditContext is not used as a CascadingParameter.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EditContext"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "\n            <summary>\n            Specifies the field for which validation messages should be displayed.\n            Mutual exclusive with <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage`1.ForFieldName\" /> and <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage`1.ForFieldNames\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ForFieldName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Specifies the field for which validation messages should be displayed.\n            Mutual exclusive with <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage`1.For\" /> and <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage`1.ForFieldNames\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ForFieldName"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ForFieldNames",
            "TypeName": "System.String[]",
            "Documentation": "\n            <summary>\n            Specifies the field for which validation messages should be displayed.\n            Mutual exclusive with <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage`1.For\" /> and <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage`1.ForFieldName\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ForFieldNames"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage<TValue>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 2123753050,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.ContextMenuGridColumn<TItem>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Column displaying the context menu in the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxGrid\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ContextMenuGridColumn"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TItem",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.ContextMenuGridColumn<TItem> component.",
            "Metadata": {
              "Common.PropertyName": "TItem",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ContextMenu",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<TItem>",
            "Documentation": "\n            <summary>\n            Context menu template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ContextMenu",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.ContextMenuGridColumn<TItem>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": 1871059616,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.ContextMenuGridColumn<TItem>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Column displaying the context menu in the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxGrid\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.ContextMenuGridColumn"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TItem",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.ContextMenuGridColumn<TItem> component.",
            "Metadata": {
              "Common.PropertyName": "TItem",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ContextMenu",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<TItem>",
            "Documentation": "\n            <summary>\n            Context menu template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ContextMenu",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.ContextMenuGridColumn<TItem>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1769898249,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.ContextMenuGridColumn<TItem>.ContextMenu",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Context menu template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ContextMenu",
            "ParentTag": "ContextMenuGridColumn"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ContextMenu' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.ContextMenuGridColumn<TItem>.ContextMenu",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -544529952,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.ContextMenuGridColumn<TItem>.ContextMenu",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Context menu template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ContextMenu",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.ContextMenuGridColumn"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ContextMenu' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.ContextMenuGridColumn<TItem>.ContextMenu",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1015309248,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Grid to display tabular data from data source. Includes support for client-side and server-side paging &amp; sorting (or virtualized scrolling as needed).\n            </summary>\n            <typeparam name=\"TItem\">Type of row data item.</typeparam>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxGrid"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TItem",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem> component.",
            "Metadata": {
              "Common.PropertyName": "TItem",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.GridSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DataProvider",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.GridDataProviderDelegate<TItem>",
            "Documentation": "\n            <summary>\n            Data provider for items to render.<br />\n            The provider should always return instance of <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.GridDataProviderResult`1\" />, <c>null</c> is not allowed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DataProvider",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectionEnabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Indicates whether single data item selection is enabled. \n            Selection is performed by click on the item row.\n            Can be combined with multiselection.\n            Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectionEnabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MultiSelectionEnabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Indicates whether multi data items selection is enabled. \n            Selection is performed by checkboxes in the first column.\n            Can be combined with (single) selection.\n            Default is <c>false</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MultiSelectionEnabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Columns",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Columns template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Columns",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ContextMenu",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<TItem>",
            "Documentation": "\n            <summary>\n            Context menu template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ContextMenu",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LoadingDataTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Template to render when \"first\" data are loading.\n            This template is not used when loading data for sorting or paging operations.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LoadingDataTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EmptyDataTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Template to render when there is empty Data (but not <c>null</c>).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EmptyDataTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedDataItem",
            "TypeName": "TItem",
            "Documentation": "\n            <summary>\n            Selected data item.\n            Intended for data binding.\n            </summary>\t\t\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedDataItem",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedDataItemChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TItem>",
            "Documentation": "\n            <summary>\n            Event fires when selected data item changes.\n            Intended for data binding.\n            </summary>\t\t\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedDataItemChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedDataItems",
            "TypeName": "System.Collections.Generic.HashSet<TItem>",
            "Documentation": "\n            <summary>\n            Selected data items.\n            Intended for data binding.\n            </summary>\t\t\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedDataItems",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedDataItemsChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.HashSet<TItem>>",
            "Documentation": "\n            <summary>\n            Event fires when selected data items changes.\n            Intended for data binding.\n            </summary>\t\t\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedDataItemsChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ContentNavigationMode",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.GridContentNavigationMode?",
            "Documentation": "\n            <summary>\n            Strategy how data are displayed in the grid (and loaded to the grid).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ContentNavigationMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PageSize",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Page size for <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.GridContentNavigationMode.Pagination\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PageSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowFooterWhenEmptyData",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Indicates whether to render footer when data are empty.\n            Default is <c>false</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowFooterWhenEmptyData"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CurrentUserState",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.GridUserState<TItem>",
            "Documentation": "\n            <summary>\n            Current grid state (page, sorting).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CurrentUserState",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CurrentUserStateChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.Bootstrap.GridUserState<TItem>>",
            "Documentation": "\n            <summary>\n            Event fires when grid state is changed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CurrentUserStateChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InProgress",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Indicates when the grid should be displayed as \"in progress\".\n            When not set (<c>null</c>), grid progress is automatically tracked when retrieving data by data provider.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InProgress"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TableContainerCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with <c>div</c> element wrapping the main <c>table</c> (<see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxPager\" /> is not wrapped in this <c>div</c> element).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TableContainerCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TableCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with main <c>table</c> element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TableCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderRowCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with header <c>tr</c> element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderRowCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemRowCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with data <c>tr</c> element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemRowCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemRowHeight",
            "TypeName": "System.Single?",
            "Documentation": "\n            <summary>\n            Height of the item row used for infinite scroll calculations.\n            Default value is <c>41px</c> (row-height of regular table-row within Bootstrap 5 default theme).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemRowHeight"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemRowCssClassSelector",
            "TypeName": "System.Func<TItem, System.String>",
            "Documentation": "\n            <summary>\n            Returns custom CSS class to render with data <c>tr</c> element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemRowCssClassSelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterRowCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with footer <c>tr</c> element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FooterRowCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PagerCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to add to the pager.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PagerCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PlaceholdersRowCount",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Number of rows with placeholders to render.\n            When value is zero, placeholders are not used.\n            When <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.LoadingDataTemplate\" /> is set, placeholder are not used.\n            Default is <c>5</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PlaceholdersRowCount"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OverscanCount",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Infinite scroll:\n            Gets or sets a value that determines how many additional items will be rendered\n            before and after the visible region. This help to reduce the frequency of rendering\n            during scrolling. However, higher values mean that more elements will be present\n            in the page.<br />\n            Default is <c>50</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OverscanCount"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": 326475817,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Grid to display tabular data from data source. Includes support for client-side and server-side paging &amp; sorting (or virtualized scrolling as needed).\n            </summary>\n            <typeparam name=\"TItem\">Type of row data item.</typeparam>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxGrid"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TItem",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem> component.",
            "Metadata": {
              "Common.PropertyName": "TItem",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.GridSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DataProvider",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.GridDataProviderDelegate<TItem>",
            "Documentation": "\n            <summary>\n            Data provider for items to render.<br />\n            The provider should always return instance of <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.GridDataProviderResult`1\" />, <c>null</c> is not allowed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DataProvider",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectionEnabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Indicates whether single data item selection is enabled. \n            Selection is performed by click on the item row.\n            Can be combined with multiselection.\n            Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectionEnabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MultiSelectionEnabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Indicates whether multi data items selection is enabled. \n            Selection is performed by checkboxes in the first column.\n            Can be combined with (single) selection.\n            Default is <c>false</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MultiSelectionEnabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Columns",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Columns template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Columns",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ContextMenu",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<TItem>",
            "Documentation": "\n            <summary>\n            Context menu template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ContextMenu",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LoadingDataTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Template to render when \"first\" data are loading.\n            This template is not used when loading data for sorting or paging operations.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LoadingDataTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EmptyDataTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Template to render when there is empty Data (but not <c>null</c>).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EmptyDataTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedDataItem",
            "TypeName": "TItem",
            "Documentation": "\n            <summary>\n            Selected data item.\n            Intended for data binding.\n            </summary>\t\t\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedDataItem",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedDataItemChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TItem>",
            "Documentation": "\n            <summary>\n            Event fires when selected data item changes.\n            Intended for data binding.\n            </summary>\t\t\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedDataItemChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedDataItems",
            "TypeName": "System.Collections.Generic.HashSet<TItem>",
            "Documentation": "\n            <summary>\n            Selected data items.\n            Intended for data binding.\n            </summary>\t\t\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedDataItems",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedDataItemsChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.HashSet<TItem>>",
            "Documentation": "\n            <summary>\n            Event fires when selected data items changes.\n            Intended for data binding.\n            </summary>\t\t\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedDataItemsChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ContentNavigationMode",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.GridContentNavigationMode?",
            "Documentation": "\n            <summary>\n            Strategy how data are displayed in the grid (and loaded to the grid).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ContentNavigationMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PageSize",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Page size for <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.GridContentNavigationMode.Pagination\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PageSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowFooterWhenEmptyData",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Indicates whether to render footer when data are empty.\n            Default is <c>false</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowFooterWhenEmptyData"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CurrentUserState",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.GridUserState<TItem>",
            "Documentation": "\n            <summary>\n            Current grid state (page, sorting).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CurrentUserState",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CurrentUserStateChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.Bootstrap.GridUserState<TItem>>",
            "Documentation": "\n            <summary>\n            Event fires when grid state is changed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CurrentUserStateChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InProgress",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Indicates when the grid should be displayed as \"in progress\".\n            When not set (<c>null</c>), grid progress is automatically tracked when retrieving data by data provider.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InProgress"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TableContainerCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with <c>div</c> element wrapping the main <c>table</c> (<see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxPager\" /> is not wrapped in this <c>div</c> element).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TableContainerCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TableCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with main <c>table</c> element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TableCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderRowCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with header <c>tr</c> element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderRowCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemRowCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with data <c>tr</c> element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemRowCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemRowHeight",
            "TypeName": "System.Single?",
            "Documentation": "\n            <summary>\n            Height of the item row used for infinite scroll calculations.\n            Default value is <c>41px</c> (row-height of regular table-row within Bootstrap 5 default theme).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemRowHeight"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemRowCssClassSelector",
            "TypeName": "System.Func<TItem, System.String>",
            "Documentation": "\n            <summary>\n            Returns custom CSS class to render with data <c>tr</c> element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemRowCssClassSelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterRowCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with footer <c>tr</c> element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FooterRowCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PagerCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to add to the pager.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PagerCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PlaceholdersRowCount",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Number of rows with placeholders to render.\n            When value is zero, placeholders are not used.\n            When <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.LoadingDataTemplate\" /> is set, placeholder are not used.\n            Default is <c>5</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PlaceholdersRowCount"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OverscanCount",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Infinite scroll:\n            Gets or sets a value that determines how many additional items will be rendered\n            before and after the visible region. This help to reduce the frequency of rendering\n            during scrolling. However, higher values mean that more elements will be present\n            in the page.<br />\n            Default is <c>50</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OverscanCount"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -577213449,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>.Columns",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Columns template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Columns",
            "ParentTag": "HxGrid"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>.Columns",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1307601560,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>.Columns",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Columns template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Columns",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxGrid"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>.Columns",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -287138415,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>.ContextMenu",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Context menu template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ContextMenu",
            "ParentTag": "HxGrid"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ContextMenu' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>.ContextMenu",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1262230025,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>.ContextMenu",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Context menu template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ContextMenu",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxGrid"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ContextMenu' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>.ContextMenu",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 56650149,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>.LoadingDataTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Template to render when \"first\" data are loading.\n            This template is not used when loading data for sorting or paging operations.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "LoadingDataTemplate",
            "ParentTag": "HxGrid"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>.LoadingDataTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1004161484,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>.LoadingDataTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Template to render when \"first\" data are loading.\n            This template is not used when loading data for sorting or paging operations.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "LoadingDataTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxGrid"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>.LoadingDataTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -312998573,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>.EmptyDataTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Template to render when there is empty Data (but not <c>null</c>).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "EmptyDataTemplate",
            "ParentTag": "HxGrid"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>.EmptyDataTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1948070954,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>.EmptyDataTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Template to render when there is empty Data (but not <c>null</c>).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "EmptyDataTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxGrid"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>.EmptyDataTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 2076352441,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxGridColumn<TItem>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Grid column.\n            </summary>\n            <typeparam name=\"TItem\">Grid row data type.</typeparam>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxGridColumn"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TItem",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.HxGridColumn<TItem> component.",
            "Metadata": {
              "Common.PropertyName": "TItem",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Visible",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Indicates whether the column is visible (otherwise the column is hidden).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Visible"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Header cell text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Havit.Blazor.Components.Web.Bootstrap.GridHeaderCellContext>",
            "Documentation": "\n            <summary>\n            Header cell template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Header cell css class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemTextSelector",
            "TypeName": "System.Func<TItem, System.String>",
            "Documentation": "\n            <summary>\n            Returns text for the item.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemTextSelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<TItem>",
            "Documentation": "\n            <summary>\n            Returns template for the item.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Returns item css class (not dependent on data).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemCssClassSelector",
            "TypeName": "System.Func<TItem, System.String>",
            "Documentation": "\n            <summary>\n            Returns item css class for the specific date item.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemCssClassSelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PlaceholderTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Havit.Blazor.Components.Web.Bootstrap.GridPlaceholderCellContext>",
            "Documentation": "\n            <summary>\n            Placeholder cell template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PlaceholderTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Footer cell text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FooterText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Havit.Blazor.Components.Web.Bootstrap.GridFooterCellContext>",
            "Documentation": "\n            <summary>\n            Footer cell template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FooterTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Footer cell css class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FooterCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SortString",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Returns column sorting as string.\n            Use to set sorting as a string, ie. to get value to pass to backend.\n            Ignored for client-side sorting.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SortString"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SortKeySelector",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TItem, System.IComparable>>",
            "Documentation": "\n            <summary>\n            Returns column sorting expression for automatic grid sorting.\n            To be used for \"strongly typed\" setting of sorting, required for client-side sorting.\n            Must be <see cref=\"T:System.IComparable\" />.\n            Sorting of the column does not support multiple expressions. Create an artifcial property and implement <see cref=\"T:System.IComparable\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SortKeySelector",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SortDirection",
            "TypeName": "Havit.Collections.SortDirection",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Initial sorting direction. Default is <see cref=\"F:Havit.Collections.SortDirection.Ascending\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SortDirection"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsDefaultSortColumn",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Indicates the sorting on the column is default (primary) on the grid.\n            Set <c>true</c> for the column which is to be used for default sorting.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsDefaultSortColumn"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxGridColumn<TItem>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": 1191681957,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxGridColumn<TItem>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Grid column.\n            </summary>\n            <typeparam name=\"TItem\">Grid row data type.</typeparam>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxGridColumn"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TItem",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.HxGridColumn<TItem> component.",
            "Metadata": {
              "Common.PropertyName": "TItem",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Visible",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Indicates whether the column is visible (otherwise the column is hidden).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Visible"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Header cell text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Havit.Blazor.Components.Web.Bootstrap.GridHeaderCellContext>",
            "Documentation": "\n            <summary>\n            Header cell template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Header cell css class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemTextSelector",
            "TypeName": "System.Func<TItem, System.String>",
            "Documentation": "\n            <summary>\n            Returns text for the item.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemTextSelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<TItem>",
            "Documentation": "\n            <summary>\n            Returns template for the item.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Returns item css class (not dependent on data).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemCssClassSelector",
            "TypeName": "System.Func<TItem, System.String>",
            "Documentation": "\n            <summary>\n            Returns item css class for the specific date item.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemCssClassSelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PlaceholderTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Havit.Blazor.Components.Web.Bootstrap.GridPlaceholderCellContext>",
            "Documentation": "\n            <summary>\n            Placeholder cell template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PlaceholderTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Footer cell text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FooterText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Havit.Blazor.Components.Web.Bootstrap.GridFooterCellContext>",
            "Documentation": "\n            <summary>\n            Footer cell template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FooterTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Footer cell css class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FooterCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SortString",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Returns column sorting as string.\n            Use to set sorting as a string, ie. to get value to pass to backend.\n            Ignored for client-side sorting.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SortString"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SortKeySelector",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TItem, System.IComparable>>",
            "Documentation": "\n            <summary>\n            Returns column sorting expression for automatic grid sorting.\n            To be used for \"strongly typed\" setting of sorting, required for client-side sorting.\n            Must be <see cref=\"T:System.IComparable\" />.\n            Sorting of the column does not support multiple expressions. Create an artifcial property and implement <see cref=\"T:System.IComparable\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SortKeySelector",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SortDirection",
            "TypeName": "Havit.Collections.SortDirection",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Initial sorting direction. Default is <see cref=\"F:Havit.Collections.SortDirection.Ascending\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SortDirection"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsDefaultSortColumn",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Indicates the sorting on the column is default (primary) on the grid.\n            Set <c>true</c> for the column which is to be used for default sorting.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsDefaultSortColumn"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxGridColumn<TItem>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1349796592,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxGridColumn<TItem>.HeaderTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Header cell template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HeaderTemplate",
            "ParentTag": "HxGridColumn"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'HeaderTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxGridColumn<TItem>.HeaderTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1434321412,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxGridColumn<TItem>.HeaderTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Header cell template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HeaderTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxGridColumn"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'HeaderTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxGridColumn<TItem>.HeaderTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 691287598,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxGridColumn<TItem>.ItemTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Returns template for the item.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemTemplate",
            "ParentTag": "HxGridColumn"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ItemTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxGridColumn<TItem>.ItemTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -489184546,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxGridColumn<TItem>.ItemTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Returns template for the item.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxGridColumn"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ItemTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxGridColumn<TItem>.ItemTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -505812066,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxGridColumn<TItem>.PlaceholderTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Placeholder cell template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "PlaceholderTemplate",
            "ParentTag": "HxGridColumn"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'PlaceholderTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxGridColumn<TItem>.PlaceholderTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -152799504,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxGridColumn<TItem>.PlaceholderTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Placeholder cell template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "PlaceholderTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxGridColumn"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'PlaceholderTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxGridColumn<TItem>.PlaceholderTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -278460315,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxGridColumn<TItem>.FooterTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Footer cell template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "FooterTemplate",
            "ParentTag": "HxGridColumn"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'FooterTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxGridColumn<TItem>.FooterTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1387989243,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxGridColumn<TItem>.FooterTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Footer cell template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "FooterTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxGridColumn"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'FooterTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxGridColumn<TItem>.FooterTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 479584592,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxPager",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Pager.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxPager"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TotalPages",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Total pages of data items.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TotalPages"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CurrentPageIndex",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Current page index. Zero based.\n            Displayed numbers start with 1 which is page index 0.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CurrentPageIndex"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CurrentPageIndexChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "\n            <summary>\n            Event raised where page index is changed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CurrentPageIndexChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayNumberCount",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Count of numbers to display. Default value is 10.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayNumberCount"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Any additional CSS class to apply.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxPager"
        }
      },
      {
        "HashCode": 1990616450,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxPager",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Pager.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxPager"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TotalPages",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Total pages of data items.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TotalPages"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CurrentPageIndex",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Current page index. Zero based.\n            Displayed numbers start with 1 which is page index 0.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CurrentPageIndex"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CurrentPageIndexChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "\n            <summary>\n            Event raised where page index is changed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CurrentPageIndexChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayNumberCount",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Count of numbers to display. Default value is 10.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayNumberCount"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Any additional CSS class to apply.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxPager",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 28316634,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.MultiSelectGridColumn<TItem>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MultiSelectGridColumn"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TItem",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.MultiSelectGridColumn<TItem> component.",
            "Metadata": {
              "Common.PropertyName": "TItem",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedDataItems",
            "TypeName": "System.Collections.Generic.HashSet<TItem>",
            "Metadata": {
              "Common.PropertyName": "SelectedDataItems",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AllDataItemsSelected",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "AllDataItemsSelected"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnSelectAllClicked",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Metadata": {
              "Common.PropertyName": "OnSelectAllClicked",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnSelectNoneClicked",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Metadata": {
              "Common.PropertyName": "OnSelectNoneClicked",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnSelectDataItemClicked",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TItem>",
            "Metadata": {
              "Common.PropertyName": "OnSelectDataItemClicked",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnUnselectDataItemClicked",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TItem>",
            "Metadata": {
              "Common.PropertyName": "OnUnselectDataItemClicked",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.MultiSelectGridColumn<TItem>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": -747944263,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.MultiSelectGridColumn<TItem>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.MultiSelectGridColumn"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TItem",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.MultiSelectGridColumn<TItem> component.",
            "Metadata": {
              "Common.PropertyName": "TItem",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedDataItems",
            "TypeName": "System.Collections.Generic.HashSet<TItem>",
            "Metadata": {
              "Common.PropertyName": "SelectedDataItems",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AllDataItemsSelected",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "AllDataItemsSelected"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnSelectAllClicked",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Metadata": {
              "Common.PropertyName": "OnSelectAllClicked",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnSelectNoneClicked",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Metadata": {
              "Common.PropertyName": "OnSelectNoneClicked",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnSelectDataItemClicked",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TItem>",
            "Metadata": {
              "Common.PropertyName": "OnSelectDataItemClicked",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnUnselectDataItemClicked",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TItem>",
            "Metadata": {
              "Common.PropertyName": "OnUnselectDataItemClicked",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.MultiSelectGridColumn<TItem>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 521069082,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Data presentation component composed of <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxGrid\" /> for data, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas\" /> for manual filtering and <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxNamedViewList`1\" /> for pre-defined filters.\n            </summary>\n            <typeparam name=\"TFilterModel\"></typeparam>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxListLayout"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TFilterModel",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TFilterModel for the Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel> component.",
            "Metadata": {
              "Common.PropertyName": "TFilterModel",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Title",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Title"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TitleTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "TitleTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NamedViewsTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "NamedViewsTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SearchTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "SearchTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FilterTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<TFilterModel>",
            "Metadata": {
              "Common.PropertyName": "FilterTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FilterModel",
            "TypeName": "TFilterModel",
            "Metadata": {
              "Common.PropertyName": "FilterModel",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FilterModelChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TFilterModel>",
            "Metadata": {
              "Common.PropertyName": "FilterModelChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DataTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "DataTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DetailTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "DetailTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CommandsTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "CommandsTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CardSettings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.CardSettings",
            "Documentation": "\n            <summary>\n            Settings for the wrapping <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCard\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CardSettings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FilterOpenButtonSettings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonSettings",
            "Documentation": "\n            <summary>\n            Settings for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxButton\" /> opening filtering offcanvas.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FilterOpenButtonSettings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FilterSubmitButtonSettings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonSettings",
            "Documentation": "\n            <summary>\n            Settings for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxButton\" /> submitting the filter.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FilterSubmitButtonSettings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FilterOffcanvasSettings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.OffcanvasSettings",
            "Documentation": "\n            <summary>\n            Settings for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas\" /> with the filter.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FilterOffcanvasSettings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": 1460035907,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Data presentation component composed of <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxGrid\" /> for data, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas\" /> for manual filtering and <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxNamedViewList`1\" /> for pre-defined filters.\n            </summary>\n            <typeparam name=\"TFilterModel\"></typeparam>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TFilterModel",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TFilterModel for the Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel> component.",
            "Metadata": {
              "Common.PropertyName": "TFilterModel",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Title",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Title"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TitleTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "TitleTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NamedViewsTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "NamedViewsTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SearchTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "SearchTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FilterTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<TFilterModel>",
            "Metadata": {
              "Common.PropertyName": "FilterTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FilterModel",
            "TypeName": "TFilterModel",
            "Metadata": {
              "Common.PropertyName": "FilterModel",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FilterModelChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TFilterModel>",
            "Metadata": {
              "Common.PropertyName": "FilterModelChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DataTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "DataTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DetailTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "DetailTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CommandsTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "CommandsTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CardSettings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.CardSettings",
            "Documentation": "\n            <summary>\n            Settings for the wrapping <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCard\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CardSettings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FilterOpenButtonSettings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonSettings",
            "Documentation": "\n            <summary>\n            Settings for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxButton\" /> opening filtering offcanvas.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FilterOpenButtonSettings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FilterSubmitButtonSettings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonSettings",
            "Documentation": "\n            <summary>\n            Settings for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxButton\" /> submitting the filter.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FilterSubmitButtonSettings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FilterOffcanvasSettings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.OffcanvasSettings",
            "Documentation": "\n            <summary>\n            Settings for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas\" /> with the filter.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FilterOffcanvasSettings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1821306033,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.TitleTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "TitleTemplate",
            "ParentTag": "HxListLayout"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.TitleTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1063628536,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.TitleTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "TitleTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.TitleTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 2047263746,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.NamedViewsTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NamedViewsTemplate",
            "ParentTag": "HxListLayout"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.NamedViewsTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -432615792,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.NamedViewsTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NamedViewsTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.NamedViewsTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1738758032,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.SearchTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "SearchTemplate",
            "ParentTag": "HxListLayout"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.SearchTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1708069556,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.SearchTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "SearchTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.SearchTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 196118194,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.FilterTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "FilterTemplate",
            "ParentTag": "HxListLayout"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'FilterTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.FilterTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1474778914,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.FilterTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "FilterTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'FilterTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.FilterTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -216307817,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.DataTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "DataTemplate",
            "ParentTag": "HxListLayout"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.DataTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1962762199,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.DataTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "DataTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.DataTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1489654101,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.DetailTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "DetailTemplate",
            "ParentTag": "HxListLayout"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.DetailTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1597973684,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.DetailTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "DetailTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.DetailTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 356630836,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.CommandsTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "CommandsTemplate",
            "ParentTag": "HxListLayout"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.CommandsTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -2101957536,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.CommandsTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "CommandsTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.CommandsTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -549248988,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxListGroup",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <see href=\"https://getbootstrap.com/docs/5.1/components/list-group/\">Bootstrap 5 List group</see> component.<br />\n            List groups are a flexible and powerful component for displaying a series of content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxListGroup"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Content of the list group component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Flush",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If set to <c>true</c>, removes borders and rounded corners to render list group items edge-to-edge.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Flush"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Numbered",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set to <c>true</c> to opt into numbered list group items. The list group changes from an unordered list to an ordered list.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Numbered"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Horizontal",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ListGroupHorizontal",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Changes the layout of the list group items from vertical to horizontal. Cannot be combined with <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroup.Flush\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Horizontal"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Additional attributes to be splatted onto an underlying <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxListGroup\" /> component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxListGroup"
        }
      },
      {
        "HashCode": 359221310,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxListGroup",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <see href=\"https://getbootstrap.com/docs/5.1/components/list-group/\">Bootstrap 5 List group</see> component.<br />\n            List groups are a flexible and powerful component for displaying a series of content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxListGroup"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Content of the list group component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Flush",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If set to <c>true</c>, removes borders and rounded corners to render list group items edge-to-edge.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Flush"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Numbered",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set to <c>true</c> to opt into numbered list group items. The list group changes from an unordered list to an ordered list.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Numbered"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Horizontal",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ListGroupHorizontal",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Changes the layout of the list group items from vertical to horizontal. Cannot be combined with <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroup.Flush\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Horizontal"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Additional attributes to be splatted onto an underlying <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxListGroup\" /> component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxListGroup",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 830677981,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxListGroup.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Content of the list group component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxListGroup"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxListGroup.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1563784067,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxListGroup.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Content of the list group component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxListGroup"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxListGroup.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1477742438,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxListGroupItem",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Item for <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxListGroup\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxListGroupItem"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Content of the item.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Active",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Indicates the current active selection.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Active"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Make the item appear disabled by setting to <c>false</c>.\n            Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ThemeColor?",
            "Documentation": "\n            <summary>\n            Color.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            An event that is fired when the <c>HxListGroupItem</c> is clicked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxListGroupItem"
        }
      },
      {
        "HashCode": -1717858147,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxListGroupItem",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Item for <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxListGroup\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxListGroupItem"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Content of the item.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Active",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Indicates the current active selection.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Active"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Make the item appear disabled by setting to <c>false</c>.\n            Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ThemeColor?",
            "Documentation": "\n            <summary>\n            Color.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            An event that is fired when the <c>HxListGroupItem</c> is clicked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxListGroupItem",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1288019742,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxListGroupItem.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Content of the item.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxListGroupItem"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxListGroupItem.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1446562825,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxListGroupItem.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Content of the item.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxListGroupItem"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxListGroupItem.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 501593022,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxListGroupItemNavLink",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <see href=\"https://getbootstrap.com/docs/5.1/components/list-group/#links-and-buttons\">Bootstrap 5 List group link item</see> component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxListGroupItemNavLink"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Href",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Navigation target.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Href"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text of the item.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Match",
            "TypeName": "Microsoft.AspNetCore.Components.Routing.NavLinkMatch?",
            "Documentation": "\n            <summary>\n            URL matching behavior for the underlying <see cref=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\" />.\n            Default is <see cref=\"F:Microsoft.AspNetCore.Components.Routing.NavLinkMatch.Prefix\" />.\n            You can set the value to <c>null</c> to disable the matching.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Match"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised when the item is clicked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Active",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Indicates the current active selection.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Active"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Additional attributes to be splatted onto an underlying <see cref=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\" /> component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxListGroupItemNavLink"
        }
      },
      {
        "HashCode": -997141765,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxListGroupItemNavLink",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <see href=\"https://getbootstrap.com/docs/5.1/components/list-group/#links-and-buttons\">Bootstrap 5 List group link item</see> component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxListGroupItemNavLink"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Href",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Navigation target.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Href"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text of the item.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Match",
            "TypeName": "Microsoft.AspNetCore.Components.Routing.NavLinkMatch?",
            "Documentation": "\n            <summary>\n            URL matching behavior for the underlying <see cref=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\" />.\n            Default is <see cref=\"F:Microsoft.AspNetCore.Components.Routing.NavLinkMatch.Prefix\" />.\n            You can set the value to <c>null</c> to disable the matching.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Match"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised when the item is clicked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Active",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Indicates the current active selection.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Active"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Additional attributes to be splatted onto an underlying <see cref=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\" /> component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxListGroupItemNavLink",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -635731230,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxListGroupItemNavLink.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxListGroupItemNavLink"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxListGroupItemNavLink.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -265980974,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxListGroupItemNavLink.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxListGroupItemNavLink"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxListGroupItemNavLink.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 315905384,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxMessageBox",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Component to display message-boxes.<br />\n            Usually used via <see cref=\"T:Havit.Blazor.Components.Web.HxMessageBoxService\" /> and <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxMessageBoxHost\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxMessageBox"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Title",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Title text (Header).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Title"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Header template (Header).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Content (body) text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BodyTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Body (content) template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BodyTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowCloseButton",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Indicates whether to show the close button.\n            Default is taken from the underlying <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxModal\" /> (<c>true</c>).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowCloseButton"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Buttons",
            "TypeName": "Havit.Blazor.Components.Web.MessageBoxButtons",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Buttons to show. Default is <see cref=\"F:Havit.Blazor.Components.Web.MessageBoxButtons.Ok\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Buttons"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PrimaryButton",
            "TypeName": "Havit.Blazor.Components.Web.MessageBoxButtons?",
            "Documentation": "\n            <summary>\n            Primary button (if you want to override the default).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PrimaryButton"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CustomButtonText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text for <see cref=\"F:Havit.Blazor.Components.Web.MessageBoxButtons.Custom\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CustomButtonText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PrimaryButtonSettings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonSettings",
            "Documentation": "\n            <summary>\n            Settings for the dialog primary button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PrimaryButtonSettings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SecondaryButtonSettings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonSettings",
            "Documentation": "\n            <summary>\n            Settings for dialog secondary button(s).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SecondaryButtonSettings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ModalSettings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ModalSettings",
            "Documentation": "\n            <summary>\n            Settings for underlying <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxModal\" /> component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ModalSettings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClosed",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.MessageBoxButtons>",
            "Documentation": "\n            <summary>\n            Raised when the message box gets closed. Returns the button clicked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClosed",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Additional attributes to be splatted onto an underlying <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxModal\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxMessageBox"
        }
      },
      {
        "HashCode": 907179172,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxMessageBox",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Component to display message-boxes.<br />\n            Usually used via <see cref=\"T:Havit.Blazor.Components.Web.HxMessageBoxService\" /> and <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxMessageBoxHost\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxMessageBox"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Title",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Title text (Header).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Title"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Header template (Header).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Content (body) text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BodyTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Body (content) template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BodyTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowCloseButton",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Indicates whether to show the close button.\n            Default is taken from the underlying <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxModal\" /> (<c>true</c>).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowCloseButton"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Buttons",
            "TypeName": "Havit.Blazor.Components.Web.MessageBoxButtons",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Buttons to show. Default is <see cref=\"F:Havit.Blazor.Components.Web.MessageBoxButtons.Ok\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Buttons"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PrimaryButton",
            "TypeName": "Havit.Blazor.Components.Web.MessageBoxButtons?",
            "Documentation": "\n            <summary>\n            Primary button (if you want to override the default).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PrimaryButton"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CustomButtonText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text for <see cref=\"F:Havit.Blazor.Components.Web.MessageBoxButtons.Custom\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CustomButtonText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PrimaryButtonSettings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonSettings",
            "Documentation": "\n            <summary>\n            Settings for the dialog primary button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PrimaryButtonSettings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SecondaryButtonSettings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonSettings",
            "Documentation": "\n            <summary>\n            Settings for dialog secondary button(s).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SecondaryButtonSettings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ModalSettings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ModalSettings",
            "Documentation": "\n            <summary>\n            Settings for underlying <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxModal\" /> component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ModalSettings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClosed",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.MessageBoxButtons>",
            "Documentation": "\n            <summary>\n            Raised when the message box gets closed. Returns the button clicked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClosed",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Additional attributes to be splatted onto an underlying <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxModal\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxMessageBox",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1152570416,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.HeaderTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Header template (Header).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HeaderTemplate",
            "ParentTag": "HxMessageBox"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.HeaderTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 57877327,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.HeaderTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Header template (Header).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HeaderTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxMessageBox"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.HeaderTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -484728688,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.BodyTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Body (content) template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BodyTemplate",
            "ParentTag": "HxMessageBox"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.BodyTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1895789183,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.BodyTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Body (content) template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BodyTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxMessageBox"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.BodyTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1032799712,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxMessageBoxHost",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Displays message boxes initiated through <see cref=\"T:Havit.Blazor.Components.Web.IHxMessageBoxService\" />.\n            To be placed in root application component / main layout.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxMessageBoxHost"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxMessageBoxHost"
        }
      },
      {
        "HashCode": -319006490,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxMessageBoxHost",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Displays message boxes initiated through <see cref=\"T:Havit.Blazor.Components.Web.IHxMessageBoxService\" />.\n            To be placed in root application component / main layout.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxMessageBoxHost"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxMessageBoxHost",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 140031764,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxModal",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Component to render modal dialog as a <a href=\"https://getbootstrap.com/docs/5.1/components/modal/\">Bootstrap Modal</a>.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxModal"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ModalSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Title",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Title in modal header.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Title"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Header template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BodyTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Body template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BodyTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Footer template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FooterTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ModalSize?",
            "Documentation": "\n            <summary>\n            Size of the modal. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ModalSize.Regular\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Fullscreen",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ModalFullscreen?",
            "Documentation": "\n            <summary>\n            Fullscreen behavior of the modal. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ModalFullscreen.Disabled\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Fullscreen"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowCloseButton",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Indicates whether the modal shows close button in header.\n            Default value is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowCloseButton"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CloseButtonIcon",
            "TypeName": "Havit.Blazor.Components.Web.IconBase",
            "Documentation": "\n            <summary>\n            Close icon to be used in header.\n            If set to <c>null</c>, Bootstrap default close-button will be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CloseButtonIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CloseOnEscape",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Indicates whether the modal closes when escape key is pressed.\n            Default value is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CloseOnEscape"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UseStaticBackdrop",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Indicates whether the modal uses a static backdrop.\n            Default value is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UseStaticBackdrop"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Scrollable",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Allows scrolling the modal body. Default is <c>false</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Scrollable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Centered",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Allows vertical centering of the modal.<br />\n            Default is <c>false</c> (horizontal only).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Centered"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class for the main element (<c>div.modal</c>).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DialogCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class for the dialog (<c>div.modal-dialog</c> element).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DialogCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional header CSS class (<c>div.modal-header</c>).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BodyCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional body CSS class (<c>div.modal-body</c>).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BodyCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ContentCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional content CSS class (<c>div.modal-content</c>).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ContentCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional footer CSS class (<c>div.modal-footer</c>).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FooterCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClosed",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            This event is fired when the modal has finished being hidden from the user (will wait for CSS transitions to complete).<br />\n            This can be caused by <see cref=\"M:Havit.Blazor.Components.Web.Bootstrap.HxModal.HideAsync\" />, close-button, <kbd>Esc</kbd> key or other interaction.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClosed",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnShown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            This event is fired when an modal element has been made visible to the user (will wait for CSS transitions to complete).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnShown",
              "Components.EventCallback": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxModal"
        }
      },
      {
        "HashCode": 779947560,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxModal",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Component to render modal dialog as a <a href=\"https://getbootstrap.com/docs/5.1/components/modal/\">Bootstrap Modal</a>.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxModal"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ModalSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Title",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Title in modal header.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Title"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Header template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BodyTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Body template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BodyTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Footer template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FooterTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ModalSize?",
            "Documentation": "\n            <summary>\n            Size of the modal. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ModalSize.Regular\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Fullscreen",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ModalFullscreen?",
            "Documentation": "\n            <summary>\n            Fullscreen behavior of the modal. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ModalFullscreen.Disabled\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Fullscreen"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowCloseButton",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Indicates whether the modal shows close button in header.\n            Default value is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowCloseButton"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CloseButtonIcon",
            "TypeName": "Havit.Blazor.Components.Web.IconBase",
            "Documentation": "\n            <summary>\n            Close icon to be used in header.\n            If set to <c>null</c>, Bootstrap default close-button will be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CloseButtonIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CloseOnEscape",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Indicates whether the modal closes when escape key is pressed.\n            Default value is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CloseOnEscape"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UseStaticBackdrop",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Indicates whether the modal uses a static backdrop.\n            Default value is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UseStaticBackdrop"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Scrollable",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Allows scrolling the modal body. Default is <c>false</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Scrollable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Centered",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Allows vertical centering of the modal.<br />\n            Default is <c>false</c> (horizontal only).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Centered"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class for the main element (<c>div.modal</c>).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DialogCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class for the dialog (<c>div.modal-dialog</c> element).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DialogCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional header CSS class (<c>div.modal-header</c>).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BodyCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional body CSS class (<c>div.modal-body</c>).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BodyCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ContentCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional content CSS class (<c>div.modal-content</c>).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ContentCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional footer CSS class (<c>div.modal-footer</c>).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FooterCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClosed",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            This event is fired when the modal has finished being hidden from the user (will wait for CSS transitions to complete).<br />\n            This can be caused by <see cref=\"M:Havit.Blazor.Components.Web.Bootstrap.HxModal.HideAsync\" />, close-button, <kbd>Esc</kbd> key or other interaction.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClosed",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnShown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            This event is fired when an modal element has been made visible to the user (will wait for CSS transitions to complete).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnShown",
              "Components.EventCallback": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxModal",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 771891298,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxModal.HeaderTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Header template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HeaderTemplate",
            "ParentTag": "HxModal"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxModal.HeaderTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1957045745,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxModal.HeaderTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Header template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HeaderTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxModal"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxModal.HeaderTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1576456011,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxModal.BodyTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Body template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BodyTemplate",
            "ParentTag": "HxModal"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxModal.BodyTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1581752014,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxModal.BodyTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Body template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BodyTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxModal"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxModal.BodyTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 445953342,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxModal.FooterTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Footer template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "FooterTemplate",
            "ParentTag": "HxModal"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxModal.FooterTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1054598154,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxModal.FooterTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Footer template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "FooterTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxModal"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxModal.FooterTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 439893695,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxNamedViewList<TFilterModel>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxNamedViewList"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TFilterModel",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TFilterModel for the Havit.Blazor.Components.Web.Bootstrap.HxNamedViewList<TFilterModel> component.",
            "Metadata": {
              "Common.PropertyName": "TFilterModel",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NamedViews",
            "TypeName": "System.Collections.Generic.IEnumerable<Havit.Blazor.Components.Web.Bootstrap.NamedView<TFilterModel>>",
            "Metadata": {
              "Common.PropertyName": "NamedViews",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FilterModel",
            "TypeName": "TFilterModel",
            "Metadata": {
              "Common.PropertyName": "FilterModel",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FilterModelChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TFilterModel>",
            "Metadata": {
              "Common.PropertyName": "FilterModelChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnNamedViewSelected",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.Bootstrap.NamedView<TFilterModel>>",
            "Metadata": {
              "Common.PropertyName": "OnNamedViewSelected",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxNamedViewList<TFilterModel>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": -76609857,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxNamedViewList<TFilterModel>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxNamedViewList"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TFilterModel",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TFilterModel for the Havit.Blazor.Components.Web.Bootstrap.HxNamedViewList<TFilterModel> component.",
            "Metadata": {
              "Common.PropertyName": "TFilterModel",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NamedViews",
            "TypeName": "System.Collections.Generic.IEnumerable<Havit.Blazor.Components.Web.Bootstrap.NamedView<TFilterModel>>",
            "Metadata": {
              "Common.PropertyName": "NamedViews",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FilterModel",
            "TypeName": "TFilterModel",
            "Metadata": {
              "Common.PropertyName": "FilterModel",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FilterModelChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TFilterModel>",
            "Metadata": {
              "Common.PropertyName": "FilterModelChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnNamedViewSelected",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.Bootstrap.NamedView<TFilterModel>>",
            "Metadata": {
              "Common.PropertyName": "OnNamedViewSelected",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxNamedViewList<TFilterModel>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1180196278,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxAnchorFragmentNavigation",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Temporarily (?) compensates Blazor deficiency in anchor-fragments (scrolling to <c>page#id</c> URLs). Supports navigation with <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxScrollspy\" /> component.\n            <a href=\"https://github.com/dotnet/aspnetcore/issues/8393\">GitHub Issue: Blazor 0.8.0: hash routing to named element #8393</a>.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxAnchorFragmentNavigation"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Automation",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.AnchorFragmentNavigationAutomationMode",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Level of automation.\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.AnchorFragmentNavigationAutomationMode.Full\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Automation"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxAnchorFragmentNavigation"
        }
      },
      {
        "HashCode": -1835743768,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxAnchorFragmentNavigation",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Temporarily (?) compensates Blazor deficiency in anchor-fragments (scrolling to <c>page#id</c> URLs). Supports navigation with <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxScrollspy\" /> component.\n            <a href=\"https://github.com/dotnet/aspnetcore/issues/8393\">GitHub Issue: Blazor 0.8.0: hash routing to named element #8393</a>.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxAnchorFragmentNavigation"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Automation",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.AnchorFragmentNavigationAutomationMode",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Level of automation.\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.AnchorFragmentNavigationAutomationMode.Full\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Automation"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxAnchorFragmentNavigation",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -824934750,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumb",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <see href=\"https://getbootstrap.com/docs/5.1/components/breadcrumb/\">Bootstrap 5 Breadcrumb</see> component.<br />\n            Indicates the current page’s location within a navigational hierarchy.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxBreadcrumb"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Divider",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Breadcrumb divider. Default is <c>/</c>.\n            Enter either a character (such as <c>&gt;</c>) or use an embedded SVG icon.\n            Disable the divider with <c>null</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Divider"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumb"
        }
      },
      {
        "HashCode": 757310795,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumb",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <see href=\"https://getbootstrap.com/docs/5.1/components/breadcrumb/\">Bootstrap 5 Breadcrumb</see> component.<br />\n            Indicates the current page’s location within a navigational hierarchy.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumb"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Divider",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Breadcrumb divider. Default is <c>/</c>.\n            Enter either a character (such as <c>&gt;</c>) or use an embedded SVG icon.\n            Disable the divider with <c>null</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Divider"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumb",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 338160026,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumb.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Child content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxBreadcrumb"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumb.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -2057456784,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumb.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Child content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumb"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumb.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 250636275,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumbItem",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Item for <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumb\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxBreadcrumbItem"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Item text (usually a name of the page).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Href",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The link of the breadcrumb (a page where the user will be led on click).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Href"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Active",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Determines whether the <c>HxBreadcrumbItem</c> is active (use for a page that the user is currently on).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Active"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Itme content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumbItem"
        }
      },
      {
        "HashCode": -1051015802,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumbItem",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Item for <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumb\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumbItem"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Item text (usually a name of the page).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Href",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The link of the breadcrumb (a page where the user will be led on click).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Href"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Active",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Determines whether the <c>HxBreadcrumbItem</c> is active (use for a page that the user is currently on).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Active"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Itme content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumbItem",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1655528721,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumbItem.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Itme content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxBreadcrumbItem"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumbItem.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -470155736,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumbItem.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Itme content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumbItem"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumbItem.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -896405230,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxNav",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <a href=\"https://getbootstrap.com/docs/5.0/components/navs-tabs/\">Bootstrap Nav</a> component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxNav"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Orientation",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.NavOrientation",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Orientation of the nav.\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.NavOrientation.Horizontal\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Orientation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.NavVariant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The visual variant of the nav items.\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.NavVariant.Standard\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Id",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            ID of the nav which can be used for <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxScrollspy.TargetId\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Id"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Content of the nav.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxNav"
        }
      },
      {
        "HashCode": 975315997,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxNav",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <a href=\"https://getbootstrap.com/docs/5.0/components/navs-tabs/\">Bootstrap Nav</a> component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxNav"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Orientation",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.NavOrientation",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Orientation of the nav.\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.NavOrientation.Horizontal\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Orientation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.NavVariant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The visual variant of the nav items.\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.NavVariant.Standard\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Id",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            ID of the nav which can be used for <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxScrollspy.TargetId\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Id"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Content of the nav.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxNav",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -262202249,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxNav.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Content of the nav.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxNav"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxNav.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1337345159,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxNav.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Content of the nav.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxNav"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxNav.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -224781019,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxNavbar",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <see href=\"https://getbootstrap.com/docs/5.1/components/navbar/\">Bootstrap 5 Navbar</see> component - responsive navigation header.<br />\n            With support for branding, navigation, and more, including support for the collapse plugin.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxNavbar"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ThemeColor",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Color (background).\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ThemeColor.Light\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ColorScheme",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.NavbarColorScheme",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Color scheme.<br />\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.NavbarColorScheme.Light\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ColorScheme"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Expand",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.NavbarExpand",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Responsive expand setting (breakpoint) for <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxNavbar\" />.<br />\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.NavbarExpand.LargeUp\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Expand"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Id",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Element ID.\n            (Autogenerated GUID if not set explicitly.)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Id"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Content of the navbar.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxNavbar"
        }
      },
      {
        "HashCode": 2028232099,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxNavbar",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <see href=\"https://getbootstrap.com/docs/5.1/components/navbar/\">Bootstrap 5 Navbar</see> component - responsive navigation header.<br />\n            With support for branding, navigation, and more, including support for the collapse plugin.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxNavbar"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ThemeColor",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Color (background).\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ThemeColor.Light\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ColorScheme",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.NavbarColorScheme",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Color scheme.<br />\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.NavbarColorScheme.Light\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ColorScheme"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Expand",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.NavbarExpand",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Responsive expand setting (breakpoint) for <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxNavbar\" />.<br />\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.NavbarExpand.LargeUp\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Expand"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Id",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Element ID.\n            (Autogenerated GUID if not set explicitly.)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Id"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Content of the navbar.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxNavbar",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1961485441,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxNavbar.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Content of the navbar.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxNavbar"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxNavbar.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -950659916,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxNavbar.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Content of the navbar.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxNavbar"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxNavbar.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1876423682,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxNavbarBrand",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Bootstrap <see href=\"https://getbootstrap.com/docs/5.1/components/navbar/#brand\">navbar-brand</see> component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxNavbarBrand"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Href",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The navigation target. Default is <c>\"/\"</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Href"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Content of the navbar-brand.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxNavbarBrand"
        }
      },
      {
        "HashCode": -1845571843,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxNavbarBrand",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Bootstrap <see href=\"https://getbootstrap.com/docs/5.1/components/navbar/#brand\">navbar-brand</see> component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxNavbarBrand"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Href",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The navigation target. Default is <c>\"/\"</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Href"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Content of the navbar-brand.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxNavbarBrand",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1553398615,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxNavbarBrand.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Content of the navbar-brand.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxNavbarBrand"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxNavbarBrand.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 912353422,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxNavbarBrand.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Content of the navbar-brand.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxNavbarBrand"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxNavbarBrand.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1781314917,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxNavbarCollapse",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Collapse section for Bootstrap 5 <see href=\"https://getbootstrap.com/docs/5.1/components/navbar/\">navbar</see> component.\n            Derived from <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapse\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxNavbarCollapse"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Id",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Element ID. To be referenced by <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleButton.CollapseTarget\" />.\n            (Autogenerated GUID if not set explicitly.)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Id"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CollapseDirection",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.CollapseDirection",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Direction of the animation.\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.CollapseDirection.Vertical\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CollapseDirection"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Parent",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If parent is provided, then all collapsible elements under the specified parent will be closed when this collapsible item is shown.\n            (Similar to traditional accordion behavior.)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Parent"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Content of the collapse.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnShown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            This event is fired when a collapse element has been made visible to the user (will wait for CSS transitions to complete).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnShown",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnHidden",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            This event is fired when a collapse element has been hidden from the user (will wait for CSS transitions to complete).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnHidden",
              "Components.EventCallback": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxNavbarCollapse"
        }
      },
      {
        "HashCode": -1651808852,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxNavbarCollapse",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Collapse section for Bootstrap 5 <see href=\"https://getbootstrap.com/docs/5.1/components/navbar/\">navbar</see> component.\n            Derived from <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapse\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxNavbarCollapse"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Id",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Element ID. To be referenced by <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleButton.CollapseTarget\" />.\n            (Autogenerated GUID if not set explicitly.)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Id"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CollapseDirection",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.CollapseDirection",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Direction of the animation.\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.CollapseDirection.Vertical\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CollapseDirection"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Parent",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If parent is provided, then all collapsible elements under the specified parent will be closed when this collapsible item is shown.\n            (Similar to traditional accordion behavior.)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Parent"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Content of the collapse.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnShown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            This event is fired when a collapse element has been made visible to the user (will wait for CSS transitions to complete).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnShown",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnHidden",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            This event is fired when a collapse element has been hidden from the user (will wait for CSS transitions to complete).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnHidden",
              "Components.EventCallback": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxNavbarCollapse",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -229805331,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxNavbarCollapse.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Content of the collapse.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxNavbarCollapse"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxNavbarCollapse.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 510663565,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxNavbarCollapse.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Content of the collapse.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxNavbarCollapse"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxNavbarCollapse.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 464579241,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxNavbarText",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Text content for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxNavbar\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxNavbarText"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Any additional CSS class to apply.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxNavbarText"
        }
      },
      {
        "HashCode": -103444272,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxNavbarText",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Text content for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxNavbar\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxNavbarText"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Any additional CSS class to apply.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxNavbarText",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -41747412,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxNavbarText.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxNavbarText"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxNavbarText.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1405194620,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxNavbarText.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxNavbarText"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxNavbarText.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -459432003,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxNavbarToggler",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Bootstrap 5 <see href=\"https://getbootstrap.com/docs/5.1/components/navbar/#toggler\">navbar-toggler</see> component.\n            Derived from <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleButton\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxNavbarToggler"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "CollapseTarget",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Target selector of the toggle.\n            Use <c>#id</c> to reference single <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapse\" /> or <c>.class</c> for multiple <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapse\" />s.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CollapseTarget"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text of the button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Button content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "Havit.Blazor.Components.Web.IconBase",
            "Documentation": "\n            <summary>\n            Icon to render into the button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconPlacement",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement?",
            "Documentation": "\n            <summary>\n            Position of the icon within the button. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement.Start\" /> (configurable through <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconPlacement"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ThemeColor?",
            "Documentation": "\n            <summary>\n            Bootstrap button style - theme color.<br />\n            Default is taken from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" /> (<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ThemeColor.None\" /> if not customized).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonSize?",
            "Documentation": "\n            <summary>\n            Button size. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonSize.Regular\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Outline",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            <see href=\"https://getbootstrap.com/docs/5.0/components/buttons/#outline-buttons\">Bootstrap \"outline\" button</see> style.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Outline"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the <c>&lt;button /&gt;</c>.<br />\n            When using <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> you might want to use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" /> to get the desired result.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EditContext",
            "TypeName": "Microsoft.AspNetCore.Components.Forms.EditContext",
            "Documentation": "\n            <summary>\n            Associated <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.EditContext\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EditContext"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FormId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Specifies the form the button belongs to.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FormId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tooltip",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Tooltip text.<br />\n            If set, a <c>span</c> wrapper will be rendered around the <c>&lt;button /&gt;</c>. For most scenarios you will then use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tooltip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TooltipPlacement",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Tooltip placement.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TooltipPlacement"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TooltipCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the tooltip.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TooltipCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TooltipWrapperCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the tooltip <c>span</c> wrapper of the <c>&lt;button /&gt;</c>.<br />\n            If set, the <c>span</c> wrapper will be rendered no matter the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> text is set or not.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TooltipWrapperCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised after the button is clicked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnValidClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised after the button is clicked and EditContext validation succeeds.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnValidClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInvalidClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised after the button is clicked and EditContext validation fails.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnInvalidClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClickStopPropagation",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Stop onClick-event propagation. Deafult is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClickStopPropagation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClickPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevents the default action for the onclick event. Deafult is <c>false</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClickPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Spinner",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Set state of the embedded <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSpinner\" />.\n            Leave <c>null</c> if you want automated spinner when any of the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers is running.\n            You can set an explicit <c>false</c> constant to disable (override) the spinner automation.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Spinner"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SingleClickProtection",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set <c>false</c> if you want to allow multiple <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers in parallel. Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SingleClickProtection"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Additional attributes to be splatted onto an underlying <c>&lt;button&gt;</c> element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxNavbarToggler"
        }
      },
      {
        "HashCode": -156298409,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxNavbarToggler",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Bootstrap 5 <see href=\"https://getbootstrap.com/docs/5.1/components/navbar/#toggler\">navbar-toggler</see> component.\n            Derived from <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleButton\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxNavbarToggler"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "CollapseTarget",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Target selector of the toggle.\n            Use <c>#id</c> to reference single <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapse\" /> or <c>.class</c> for multiple <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapse\" />s.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CollapseTarget"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text of the button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Button content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "Havit.Blazor.Components.Web.IconBase",
            "Documentation": "\n            <summary>\n            Icon to render into the button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconPlacement",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement?",
            "Documentation": "\n            <summary>\n            Position of the icon within the button. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement.Start\" /> (configurable through <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconPlacement"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ThemeColor?",
            "Documentation": "\n            <summary>\n            Bootstrap button style - theme color.<br />\n            Default is taken from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" /> (<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ThemeColor.None\" /> if not customized).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonSize?",
            "Documentation": "\n            <summary>\n            Button size. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonSize.Regular\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Outline",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            <see href=\"https://getbootstrap.com/docs/5.0/components/buttons/#outline-buttons\">Bootstrap \"outline\" button</see> style.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Outline"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the <c>&lt;button /&gt;</c>.<br />\n            When using <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> you might want to use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" /> to get the desired result.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EditContext",
            "TypeName": "Microsoft.AspNetCore.Components.Forms.EditContext",
            "Documentation": "\n            <summary>\n            Associated <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.EditContext\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EditContext"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FormId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Specifies the form the button belongs to.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FormId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tooltip",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Tooltip text.<br />\n            If set, a <c>span</c> wrapper will be rendered around the <c>&lt;button /&gt;</c>. For most scenarios you will then use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tooltip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TooltipPlacement",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Tooltip placement.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TooltipPlacement"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TooltipCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the tooltip.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TooltipCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TooltipWrapperCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the tooltip <c>span</c> wrapper of the <c>&lt;button /&gt;</c>.<br />\n            If set, the <c>span</c> wrapper will be rendered no matter the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> text is set or not.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TooltipWrapperCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised after the button is clicked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnValidClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised after the button is clicked and EditContext validation succeeds.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnValidClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInvalidClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised after the button is clicked and EditContext validation fails.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnInvalidClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClickStopPropagation",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Stop onClick-event propagation. Deafult is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClickStopPropagation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClickPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevents the default action for the onclick event. Deafult is <c>false</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClickPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Spinner",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Set state of the embedded <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSpinner\" />.\n            Leave <c>null</c> if you want automated spinner when any of the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers is running.\n            You can set an explicit <c>false</c> constant to disable (override) the spinner automation.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Spinner"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SingleClickProtection",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set <c>false</c> if you want to allow multiple <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers in parallel. Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SingleClickProtection"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Additional attributes to be splatted onto an underlying <c>&lt;button&gt;</c> element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxNavbarToggler",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 887881290,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxNavbarToggler.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Button content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxNavbarToggler"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxNavbarToggler.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -586760151,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxNavbarToggler.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Button content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxNavbarToggler"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxNavbarToggler.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -2091542647,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxNavLink",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <a href=\"https://getbootstrap.com/docs/5.0/components/navs-tabs/\">Bootstrap nav-link</a> component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxNavLink"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Href",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Navigation target.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Href"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text of the item.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Match",
            "TypeName": "Microsoft.AspNetCore.Components.Routing.NavLinkMatch?",
            "Documentation": "\n            <summary>\n            URL matching behavior for the underlying <see cref=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\" />.\n            Default is <see cref=\"F:Microsoft.AspNetCore.Components.Routing.NavLinkMatch.Prefix\" />.\n            You can set the value to <c>null</c> to disable the matching.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Match"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised when the item is clicked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Additional attributes to be splatted onto an underlying <see cref=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\" /> component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxNavLink"
        }
      },
      {
        "HashCode": -1634058999,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxNavLink",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <a href=\"https://getbootstrap.com/docs/5.0/components/navs-tabs/\">Bootstrap nav-link</a> component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxNavLink"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Href",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Navigation target.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Href"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text of the item.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Match",
            "TypeName": "Microsoft.AspNetCore.Components.Routing.NavLinkMatch?",
            "Documentation": "\n            <summary>\n            URL matching behavior for the underlying <see cref=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\" />.\n            Default is <see cref=\"F:Microsoft.AspNetCore.Components.Routing.NavLinkMatch.Prefix\" />.\n            You can set the value to <c>null</c> to disable the matching.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Match"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised when the item is clicked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Additional attributes to be splatted onto an underlying <see cref=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\" /> component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxNavLink",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -625721468,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxNavLink.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxNavLink"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxNavLink.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1047344268,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxNavLink.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxNavLink"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxNavLink.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -254304981,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxScrollspy",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <a href=\"https://getbootstrap.com/docs/5.0/components/scrollspy/\">Bootstrap Scrollspy</a> component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxScrollspy"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TargetId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            ID of the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxNav\" /> or list-group with scrollspy navigation.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TargetId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Scrollspy additional CSS class. Added to main div (.hx-scrollspy).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Content to be spied. Elements with IDs are required (corresponding IDs to be used in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavLink.Href\" />).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxScrollspy"
        }
      },
      {
        "HashCode": -855722529,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxScrollspy",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <a href=\"https://getbootstrap.com/docs/5.0/components/scrollspy/\">Bootstrap Scrollspy</a> component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxScrollspy"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TargetId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            ID of the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxNav\" /> or list-group with scrollspy navigation.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TargetId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Scrollspy additional CSS class. Added to main div (.hx-scrollspy).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Content to be spied. Elements with IDs are required (corresponding IDs to be used in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavLink.Href\" />).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxScrollspy",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 531048074,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxScrollspy.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Content to be spied. Elements with IDs are required (corresponding IDs to be used in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavLink.Href\" />).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxScrollspy"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxScrollspy.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 6261714,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxScrollspy.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Content to be spied. Elements with IDs are required (corresponding IDs to be used in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavLink.Href\" />).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxScrollspy"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxScrollspy.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 97030891,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxScrollspyNavLink",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Temporary (?) NavLink component to be used with <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxScrollspy\" /> where <c>#id</c> anchors are required and <c>page-route#id</c> cannot be used.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxScrollspyNavLink"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Href",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The navigation target in <c>#id</c> form.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Href"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised when the item is clicked (before the navigation location is changed to <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxScrollspyNavLink.Href\" />).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Additional attributes to be splatted onto an underlying <c>&lt;a&gt;</c> element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxScrollspyNavLink"
        }
      },
      {
        "HashCode": 301921720,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxScrollspyNavLink",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Temporary (?) NavLink component to be used with <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxScrollspy\" /> where <c>#id</c> anchors are required and <c>page-route#id</c> cannot be used.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxScrollspyNavLink"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Href",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The navigation target in <c>#id</c> form.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Href"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised when the item is clicked (before the navigation location is changed to <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxScrollspyNavLink.Href\" />).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Additional attributes to be splatted onto an underlying <c>&lt;a&gt;</c> element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxScrollspyNavLink",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 33680564,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxScrollspyNavLink.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxScrollspyNavLink"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxScrollspyNavLink.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 268866930,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxScrollspyNavLink.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxScrollspyNavLink"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxScrollspyNavLink.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1100023634,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxSidebar",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Sidebar component - responsive navigation sidebar.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxSidebar"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "HeaderTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Sidebar header.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemsTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Sidebar items. Use <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemsTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ExpandIcon",
            "TypeName": "Havit.Blazor.Components.Web.IconBase",
            "Documentation": "\n            <summary>\n            Icon for expanding the desktop version.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ExpandIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CollapseIcon",
            "TypeName": "Havit.Blazor.Components.Web.IconBase",
            "Documentation": "\n            <summary>\n            Icon for collapsing the desktop version.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CollapseIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Sidebar footer (e.g. logged user, language switch, ...).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FooterTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Id",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            ID of the root sidebar HTML element.\n            (Autogenerated if not set.)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Id"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxSidebar"
        }
      },
      {
        "HashCode": 37324554,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxSidebar",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Sidebar component - responsive navigation sidebar.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxSidebar"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "HeaderTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Sidebar header.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemsTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Sidebar items. Use <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemsTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ExpandIcon",
            "TypeName": "Havit.Blazor.Components.Web.IconBase",
            "Documentation": "\n            <summary>\n            Icon for expanding the desktop version.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ExpandIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CollapseIcon",
            "TypeName": "Havit.Blazor.Components.Web.IconBase",
            "Documentation": "\n            <summary>\n            Icon for collapsing the desktop version.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CollapseIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Sidebar footer (e.g. logged user, language switch, ...).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FooterTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Id",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            ID of the root sidebar HTML element.\n            (Autogenerated if not set.)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Id"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxSidebar",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1864766075,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxSidebar.HeaderTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Sidebar header.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HeaderTemplate",
            "ParentTag": "HxSidebar"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxSidebar.HeaderTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 711289162,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxSidebar.HeaderTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Sidebar header.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HeaderTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxSidebar"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxSidebar.HeaderTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1247351857,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxSidebar.ItemsTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Sidebar items. Use <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemsTemplate",
            "ParentTag": "HxSidebar"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxSidebar.ItemsTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -468716765,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxSidebar.ItemsTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Sidebar items. Use <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemsTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxSidebar"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxSidebar.ItemsTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1759083027,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxSidebar.FooterTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Sidebar footer (e.g. logged user, language switch, ...).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "FooterTemplate",
            "ParentTag": "HxSidebar"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxSidebar.FooterTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1460093883,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxSidebar.FooterTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Sidebar footer (e.g. logged user, language switch, ...).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "FooterTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxSidebar"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxSidebar.FooterTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -2031386701,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxSidebarBrand",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Brand for the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.HeaderTemplate\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxSidebarBrand"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "BrandName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Brand long name.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BrandName"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Logo",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Brand logo.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Logo",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BrandNameShort",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Brand short name.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BrandNameShort"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxSidebarBrand"
        }
      },
      {
        "HashCode": -216808012,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxSidebarBrand",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Brand for the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.HeaderTemplate\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxSidebarBrand"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "BrandName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Brand long name.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BrandName"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Logo",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Brand logo.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Logo",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BrandNameShort",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Brand short name.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BrandNameShort"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxSidebarBrand",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 135927767,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxSidebarBrand.Logo",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Brand logo.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Logo",
            "ParentTag": "HxSidebarBrand"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxSidebarBrand.Logo",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 2060224499,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxSidebarBrand.Logo",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Brand logo.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Logo",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxSidebarBrand"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxSidebarBrand.Logo",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 56437076,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxSidebarFooter",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Item for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSidebar\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxSidebarFooter"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Item text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "Havit.Blazor.Components.Web.IconBase",
            "Documentation": "\n            <summary>\n            Item icon (optional).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Href",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Item navigation target.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Href"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Match",
            "TypeName": "Microsoft.AspNetCore.Components.Routing.NavLinkMatch?",
            "Documentation": "\n            <summary>\n            URL matching behavior for the underlying <see cref=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\" />.\n            Default is <see cref=\"F:Microsoft.AspNetCore.Components.Routing.NavLinkMatch.Prefix\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Match"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Allows you to disable the item with <c>false</c>.\n            Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Sub-items (not intended to be used for any other purpose).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxSidebarFooter"
        }
      },
      {
        "HashCode": 184478306,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxSidebarFooter",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Item for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSidebar\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxSidebarFooter"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Item text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "Havit.Blazor.Components.Web.IconBase",
            "Documentation": "\n            <summary>\n            Item icon (optional).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Href",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Item navigation target.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Href"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Match",
            "TypeName": "Microsoft.AspNetCore.Components.Routing.NavLinkMatch?",
            "Documentation": "\n            <summary>\n            URL matching behavior for the underlying <see cref=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\" />.\n            Default is <see cref=\"F:Microsoft.AspNetCore.Components.Routing.NavLinkMatch.Prefix\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Match"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Allows you to disable the item with <c>false</c>.\n            Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Sub-items (not intended to be used for any other purpose).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxSidebarFooter",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1735205394,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxSidebarFooter.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Sub-items (not intended to be used for any other purpose).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxSidebarFooter"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxSidebarFooter.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1895065245,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxSidebarFooter.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Sub-items (not intended to be used for any other purpose).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxSidebarFooter"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxSidebarFooter.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 2115536809,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Item for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSidebar\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxSidebarItem"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Item text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "Havit.Blazor.Components.Web.IconBase",
            "Documentation": "\n            <summary>\n            Item icon (optional).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Href",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Item navigation target.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Href"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Match",
            "TypeName": "Microsoft.AspNetCore.Components.Routing.NavLinkMatch?",
            "Documentation": "\n            <summary>\n            URL matching behavior for the underlying <see cref=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\" />.\n            Default is <see cref=\"F:Microsoft.AspNetCore.Components.Routing.NavLinkMatch.Prefix\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Match"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Allows you to disable the item with <c>false</c>.\n            Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Any additional CSS class to add.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Sub-items (not intended to be used for any other purpose).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem"
        }
      },
      {
        "HashCode": 407283287,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Item for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSidebar\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Item text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "Havit.Blazor.Components.Web.IconBase",
            "Documentation": "\n            <summary>\n            Item icon (optional).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Href",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Item navigation target.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Href"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Match",
            "TypeName": "Microsoft.AspNetCore.Components.Routing.NavLinkMatch?",
            "Documentation": "\n            <summary>\n            URL matching behavior for the underlying <see cref=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\" />.\n            Default is <see cref=\"F:Microsoft.AspNetCore.Components.Routing.NavLinkMatch.Prefix\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Match"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Allows you to disable the item with <c>false</c>.\n            Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Any additional CSS class to add.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Sub-items (not intended to be used for any other purpose).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -741063911,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Sub-items (not intended to be used for any other purpose).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxSidebarItem"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1958318673,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Sub-items (not intended to be used for any other purpose).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1459636082,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <a href=\"https://getbootstrap.com/docs/5.0/components/offcanvas/\">Bootstrap Offcanvas</a> component (aka Drawer).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxOffcanvas"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.OffcanvasSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Title",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text for the title in header.\n            (Is rendered into <c>&lt;h5 class=\"offcanvas-title\"&gt;</c> - in opposite to <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.HeaderTemplate\" /> which is rendered directly into <c>offcanvas-header</c>).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Title"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Content for the header.\n            (Is rendered directly into <c>offcanvas-header</c> - in opposite to <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.Title\" /> which is rendered into <c>&lt;h5 class=\"offcanvas-title\"&gt;</c>).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BodyTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Body content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BodyTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Footer content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FooterTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placement",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.OffcanvasPlacement?",
            "Documentation": "\n            <summary>\n            Placement of the offcanvas. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.OffcanvasPlacement.End\" /> (right).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placement"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RenderMode",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.OffcanvasRenderMode",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Determines whether the content is always rendered or only if the offcanvas is open. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.OffcanvasRenderMode.OpenOnly\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RenderMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.OffcanvasSize?",
            "Documentation": "\n            <summary>\n            Size of the offcanvas. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.OffcanvasSize.Regular\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowCloseButton",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Indicates whether the modal shows close button in header.\n            Default value is <c>true</c>.\n            Use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.CloseButtonIcon\" /> to change shape of the button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowCloseButton"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CloseOnEscape",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Indicates whether the offcanvas closes when escape key is pressed.\n            Default value is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CloseOnEscape"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CloseButtonIcon",
            "TypeName": "Havit.Blazor.Components.Web.IconBase",
            "Documentation": "\n            <summary>\n            Close icon to be used in header.\n            If set to <c>null</c>, Bootstrap default close-button will be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CloseButtonIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BackdropEnabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Indicates whether to apply a backdrop on body while offcanvas is open.\n            Default value (from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.Defaults\" />) is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BackdropEnabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ScrollingEnabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Indicates whether body (page) scrolling is allowed while offcanvas is open.\n            Default value (from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.Defaults\" />) is <c>false</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ScrollingEnabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Offcanvas additional CSS class. Added to root <c>div</c> (<c>.offcanvas</c>).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional header CSS class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BodyCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional body CSS class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BodyCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional footer CSS class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FooterCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClosed",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            This event is fired when an offcanvas element has been hidden from the user (will wait for CSS transitions to complete).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClosed",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnShown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            This event is fired when an offcanvas element has been made visible to the user (will wait for CSS transitions to complete).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnShown",
              "Components.EventCallback": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas"
        }
      },
      {
        "HashCode": 1328185180,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <a href=\"https://getbootstrap.com/docs/5.0/components/offcanvas/\">Bootstrap Offcanvas</a> component (aka Drawer).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.OffcanvasSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Title",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text for the title in header.\n            (Is rendered into <c>&lt;h5 class=\"offcanvas-title\"&gt;</c> - in opposite to <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.HeaderTemplate\" /> which is rendered directly into <c>offcanvas-header</c>).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Title"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Content for the header.\n            (Is rendered directly into <c>offcanvas-header</c> - in opposite to <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.Title\" /> which is rendered into <c>&lt;h5 class=\"offcanvas-title\"&gt;</c>).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BodyTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Body content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BodyTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Footer content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FooterTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placement",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.OffcanvasPlacement?",
            "Documentation": "\n            <summary>\n            Placement of the offcanvas. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.OffcanvasPlacement.End\" /> (right).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placement"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RenderMode",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.OffcanvasRenderMode",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Determines whether the content is always rendered or only if the offcanvas is open. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.OffcanvasRenderMode.OpenOnly\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RenderMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.OffcanvasSize?",
            "Documentation": "\n            <summary>\n            Size of the offcanvas. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.OffcanvasSize.Regular\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowCloseButton",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Indicates whether the modal shows close button in header.\n            Default value is <c>true</c>.\n            Use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.CloseButtonIcon\" /> to change shape of the button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowCloseButton"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CloseOnEscape",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Indicates whether the offcanvas closes when escape key is pressed.\n            Default value is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CloseOnEscape"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CloseButtonIcon",
            "TypeName": "Havit.Blazor.Components.Web.IconBase",
            "Documentation": "\n            <summary>\n            Close icon to be used in header.\n            If set to <c>null</c>, Bootstrap default close-button will be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CloseButtonIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BackdropEnabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Indicates whether to apply a backdrop on body while offcanvas is open.\n            Default value (from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.Defaults\" />) is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BackdropEnabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ScrollingEnabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Indicates whether body (page) scrolling is allowed while offcanvas is open.\n            Default value (from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.Defaults\" />) is <c>false</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ScrollingEnabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Offcanvas additional CSS class. Added to root <c>div</c> (<c>.offcanvas</c>).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional header CSS class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BodyCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional body CSS class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BodyCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional footer CSS class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FooterCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClosed",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            This event is fired when an offcanvas element has been hidden from the user (will wait for CSS transitions to complete).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClosed",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnShown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            This event is fired when an offcanvas element has been made visible to the user (will wait for CSS transitions to complete).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnShown",
              "Components.EventCallback": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 575753093,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.HeaderTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Content for the header.\n            (Is rendered directly into <c>offcanvas-header</c> - in opposite to <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.Title\" /> which is rendered into <c>&lt;h5 class=\"offcanvas-title\"&gt;</c>).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HeaderTemplate",
            "ParentTag": "HxOffcanvas"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.HeaderTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -36160877,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.HeaderTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Content for the header.\n            (Is rendered directly into <c>offcanvas-header</c> - in opposite to <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.Title\" /> which is rendered into <c>&lt;h5 class=\"offcanvas-title\"&gt;</c>).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HeaderTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.HeaderTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1477486791,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.BodyTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Body content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BodyTemplate",
            "ParentTag": "HxOffcanvas"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.BodyTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 291719165,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.BodyTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Body content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BodyTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.BodyTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1860728323,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.FooterTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Footer content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "FooterTemplate",
            "ParentTag": "HxOffcanvas"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.FooterTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 642358982,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.FooterTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Footer content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "FooterTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.FooterTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -366849027,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <see href=\"https://getbootstrap.com/docs/5.1/components/placeholders/\">Bootstrap 5 Placeholder</see> component, aka Skeleton.<br />\n            Use loading placeholders for your components or pages to indicate something may still be loading.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxPlaceholder"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.PlaceholderSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Columns",
            "TypeName": "System.String",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Layouts.ILayoutColumnComponent.Columns\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "Columns"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ColumnsSmallUp",
            "TypeName": "System.String",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Layouts.ILayoutColumnComponent.ColumnsSmallUp\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "ColumnsSmallUp"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ColumnsMediumUp",
            "TypeName": "System.String",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Layouts.ILayoutColumnComponent.ColumnsMediumUp\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "ColumnsMediumUp"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ColumnsLargeUp",
            "TypeName": "System.String",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Layouts.ILayoutColumnComponent.ColumnsLargeUp\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "ColumnsLargeUp"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ColumnsExtraLargeUp",
            "TypeName": "System.String",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Layouts.ILayoutColumnComponent.ColumnsExtraLargeUp\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "ColumnsExtraLargeUp"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ColumnsXxlUp",
            "TypeName": "System.String",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Layouts.ILayoutColumnComponent.ColumnsXxlUp\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "ColumnsXxlUp"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.PlaceholderSize?",
            "Documentation": "\n            <summary>\n            Size of the placeholder.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ThemeColor?",
            "Documentation": "\n            <summary>\n            Color of the placeholder.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Optional content of the placeholder (usualy not used).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Additional attributes to be splatted onto an underlying HTML element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder"
        }
      },
      {
        "HashCode": -845348235,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <see href=\"https://getbootstrap.com/docs/5.1/components/placeholders/\">Bootstrap 5 Placeholder</see> component, aka Skeleton.<br />\n            Use loading placeholders for your components or pages to indicate something may still be loading.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.PlaceholderSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Columns",
            "TypeName": "System.String",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Layouts.ILayoutColumnComponent.Columns\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "Columns"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ColumnsSmallUp",
            "TypeName": "System.String",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Layouts.ILayoutColumnComponent.ColumnsSmallUp\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "ColumnsSmallUp"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ColumnsMediumUp",
            "TypeName": "System.String",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Layouts.ILayoutColumnComponent.ColumnsMediumUp\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "ColumnsMediumUp"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ColumnsLargeUp",
            "TypeName": "System.String",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Layouts.ILayoutColumnComponent.ColumnsLargeUp\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "ColumnsLargeUp"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ColumnsExtraLargeUp",
            "TypeName": "System.String",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Layouts.ILayoutColumnComponent.ColumnsExtraLargeUp\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "ColumnsExtraLargeUp"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ColumnsXxlUp",
            "TypeName": "System.String",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Layouts.ILayoutColumnComponent.ColumnsXxlUp\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "ColumnsXxlUp"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.PlaceholderSize?",
            "Documentation": "\n            <summary>\n            Size of the placeholder.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ThemeColor?",
            "Documentation": "\n            <summary>\n            Color of the placeholder.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Optional content of the placeholder (usualy not used).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Additional attributes to be splatted onto an underlying HTML element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1476277871,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Optional content of the placeholder (usualy not used).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxPlaceholder"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -131634738,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Optional content of the placeholder (usualy not used).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -334032567,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderButton",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <see href=\"https://getbootstrap.com/docs/5.1/components/placeholders/\">Bootstrap 5 placeholder</see> in form of a button.<br />\n            Derives from <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxButton\" /> (adds <c>placeholder</c> class and changes <c>Enabled</c> default to <c>false</c>).<br />\n            Set the size of the button by using the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderButton.Columns\" /> parameter.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxPlaceholderButton"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Columns",
            "TypeName": "System.String",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Layouts.ILayoutColumnComponent.Columns\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "Columns"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ColumnsSmallUp",
            "TypeName": "System.String",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Layouts.ILayoutColumnComponent.ColumnsSmallUp\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "ColumnsSmallUp"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ColumnsMediumUp",
            "TypeName": "System.String",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Layouts.ILayoutColumnComponent.ColumnsMediumUp\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "ColumnsMediumUp"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ColumnsLargeUp",
            "TypeName": "System.String",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Layouts.ILayoutColumnComponent.ColumnsLargeUp\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "ColumnsLargeUp"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ColumnsExtraLargeUp",
            "TypeName": "System.String",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Layouts.ILayoutColumnComponent.ColumnsExtraLargeUp\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "ColumnsExtraLargeUp"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ColumnsXxlUp",
            "TypeName": "System.String",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Layouts.ILayoutColumnComponent.ColumnsXxlUp\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "ColumnsXxlUp"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text of the button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Button content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "Havit.Blazor.Components.Web.IconBase",
            "Documentation": "\n            <summary>\n            Icon to render into the button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconPlacement",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement?",
            "Documentation": "\n            <summary>\n            Position of the icon within the button. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement.Start\" /> (configurable through <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconPlacement"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ThemeColor?",
            "Documentation": "\n            <summary>\n            Bootstrap button style - theme color.<br />\n            Default is taken from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" /> (<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ThemeColor.None\" /> if not customized).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonSize?",
            "Documentation": "\n            <summary>\n            Button size. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonSize.Regular\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Outline",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            <see href=\"https://getbootstrap.com/docs/5.0/components/buttons/#outline-buttons\">Bootstrap \"outline\" button</see> style.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Outline"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the <c>&lt;button /&gt;</c>.<br />\n            When using <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> you might want to use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" /> to get the desired result.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EditContext",
            "TypeName": "Microsoft.AspNetCore.Components.Forms.EditContext",
            "Documentation": "\n            <summary>\n            Associated <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.EditContext\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EditContext"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FormId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Specifies the form the button belongs to.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FormId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tooltip",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Tooltip text.<br />\n            If set, a <c>span</c> wrapper will be rendered around the <c>&lt;button /&gt;</c>. For most scenarios you will then use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tooltip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TooltipPlacement",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Tooltip placement.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TooltipPlacement"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TooltipCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the tooltip.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TooltipCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TooltipWrapperCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the tooltip <c>span</c> wrapper of the <c>&lt;button /&gt;</c>.<br />\n            If set, the <c>span</c> wrapper will be rendered no matter the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> text is set or not.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TooltipWrapperCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised after the button is clicked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnValidClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised after the button is clicked and EditContext validation succeeds.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnValidClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInvalidClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised after the button is clicked and EditContext validation fails.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnInvalidClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClickStopPropagation",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Stop onClick-event propagation. Deafult is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClickStopPropagation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClickPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevents the default action for the onclick event. Deafult is <c>false</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClickPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Spinner",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Set state of the embedded <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSpinner\" />.\n            Leave <c>null</c> if you want automated spinner when any of the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers is running.\n            You can set an explicit <c>false</c> constant to disable (override) the spinner automation.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Spinner"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SingleClickProtection",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set <c>false</c> if you want to allow multiple <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers in parallel. Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SingleClickProtection"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Additional attributes to be splatted onto an underlying <c>&lt;button&gt;</c> element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderButton"
        }
      },
      {
        "HashCode": -1261648103,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderButton",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <see href=\"https://getbootstrap.com/docs/5.1/components/placeholders/\">Bootstrap 5 placeholder</see> in form of a button.<br />\n            Derives from <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxButton\" /> (adds <c>placeholder</c> class and changes <c>Enabled</c> default to <c>false</c>).<br />\n            Set the size of the button by using the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderButton.Columns\" /> parameter.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderButton"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Columns",
            "TypeName": "System.String",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Layouts.ILayoutColumnComponent.Columns\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "Columns"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ColumnsSmallUp",
            "TypeName": "System.String",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Layouts.ILayoutColumnComponent.ColumnsSmallUp\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "ColumnsSmallUp"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ColumnsMediumUp",
            "TypeName": "System.String",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Layouts.ILayoutColumnComponent.ColumnsMediumUp\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "ColumnsMediumUp"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ColumnsLargeUp",
            "TypeName": "System.String",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Layouts.ILayoutColumnComponent.ColumnsLargeUp\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "ColumnsLargeUp"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ColumnsExtraLargeUp",
            "TypeName": "System.String",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Layouts.ILayoutColumnComponent.ColumnsExtraLargeUp\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "ColumnsExtraLargeUp"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ColumnsXxlUp",
            "TypeName": "System.String",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Layouts.ILayoutColumnComponent.ColumnsXxlUp\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "ColumnsXxlUp"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text of the button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Button content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "Havit.Blazor.Components.Web.IconBase",
            "Documentation": "\n            <summary>\n            Icon to render into the button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconPlacement",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement?",
            "Documentation": "\n            <summary>\n            Position of the icon within the button. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement.Start\" /> (configurable through <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconPlacement"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ThemeColor?",
            "Documentation": "\n            <summary>\n            Bootstrap button style - theme color.<br />\n            Default is taken from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" /> (<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ThemeColor.None\" /> if not customized).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ButtonSize?",
            "Documentation": "\n            <summary>\n            Button size. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonSize.Regular\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Outline",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            <see href=\"https://getbootstrap.com/docs/5.0/components/buttons/#outline-buttons\">Bootstrap \"outline\" button</see> style.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Outline"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the <c>&lt;button /&gt;</c>.<br />\n            When using <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> you might want to use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" /> to get the desired result.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EditContext",
            "TypeName": "Microsoft.AspNetCore.Components.Forms.EditContext",
            "Documentation": "\n            <summary>\n            Associated <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.EditContext\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EditContext"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FormId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Specifies the form the button belongs to.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FormId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tooltip",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Tooltip text.<br />\n            If set, a <c>span</c> wrapper will be rendered around the <c>&lt;button /&gt;</c>. For most scenarios you will then use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tooltip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TooltipPlacement",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Tooltip placement.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TooltipPlacement"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TooltipCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the tooltip.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TooltipCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TooltipWrapperCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the tooltip <c>span</c> wrapper of the <c>&lt;button /&gt;</c>.<br />\n            If set, the <c>span</c> wrapper will be rendered no matter the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> text is set or not.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TooltipWrapperCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised after the button is clicked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnValidClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised after the button is clicked and EditContext validation succeeds.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnValidClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInvalidClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised after the button is clicked and EditContext validation fails.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnInvalidClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClickStopPropagation",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Stop onClick-event propagation. Deafult is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClickStopPropagation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClickPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevents the default action for the onclick event. Deafult is <c>false</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClickPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Spinner",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Set state of the embedded <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSpinner\" />.\n            Leave <c>null</c> if you want automated spinner when any of the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers is running.\n            You can set an explicit <c>false</c> constant to disable (override) the spinner automation.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Spinner"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SingleClickProtection",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set <c>false</c> if you want to allow multiple <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers in parallel. Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SingleClickProtection"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Additional attributes to be splatted onto an underlying <c>&lt;button&gt;</c> element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderButton",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 2120388183,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderButton.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Button content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxPlaceholderButton"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderButton.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -754420170,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderButton.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Button content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderButton"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderButton.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 304202388,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderContainer",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Optional container for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder\" /> components where you can set the animation and some common properties\n            for all placeholders contained.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxPlaceholderContainer"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.PlaceholderContainerSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderContainer.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Animation",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.PlaceholderAnimation?",
            "Documentation": "\n            <summary>\n            Animation of the placeholders in container.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Animation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.PlaceholderSize?",
            "Documentation": "\n            <summary>\n            Size of the placeholders (propagated to the child <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder\" />s).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ThemeColor?",
            "Documentation": "\n            <summary>\n            Color of the placeholders (propagated to the child <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder\" />s).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Content of the placeholder container (put your <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder\" />s here).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Additional attributes to be splatted onto an underlying HTML element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderContainer"
        }
      },
      {
        "HashCode": -123684479,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderContainer",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Optional container for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder\" /> components where you can set the animation and some common properties\n            for all placeholders contained.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderContainer"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.PlaceholderContainerSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderContainer.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Animation",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.PlaceholderAnimation?",
            "Documentation": "\n            <summary>\n            Animation of the placeholders in container.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Animation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.PlaceholderSize?",
            "Documentation": "\n            <summary>\n            Size of the placeholders (propagated to the child <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder\" />s).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ThemeColor?",
            "Documentation": "\n            <summary>\n            Color of the placeholders (propagated to the child <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder\" />s).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Content of the placeholder container (put your <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder\" />s here).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Additional attributes to be splatted onto an underlying HTML element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderContainer",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1208745399,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderContainer.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Content of the placeholder container (put your <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder\" />s here).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxPlaceholderContainer"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderContainer.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1487415796,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderContainer.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Content of the placeholder container (put your <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder\" />s here).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderContainer"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderContainer.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1333091750,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxProgress",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <see href=\"https://getbootstrap.com/docs/5.1/components/progress/\">Bootstrap 5 Progress</see> component.<br />\n            A wrapping component for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxProgressBar\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxProgress"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Content consisting of one or multiple <c>HxProgressBar</c> components.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS classes for the progress.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Height",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Height of all inner progress bars. Default is <c>15px</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Height"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MinValue",
            "TypeName": "System.Single",
            "Documentation": "\n            <summary>\n            Lowest possible value. Default is <c>0</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MinValue"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxValue",
            "TypeName": "System.Single",
            "Documentation": "\n            <summary>\n            Highest possible value. Default is <c>100</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxValue"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Striped",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If <c>true</c>, applies a stripe via CSS gradient over the progress bar's background color.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Striped"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Animated",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If <c>true</c>, stripes are animated right to left via CSS3 animations, stripes are automatically switched on.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Animated"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxProgress"
        }
      },
      {
        "HashCode": -452421501,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxProgress",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <see href=\"https://getbootstrap.com/docs/5.1/components/progress/\">Bootstrap 5 Progress</see> component.<br />\n            A wrapping component for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxProgressBar\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxProgress"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Content consisting of one or multiple <c>HxProgressBar</c> components.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS classes for the progress.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Height",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Height of all inner progress bars. Default is <c>15px</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Height"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MinValue",
            "TypeName": "System.Single",
            "Documentation": "\n            <summary>\n            Lowest possible value. Default is <c>0</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MinValue"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxValue",
            "TypeName": "System.Single",
            "Documentation": "\n            <summary>\n            Highest possible value. Default is <c>100</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxValue"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Striped",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If <c>true</c>, applies a stripe via CSS gradient over the progress bar's background color.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Striped"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Animated",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If <c>true</c>, stripes are animated right to left via CSS3 animations, stripes are automatically switched on.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Animated"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxProgress",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1764679655,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxProgress.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Content consisting of one or multiple <c>HxProgressBar</c> components.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxProgress"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxProgress.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1068642309,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxProgress.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Content consisting of one or multiple <c>HxProgressBar</c> components.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxProgress"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxProgress.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -206799881,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxProgressBar",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            A progress bar to be placed inside <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxProgress\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxProgressBar"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Inner content of the progress bar.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS classes to be applied to the progress bar.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.Single",
            "Documentation": "\n            <summary>\n            Current value (proportion of the progress bar that is taken up).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MinValue",
            "TypeName": "System.Single?",
            "Documentation": "\n            <summary>\n            Lowest possible value. Default is <c>0</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MinValue"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxValue",
            "TypeName": "System.Single?",
            "Documentation": "\n            <summary>\n            Highest possible value. Default is <c>100</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxValue"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text to be displayed on the progress bar.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ThemeColor?",
            "Documentation": "\n            <summary>\n            Fill (background) color of the progress bar.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Striped",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            If <c>true</c>, applies a stripe via CSS gradient over the progress bar's background color.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Striped"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Animated",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            If <c>true</c>, stripes are animated right to left via CSS3 animations, stripes are automatically switched on.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Animated"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxProgressBar"
        }
      },
      {
        "HashCode": -277621356,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxProgressBar",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            A progress bar to be placed inside <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxProgress\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxProgressBar"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Inner content of the progress bar.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS classes to be applied to the progress bar.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.Single",
            "Documentation": "\n            <summary>\n            Current value (proportion of the progress bar that is taken up).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MinValue",
            "TypeName": "System.Single?",
            "Documentation": "\n            <summary>\n            Lowest possible value. Default is <c>0</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MinValue"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxValue",
            "TypeName": "System.Single?",
            "Documentation": "\n            <summary>\n            Highest possible value. Default is <c>100</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxValue"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text to be displayed on the progress bar.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ThemeColor?",
            "Documentation": "\n            <summary>\n            Fill (background) color of the progress bar.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Striped",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            If <c>true</c>, applies a stripe via CSS gradient over the progress bar's background color.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Striped"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Animated",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            If <c>true</c>, stripes are animated right to left via CSS3 animations, stripes are automatically switched on.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Animated"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxProgressBar",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -836993304,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxProgressBar.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Inner content of the progress bar.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxProgressBar"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxProgressBar.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -457388748,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxProgressBar.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Inner content of the progress bar.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxProgressBar"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxProgressBar.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 2018324115,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxProgressIndicator",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Displays the content of the component as \"in progress\".\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxProgressIndicator"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ProgressIndicatorSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgressIndicator.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InProgress",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Indicates whether the content should be displayed as \"in progress\".\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InProgress"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Delay",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Debounce delay in miliseconds. Default is <c>300 ms</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Delay"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Wrapped content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxProgressIndicator"
        }
      },
      {
        "HashCode": 434754618,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxProgressIndicator",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Displays the content of the component as \"in progress\".\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxProgressIndicator"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ProgressIndicatorSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgressIndicator.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InProgress",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Indicates whether the content should be displayed as \"in progress\".\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InProgress"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Delay",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Debounce delay in miliseconds. Default is <c>300 ms</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Delay"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Wrapped content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxProgressIndicator",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1754477513,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxProgressIndicator.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Wrapped content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxProgressIndicator"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxProgressIndicator.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1637232415,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxProgressIndicator.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Wrapped content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxProgressIndicator"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxProgressIndicator.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -18733124,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxSpinner",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Bootstrap <a href=\"https://getbootstrap.com/docs/5.0/components/spinners/\">Spinner</a> (usually indicates operation in progress).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxSpinner"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Type",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.SpinnerType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Spinner type. Spinner type - Border (default) or Grow.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Type"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.SpinnerSize",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Spinner size. You can also use custom <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSpinner.CssClass\" /> to change the dimensions as needed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ThemeColor",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Spinner color.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class to be applied.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxSpinner"
        }
      },
      {
        "HashCode": 738857604,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxSpinner",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Bootstrap <a href=\"https://getbootstrap.com/docs/5.0/components/spinners/\">Spinner</a> (usually indicates operation in progress).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxSpinner"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Type",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.SpinnerType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Spinner type. Spinner type - Border (default) or Grow.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Type"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.SpinnerSize",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Spinner size. You can also use custom <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSpinner.CssClass\" /> to change the dimensions as needed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ThemeColor",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Spinner color.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class to be applied.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxSpinner",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -333113690,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxTab",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Single tab in <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxTabPanel\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxTab"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Id",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            ID of the tab (<see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTabPanel.ActiveTabId\" />).\n            Autogenerated GUID if not set.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Id"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Title",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Tab title.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Title"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TitleTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Tab title template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TitleTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Content",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Content of the tab.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Content",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Visible",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            <c>True</c> for visible tab. Set <c>false</c> when tab should not be visible.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Visible"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            When <c>null</c> (default), the Enabled value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTab.FormState\" />.\n            When value is <c>false</c>, input is rendered as disabled.\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnTabActivated",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Rised when the tab is activated.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnTabActivated",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnTabDeactivated",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Rised when the tab is deactivated (another tab is activates or when <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxTabPanel\" /> is disposed).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnTabDeactivated",
              "Components.EventCallback": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxTab"
        }
      },
      {
        "HashCode": -1405438364,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxTab",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Single tab in <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxTabPanel\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxTab"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Id",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            ID of the tab (<see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTabPanel.ActiveTabId\" />).\n            Autogenerated GUID if not set.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Id"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Title",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Tab title.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Title"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TitleTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Tab title template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TitleTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Content",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Content of the tab.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Content",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Visible",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            <c>True</c> for visible tab. Set <c>false</c> when tab should not be visible.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Visible"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            When <c>null</c> (default), the Enabled value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTab.FormState\" />.\n            When value is <c>false</c>, input is rendered as disabled.\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnTabActivated",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Rised when the tab is activated.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnTabActivated",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnTabDeactivated",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Rised when the tab is deactivated (another tab is activates or when <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxTabPanel\" /> is disposed).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnTabDeactivated",
              "Components.EventCallback": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxTab",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -833765264,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxTab.TitleTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Tab title template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "TitleTemplate",
            "ParentTag": "HxTab"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxTab.TitleTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -763449468,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxTab.TitleTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Tab title template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "TitleTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxTab"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxTab.TitleTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 760269909,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxTab.Content",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Content of the tab.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Content",
            "ParentTag": "HxTab"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxTab.Content",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1393218136,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxTab.Content",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Content of the tab.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Content",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxTab"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxTab.Content",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1319919543,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxTabPanel",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Container for <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxTab\" />s for easier implementation of tabbed UI.\n            Encapsulates <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxNav\" /> (<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.NavVariant.Tabs\" /> variant) and <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxNavLink\" />s so you don't have to bother with them explicitly.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxTabPanel"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ActiveTabId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            ID of the active tab (@bindable).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ActiveTabId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ActiveTabIdChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Raised when ID of the active tab changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ActiveTabIdChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InitialActiveTabId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            ID of the tab which should be active at the very beginning.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InitialActiveTabId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Tabs.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxTabPanel"
        }
      },
      {
        "HashCode": -1986691894,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxTabPanel",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Container for <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxTab\" />s for easier implementation of tabbed UI.\n            Encapsulates <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxNav\" /> (<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.NavVariant.Tabs\" /> variant) and <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxNavLink\" />s so you don't have to bother with them explicitly.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxTabPanel"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ActiveTabId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            ID of the active tab (@bindable).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ActiveTabId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ActiveTabIdChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Raised when ID of the active tab changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ActiveTabIdChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InitialActiveTabId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            ID of the tab which should be active at the very beginning.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InitialActiveTabId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Tabs.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxTabPanel",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 374594647,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxTabPanel.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Tabs.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxTabPanel"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxTabPanel.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1489739311,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxTabPanel.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Tabs.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxTabPanel"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxTabPanel.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1137236960,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputTags",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Input for entering tags.\n            Does not allow duplicate tags.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxInputTags"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputTagsSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AllowCustomTags",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Indicates whether you are restricted to suggested items only (<c>false</c>).\n            Default is <c>true</c> (you can type your own tags).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AllowCustomTags"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DataProvider",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputTagsDataProviderDelegate",
            "Documentation": "\n            <summary>\n            Set to method providing data for tags' suggestions.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DataProvider",
              "Components.DelegateSignature": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SuggestMinimumLength",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Minimal number of characters to start suggesting. Default is <c>2</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SuggestMinimumLength"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SuggestDelay",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Debounce delay in miliseconds. Default is <c>300 ms</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SuggestDelay"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Delimiters",
            "TypeName": "System.Collections.Generic.List<System.Char>",
            "Documentation": "\n            <summary>\n            Characters, when typed, divide the current input into separate tags.\n            Default is comma, semicolon and space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Delimiters"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowAddButton",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Indicates whether the add-icon (+) should be displayed.\n            Default is <c>false</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowAddButton"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AddButtonText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Optional text for the add-button.\n            Displayed only when there are no tags (the <c>Value</c> is empty).\n            Default is <c>null</c> (none).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AddButtonText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Naked",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Indicates whether a \"naked\" variant should be displayed (no border).\n            Default is <c>false</c>.\n            Consider enabling <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.ShowAddButton\" /> when using <c>Naked</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Naked"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Short hint displayed in the input field before the user enters a value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TagBadgeSettings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.BadgeSettings",
            "Documentation": "\n            <summary>\n            Settings for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxBadge\" /> used to render tags.\n            Default is <c>Color=\"<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ThemeColor.Light\" />\"</c> and <c>TextColor=\"<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ThemeColor.Dark\" />\"</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TagBadgeSettings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelType",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.LabelType?",
            "Documentation": "\n            <inheritdoc cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputSize",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputSize?",
            "Documentation": "\n            <summary>\n            Size of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\t\t\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Hint",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Hint"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HintTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HintTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with wrapping div.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the label.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowValidationMessage",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>false</c>, validation message is not rendered. Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowValidationMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GenerateChip",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GenerateChip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChipTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChipTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\n            When value is <c>false</c>, input is rendered as disabled.\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.Collections.Generic.List<System.String>",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.List<System.String>>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.Collections.Generic.List<System.String>>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputTags"
        }
      },
      {
        "HashCode": 853131944,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputTags",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Input for entering tags.\n            Does not allow duplicate tags.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxInputTags"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputTagsSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AllowCustomTags",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Indicates whether you are restricted to suggested items only (<c>false</c>).\n            Default is <c>true</c> (you can type your own tags).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AllowCustomTags"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DataProvider",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputTagsDataProviderDelegate",
            "Documentation": "\n            <summary>\n            Set to method providing data for tags' suggestions.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DataProvider",
              "Components.DelegateSignature": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SuggestMinimumLength",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Minimal number of characters to start suggesting. Default is <c>2</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SuggestMinimumLength"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SuggestDelay",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Debounce delay in miliseconds. Default is <c>300 ms</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SuggestDelay"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Delimiters",
            "TypeName": "System.Collections.Generic.List<System.Char>",
            "Documentation": "\n            <summary>\n            Characters, when typed, divide the current input into separate tags.\n            Default is comma, semicolon and space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Delimiters"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowAddButton",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Indicates whether the add-icon (+) should be displayed.\n            Default is <c>false</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowAddButton"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AddButtonText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Optional text for the add-button.\n            Displayed only when there are no tags (the <c>Value</c> is empty).\n            Default is <c>null</c> (none).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AddButtonText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Naked",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Indicates whether a \"naked\" variant should be displayed (no border).\n            Default is <c>false</c>.\n            Consider enabling <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.ShowAddButton\" /> when using <c>Naked</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Naked"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Short hint displayed in the input field before the user enters a value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TagBadgeSettings",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.BadgeSettings",
            "Documentation": "\n            <summary>\n            Settings for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxBadge\" /> used to render tags.\n            Default is <c>Color=\"<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ThemeColor.Light\" />\"</c> and <c>TextColor=\"<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ThemeColor.Dark\" />\"</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TagBadgeSettings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelType",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.LabelType?",
            "Documentation": "\n            <inheritdoc cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1\" />\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputSize",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputSize?",
            "Documentation": "\n            <summary>\n            Size of the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\t\t\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Hint",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Hint"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HintTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HintTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with wrapping div.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the label.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowValidationMessage",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>false</c>, validation message is not rendered. Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowValidationMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GenerateChip",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GenerateChip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChipTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChipTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\n            When value is <c>false</c>, input is rendered as disabled.\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.Collections.Generic.List<System.String>",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.List<System.String>>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.Collections.Generic.List<System.String>>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputTags",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -231135980,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputTags.LabelTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "LabelTemplate",
            "ParentTag": "HxInputTags"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputTags.LabelTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 483269988,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputTags.LabelTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Label to render before input (or after input for Checkbox).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "LabelTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxInputTags"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputTags.LabelTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1945779164,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputTags.HintTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HintTemplate",
            "ParentTag": "HxInputTags"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputTags.HintTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1291233378,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputTags.HintTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Hint to render after input as form-text.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HintTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxInputTags"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputTags.HintTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -789593282,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputTags.ChipTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChipTemplate",
            "ParentTag": "HxInputTags"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputTags.ChipTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1062012585,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputTags.ChipTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Chip template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChipTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxInputTags"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputTags.ChipTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1121604744,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxMessenger",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxToastContainer\" /> wrapper for displaying <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxToast\" /> messages dispatched through <see cref=\"T:Havit.Blazor.Components.Web.IHxMessengerService\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxMessenger"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Position",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ToastContainerPosition",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Position of the messages. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ToastContainerPosition.None\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Position"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxMessenger"
        }
      },
      {
        "HashCode": 227279563,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxMessenger",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxToastContainer\" /> wrapper for displaying <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxToast\" /> messages dispatched through <see cref=\"T:Havit.Blazor.Components.Web.IHxMessengerService\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxMessenger"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Position",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ToastContainerPosition",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Position of the messages. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ToastContainerPosition.None\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Position"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxMessenger",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1976945315,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxToast",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <a href=\"https://getbootstrap.com/docs/5.1/components/toasts/\">Bootstrap Toast</a> component. Not intented to be used in user code, use <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxMessenger\" />.\n            After first render component never updates.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxToast"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AutohideDelay",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Delay in miliseconds to automatically hide toast.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AutohideDelay"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Css class to render with toast.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderIcon",
            "TypeName": "Havit.Blazor.Components.Web.IconBase",
            "Documentation": "\n            <summary>\n            Header icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Header text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Header template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ContentText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Content (body) text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ContentText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ContentTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Content (body) template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ContentTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowCloseButton",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Indicates whether to show close button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowCloseButton"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnToastHidden",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Fires when toast is hidden (button or autohide).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnToastHidden",
              "Components.EventCallback": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxToast"
        }
      },
      {
        "HashCode": -1747882920,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxToast",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <a href=\"https://getbootstrap.com/docs/5.1/components/toasts/\">Bootstrap Toast</a> component. Not intented to be used in user code, use <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxMessenger\" />.\n            After first render component never updates.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxToast"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AutohideDelay",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Delay in miliseconds to automatically hide toast.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AutohideDelay"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Css class to render with toast.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderIcon",
            "TypeName": "Havit.Blazor.Components.Web.IconBase",
            "Documentation": "\n            <summary>\n            Header icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Header text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Header template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ContentText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Content (body) text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ContentText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ContentTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Content (body) template.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ContentTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowCloseButton",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Indicates whether to show close button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowCloseButton"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnToastHidden",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Fires when toast is hidden (button or autohide).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnToastHidden",
              "Components.EventCallback": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxToast",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 268085903,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxToast.HeaderTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Header template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HeaderTemplate",
            "ParentTag": "HxToast"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxToast.HeaderTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1968384149,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxToast.HeaderTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Header template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HeaderTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxToast"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxToast.HeaderTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -2108940463,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxToast.ContentTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Content (body) template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ContentTemplate",
            "ParentTag": "HxToast"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxToast.ContentTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1265882816,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxToast.ContentTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Content (body) template.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ContentTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxToast"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxToast.ContentTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -888510960,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxToastContainer",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxToastContainer"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Position",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ToastContainerPosition",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Positioning of the toasts on screen.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Position"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Toasts to display.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxToastContainer"
        }
      },
      {
        "HashCode": -624287571,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxToastContainer",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxToastContainer"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Position",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.ToastContainerPosition",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Positioning of the toasts on screen.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Position"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Toasts to display.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxToastContainer",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1473314718,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxToastContainer.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Toasts to display.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxToastContainer"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxToastContainer.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1882706532,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxToastContainer.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Toasts to display.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxToastContainer"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxToastContainer.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1564047556,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxPopover",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <a href=\"https://getbootstrap.com/docs/5.1/components/popovers/\">Bootstrap Popover</a> component.<br />\n            Rendered as a <c>span</c> wrapper to fully support popovers on disabled elements (see example in <a href=\"https://getbootstrap.com/docs/5.1/components/popovers/#disabled-elements\">Disabled elements</a> in the Bootstrap popover documentation).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxPopover"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Title",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Popover title.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Title"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Content",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Popover content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Content"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placement",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.PopoverPlacement",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Popover placement. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.PopoverPlacement.Right\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placement"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Trigger",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.PopoverTrigger",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Popover trigger(s). Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.PopoverTrigger.Click\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Trigger"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Html",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Allows you to insert HTML. If <c>false</c>, <c>innerText</c> property will be used to insert content into the DOM.\n            Use text if you're worried about XSS attacks.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Html"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Sanitize",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Enable or disable the sanitization. If activated HTML content will be sanitized. <see href=\"https://getbootstrap.com/docs/5.1/getting-started/javascript/#sanitizer\">See the sanitizer section in Bootstrap JavaScript documentation</see>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Sanitize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Offset",
            "TypeName": "(System.Int32 X, System.Int32 Y)",
            "Documentation": "\n            <summary>\n            Offset of the component relative to its target (ChildContent).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Offset"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to add.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "WrapperCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the <c>span</c> wrapper of the child-content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "WrapperCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content to wrap.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnShown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Fired when the content has been made visible to the user and CSS transitions have completed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnShown",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnHidden",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Fired when the content has finished being hidden from the user and CSS transitions have completed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnHidden",
              "Components.EventCallback": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxPopover"
        }
      },
      {
        "HashCode": 1283907727,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxPopover",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <a href=\"https://getbootstrap.com/docs/5.1/components/popovers/\">Bootstrap Popover</a> component.<br />\n            Rendered as a <c>span</c> wrapper to fully support popovers on disabled elements (see example in <a href=\"https://getbootstrap.com/docs/5.1/components/popovers/#disabled-elements\">Disabled elements</a> in the Bootstrap popover documentation).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxPopover"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Title",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Popover title.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Title"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Content",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Popover content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Content"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placement",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.PopoverPlacement",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Popover placement. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.PopoverPlacement.Right\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placement"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Trigger",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.PopoverTrigger",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Popover trigger(s). Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.PopoverTrigger.Click\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Trigger"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Html",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Allows you to insert HTML. If <c>false</c>, <c>innerText</c> property will be used to insert content into the DOM.\n            Use text if you're worried about XSS attacks.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Html"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Sanitize",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Enable or disable the sanitization. If activated HTML content will be sanitized. <see href=\"https://getbootstrap.com/docs/5.1/getting-started/javascript/#sanitizer\">See the sanitizer section in Bootstrap JavaScript documentation</see>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Sanitize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Offset",
            "TypeName": "(System.Int32 X, System.Int32 Y)",
            "Documentation": "\n            <summary>\n            Offset of the component relative to its target (ChildContent).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Offset"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to add.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "WrapperCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the <c>span</c> wrapper of the child-content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "WrapperCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content to wrap.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnShown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Fired when the content has been made visible to the user and CSS transitions have completed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnShown",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnHidden",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Fired when the content has finished being hidden from the user and CSS transitions have completed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnHidden",
              "Components.EventCallback": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxPopover",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 2004150715,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxPopover.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Child content to wrap.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxPopover"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxPopover.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -704909338,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxPopover.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Child content to wrap.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxPopover"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxPopover.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -903233177,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxTooltip",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <a href=\"https://getbootstrap.com/docs/5.0/components/tooltips/\">Bootstrap Tooltip</a> component, activates on hover.<br />\n            Rendered as a <c>span</c> wrapper to fully support tooltips on disabled elements (see example in <a href=\"https://getbootstrap.com/docs/5.0/components/tooltips/#disabled-elements\">Disabled elements</a> in the Bootstrap tooltip documentation).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxTooltip"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Tooltip text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placement",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Tooltip placement. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement.Top\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placement"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Trigger",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.TooltipTrigger",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Tooltip trigger(s). Default is <c><see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.TooltipTrigger.Hover\" /> | <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.TooltipTrigger.Focus\" /></c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Trigger"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Html",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Allows you to insert HTML. If <c>false</c>, <c>innerText</c> property will be used to insert content into the DOM.\n            Use text if you're worried about XSS attacks.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Html"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Sanitize",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Enable or disable the sanitization. If activated HTML content will be sanitized. <see href=\"https://getbootstrap.com/docs/5.1/getting-started/javascript/#sanitizer\">See the sanitizer section in Bootstrap JavaScript documentation</see>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Sanitize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Offset",
            "TypeName": "(System.Int32 X, System.Int32 Y)",
            "Documentation": "\n            <summary>\n            Offset of the component relative to its target (ChildContent).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Offset"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to add.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "WrapperCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the <c>span</c> wrapper of the child-content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "WrapperCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content to wrap.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnShown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Fired when the content has been made visible to the user and CSS transitions have completed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnShown",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnHidden",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Fired when the content has finished being hidden from the user and CSS transitions have completed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnHidden",
              "Components.EventCallback": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxTooltip"
        }
      },
      {
        "HashCode": -1571739201,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxTooltip",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <a href=\"https://getbootstrap.com/docs/5.0/components/tooltips/\">Bootstrap Tooltip</a> component, activates on hover.<br />\n            Rendered as a <c>span</c> wrapper to fully support tooltips on disabled elements (see example in <a href=\"https://getbootstrap.com/docs/5.0/components/tooltips/#disabled-elements\">Disabled elements</a> in the Bootstrap tooltip documentation).\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxTooltip"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Tooltip text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placement",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Tooltip placement. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement.Top\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placement"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Trigger",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.TooltipTrigger",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Tooltip trigger(s). Default is <c><see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.TooltipTrigger.Hover\" /> | <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.TooltipTrigger.Focus\" /></c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Trigger"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Html",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Allows you to insert HTML. If <c>false</c>, <c>innerText</c> property will be used to insert content into the DOM.\n            Use text if you're worried about XSS attacks.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Html"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Sanitize",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Enable or disable the sanitization. If activated HTML content will be sanitized. <see href=\"https://getbootstrap.com/docs/5.1/getting-started/javascript/#sanitizer\">See the sanitizer section in Bootstrap JavaScript documentation</see>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Sanitize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Offset",
            "TypeName": "(System.Int32 X, System.Int32 Y)",
            "Documentation": "\n            <summary>\n            Offset of the component relative to its target (ChildContent).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Offset"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to add.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "WrapperCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom CSS class to render with the <c>span</c> wrapper of the child-content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "WrapperCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content to wrap.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnShown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Fired when the content has been made visible to the user and CSS transitions have completed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnShown",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnHidden",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Fired when the content has finished being hidden from the user and CSS transitions have completed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnHidden",
              "Components.EventCallback": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxTooltip",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 908397797,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxTooltip.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Child content to wrap.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxTooltip"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxTooltip.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -769887346,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxTooltip.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Child content to wrap.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxTooltip"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxTooltip.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1440372471,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxTreeView<TItem>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Component to display hierarchy data structure.\n            </summary>\n            <typeparam name=\"TItem\">Type of tree data item.</typeparam>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxTreeView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TItem",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.HxTreeView<TItem> component.",
            "Metadata": {
              "Common.PropertyName": "TItem",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Items",
            "TypeName": "System.Collections.Generic.IEnumerable<TItem>",
            "Documentation": "\n            <summary>\n            Collection of hierarchy data to display.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Items",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedItem",
            "TypeName": "TItem",
            "Documentation": "\n            <summary>\n            Selected data item.\n            </summary>\t\t\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedItem",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedItemChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TItem>",
            "Documentation": "\n            <summary>\n            Event fires when selected data item changes.\n            </summary>\t\t\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedItemChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemTitleSelector",
            "TypeName": "System.Func<TItem, System.String>",
            "Documentation": "\n            <summary>\n            Selector to display item title from data item.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemTitleSelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemIconSelector",
            "TypeName": "System.Func<TItem, Havit.Blazor.Components.Web.IconBase>",
            "Documentation": "\n            <summary>\n            Selector to display icon from data item.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemIconSelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemChildrenSelector",
            "TypeName": "System.Func<TItem, System.Collections.Generic.IEnumerable<TItem>>",
            "Documentation": "\n            <summary>\n            Selector to display children collection for current data item. Children collection should have same type as current item.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemChildrenSelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<TItem>",
            "Documentation": "\n            <summary>\n            Template for the item content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class to be applied.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxTreeView<TItem>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": 520687787,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxTreeView<TItem>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Component to display hierarchy data structure.\n            </summary>\n            <typeparam name=\"TItem\">Type of tree data item.</typeparam>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxTreeView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TItem",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.HxTreeView<TItem> component.",
            "Metadata": {
              "Common.PropertyName": "TItem",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Items",
            "TypeName": "System.Collections.Generic.IEnumerable<TItem>",
            "Documentation": "\n            <summary>\n            Collection of hierarchy data to display.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Items",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedItem",
            "TypeName": "TItem",
            "Documentation": "\n            <summary>\n            Selected data item.\n            </summary>\t\t\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedItem",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedItemChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TItem>",
            "Documentation": "\n            <summary>\n            Event fires when selected data item changes.\n            </summary>\t\t\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedItemChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemTitleSelector",
            "TypeName": "System.Func<TItem, System.String>",
            "Documentation": "\n            <summary>\n            Selector to display item title from data item.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemTitleSelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemIconSelector",
            "TypeName": "System.Func<TItem, Havit.Blazor.Components.Web.IconBase>",
            "Documentation": "\n            <summary>\n            Selector to display icon from data item.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemIconSelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemChildrenSelector",
            "TypeName": "System.Func<TItem, System.Collections.Generic.IEnumerable<TItem>>",
            "Documentation": "\n            <summary>\n            Selector to display children collection for current data item. Children collection should have same type as current item.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemChildrenSelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<TItem>",
            "Documentation": "\n            <summary>\n            Template for the item content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional CSS class to be applied.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxTreeView<TItem>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -898998650,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxTreeView<TItem>.ItemTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Template for the item content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemTemplate",
            "ParentTag": "HxTreeView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ItemTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxTreeView<TItem>.ItemTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 743284909,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxTreeView<TItem>.ItemTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Template for the item content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.HxTreeView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ItemTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxTreeView<TItem>.ItemTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -685994422,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInput",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxAutosuggestInput"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInputInput",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Metadata": {
              "Common.PropertyName": "OnInputInput",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInputFocus",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Metadata": {
              "Common.PropertyName": "OnInputFocus",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInputBlur",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Metadata": {
              "Common.PropertyName": "OnInputBlur",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInputMouseDown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Metadata": {
              "Common.PropertyName": "OnInputMouseDown",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputId",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "InputId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EnabledEffective",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "EnabledEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DropdownOffset",
            "TypeName": "(System.Int32 Skidding, System.Int32 Distance)",
            "Documentation": "\n            <summary>\n            Offset between the dropdown and the input.\n            <see href=\"https://popper.js.org/docs/v2/modifiers/offset/#options\" />\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DropdownOffset"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInput"
        }
      },
      {
        "HashCode": 1254712401,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInput",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInput"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInputInput",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Metadata": {
              "Common.PropertyName": "OnInputInput",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInputFocus",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Metadata": {
              "Common.PropertyName": "OnInputFocus",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInputBlur",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Metadata": {
              "Common.PropertyName": "OnInputBlur",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInputMouseDown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Metadata": {
              "Common.PropertyName": "OnInputMouseDown",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputId",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "InputId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EnabledEffective",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "EnabledEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DropdownOffset",
            "TypeName": "(System.Int32 Skidding, System.Int32 Distance)",
            "Documentation": "\n            <summary>\n            Offset between the dropdown and the input.\n            <see href=\"https://popper.js.org/docs/v2/modifiers/offset/#options\" />\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DropdownOffset"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInput",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1622512971,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxAutosuggestInternal"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TItem",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TItem",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DataProvider",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.AutosuggestDataProviderDelegate<TItem>",
            "Metadata": {
              "Common.PropertyName": "DataProvider",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueSelector",
            "TypeName": "System.Func<TItem, TValue>",
            "Documentation": "\n            <summary>\n            Selects value from item.\n            Not required when TValue is same as TItemTime.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueSelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextSelector",
            "TypeName": "System.Func<TItem, System.String>",
            "Documentation": "\n            <summary>\n            Selects text to display from item.\n            When not set ToString() is used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextSelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<TItem>",
            "Documentation": "\n            <summary>\n            Template to display item.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EmptyTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Template to display when items collection is empty\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EmptyTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemFromValueResolver",
            "TypeName": "System.Func<TValue, System.Threading.Tasks.Task<TItem>>",
            "Documentation": "\n            <summary>\n            Gets item from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal`2.Value\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemFromValueResolver",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MinimumLengthEffective",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Minimal number of characters to start suggesting. Default is <c>2</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MinimumLengthEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Short hint displayed in the input field before the user enters a value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DelayEffective",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Debounce delay in miliseconds. Default is <c>300 ms</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DelayEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputCssClass",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "InputCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputId",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "InputId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SearchIconEffective",
            "TypeName": "Havit.Blazor.Components.Web.IconBase",
            "Metadata": {
              "Common.PropertyName": "SearchIconEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ClearIconEffective",
            "TypeName": "Havit.Blazor.Components.Web.IconBase",
            "Metadata": {
              "Common.PropertyName": "ClearIconEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EnabledEffective",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "EnabledEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelTypeEffective",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.LabelType",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "LabelTypeEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FormValueComponent",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent",
            "Metadata": {
              "Common.PropertyName": "FormValueComponent"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DropdownOffset",
            "TypeName": "(System.Int32 Skidding, System.Int32 Distance)",
            "Documentation": "\n            <summary>\n            Offset between the dropdown and the input.\n            <see href=\"https://popper.js.org/docs/v2/modifiers/offset/#options\" />\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DropdownOffset"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": -675359461,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TItem",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TItem",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DataProvider",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.AutosuggestDataProviderDelegate<TItem>",
            "Metadata": {
              "Common.PropertyName": "DataProvider",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueSelector",
            "TypeName": "System.Func<TItem, TValue>",
            "Documentation": "\n            <summary>\n            Selects value from item.\n            Not required when TValue is same as TItemTime.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueSelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextSelector",
            "TypeName": "System.Func<TItem, System.String>",
            "Documentation": "\n            <summary>\n            Selects text to display from item.\n            When not set ToString() is used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextSelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<TItem>",
            "Documentation": "\n            <summary>\n            Template to display item.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EmptyTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Template to display when items collection is empty\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EmptyTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemFromValueResolver",
            "TypeName": "System.Func<TValue, System.Threading.Tasks.Task<TItem>>",
            "Documentation": "\n            <summary>\n            Gets item from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal`2.Value\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemFromValueResolver",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MinimumLengthEffective",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Minimal number of characters to start suggesting. Default is <c>2</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MinimumLengthEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Short hint displayed in the input field before the user enters a value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DelayEffective",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Debounce delay in miliseconds. Default is <c>300 ms</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DelayEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputCssClass",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "InputCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputId",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "InputId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SearchIconEffective",
            "TypeName": "Havit.Blazor.Components.Web.IconBase",
            "Metadata": {
              "Common.PropertyName": "SearchIconEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ClearIconEffective",
            "TypeName": "Havit.Blazor.Components.Web.IconBase",
            "Metadata": {
              "Common.PropertyName": "ClearIconEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EnabledEffective",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "EnabledEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelTypeEffective",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.LabelType",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "LabelTypeEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FormValueComponent",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent",
            "Metadata": {
              "Common.PropertyName": "FormValueComponent"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DropdownOffset",
            "TypeName": "(System.Int32 Skidding, System.Int32 Distance)",
            "Documentation": "\n            <summary>\n            Offset between the dropdown and the input.\n            <see href=\"https://popper.js.org/docs/v2/modifiers/offset/#options\" />\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DropdownOffset"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1833426514,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue>.ItemTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Template to display item.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemTemplate",
            "ParentTag": "HxAutosuggestInternal"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ItemTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue>.ItemTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -508275306,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue>.ItemTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Template to display item.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ItemTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue>.ItemTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1098594619,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue>.EmptyTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Template to display when items collection is empty\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "EmptyTemplate",
            "ParentTag": "HxAutosuggestInternal"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue>.EmptyTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -546084186,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue>.EmptyTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Template to display when items collection is empty\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "EmptyTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue>.EmptyTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -2122214864,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestItems<TItem>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxAutosuggestItems"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TItem",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestItems<TItem> component.",
            "Metadata": {
              "Common.PropertyName": "TItem",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Items",
            "TypeName": "System.Collections.Generic.List<TItem>",
            "Metadata": {
              "Common.PropertyName": "Items",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnItemClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TItem>",
            "Metadata": {
              "Common.PropertyName": "OnItemClick",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<TItem>",
            "Metadata": {
              "Common.PropertyName": "ItemTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EmptyTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "EmptyTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestItems<TItem>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": 1163555618,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestItems<TItem>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestItems"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TItem",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestItems<TItem> component.",
            "Metadata": {
              "Common.PropertyName": "TItem",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Items",
            "TypeName": "System.Collections.Generic.List<TItem>",
            "Metadata": {
              "Common.PropertyName": "Items",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnItemClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TItem>",
            "Metadata": {
              "Common.PropertyName": "OnItemClick",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<TItem>",
            "Metadata": {
              "Common.PropertyName": "ItemTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EmptyTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "EmptyTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestItems<TItem>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 745076923,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestItems<TItem>.ItemTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemTemplate",
            "ParentTag": "HxAutosuggestItems"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ItemTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestItems<TItem>.ItemTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -2093177350,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestItems<TItem>.ItemTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestItems"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ItemTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestItems<TItem>.ItemTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -368147956,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestItems<TItem>.EmptyTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "EmptyTemplate",
            "ParentTag": "HxAutosuggestItems"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestItems<TItem>.EmptyTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1770883659,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestItems<TItem>.EmptyTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "EmptyTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestItems"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestItems<TItem>.EmptyTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1848840907,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxFormValueComponentRenderer",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxFormValueComponentRenderer"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "FormValueComponent",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent",
            "Documentation": "\n            <summary>\n            Values for component renderer.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FormValueComponent"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxFormValueComponentRenderer"
        }
      },
      {
        "HashCode": 916688942,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxFormValueComponentRenderer",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxFormValueComponentRenderer"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "FormValueComponent",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent",
            "Documentation": "\n            <summary>\n            Values for component renderer.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FormValueComponent"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxFormValueComponentRenderer",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 599510420,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxFormValueComponentRenderer_Label",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxFormValueComponentRenderer_Label"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "FormValueComponent",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent",
            "Metadata": {
              "Common.PropertyName": "FormValueComponent"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxFormValueComponentRenderer_Label"
        }
      },
      {
        "HashCode": -150970326,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxFormValueComponentRenderer_Label",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxFormValueComponentRenderer_Label"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "FormValueComponent",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent",
            "Metadata": {
              "Common.PropertyName": "FormValueComponent"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxFormValueComponentRenderer_Label",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 614631576,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal<TValue>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxInputDateInternal"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputId",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "InputId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputCssClass",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "InputCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EnabledEffective",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "EnabledEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowPredefinedDatesEffective",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "ShowPredefinedDatesEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PredefinedDatesEffective",
            "TypeName": "System.Collections.Generic.IEnumerable<Havit.Blazor.Components.Web.Bootstrap.InputDatePredefinedDatesItem>",
            "Metadata": {
              "Common.PropertyName": "PredefinedDatesEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ParsingErrorMessageEffective",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "ParsingErrorMessageEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputSizeEffective",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputSize",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "InputSizeEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CalendarIconEffective",
            "TypeName": "Havit.Blazor.Components.Web.IconBase",
            "Metadata": {
              "Common.PropertyName": "CalendarIconEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowCalendarButtonsEffective",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "ShowCalendarButtonsEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MinDateEffective",
            "TypeName": "System.DateTime",
            "Metadata": {
              "Common.PropertyName": "MinDateEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxDateEffective",
            "TypeName": "System.DateTime",
            "Metadata": {
              "Common.PropertyName": "MaxDateEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CalendarDateCustomizationProviderEffective",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.CalendarDateCustomizationProviderDelegate",
            "Metadata": {
              "Common.PropertyName": "CalendarDateCustomizationProviderEffective",
              "Components.DelegateSignature": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelTypeEffective",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.LabelType",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "LabelTypeEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FormValueComponent",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent",
            "Metadata": {
              "Common.PropertyName": "FormValueComponent"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal<TValue>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": -1082667515,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal<TValue>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputId",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "InputId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputCssClass",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "InputCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EnabledEffective",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "EnabledEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowPredefinedDatesEffective",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "ShowPredefinedDatesEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PredefinedDatesEffective",
            "TypeName": "System.Collections.Generic.IEnumerable<Havit.Blazor.Components.Web.Bootstrap.InputDatePredefinedDatesItem>",
            "Metadata": {
              "Common.PropertyName": "PredefinedDatesEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ParsingErrorMessageEffective",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "ParsingErrorMessageEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputSizeEffective",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputSize",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "InputSizeEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CalendarIconEffective",
            "TypeName": "Havit.Blazor.Components.Web.IconBase",
            "Metadata": {
              "Common.PropertyName": "CalendarIconEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowCalendarButtonsEffective",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "ShowCalendarButtonsEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MinDateEffective",
            "TypeName": "System.DateTime",
            "Metadata": {
              "Common.PropertyName": "MinDateEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxDateEffective",
            "TypeName": "System.DateTime",
            "Metadata": {
              "Common.PropertyName": "MaxDateEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CalendarDateCustomizationProviderEffective",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.CalendarDateCustomizationProviderDelegate",
            "Metadata": {
              "Common.PropertyName": "CalendarDateCustomizationProviderEffective",
              "Components.DelegateSignature": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelTypeEffective",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.LabelType",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "LabelTypeEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FormValueComponent",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent",
            "Metadata": {
              "Common.PropertyName": "FormValueComponent"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal<TValue>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -669264714,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateRangeInternal",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxInputDateRangeInternal"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "FromInputId",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "FromInputId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputCssClass",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "InputCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputSizeEffective",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputSize",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "InputSizeEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EnabledEffective",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "EnabledEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowValidationMessage",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "ShowValidationMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowPredefinedDateRangesEffective",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "ShowPredefinedDateRangesEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PredefinedDateRangesEffective",
            "TypeName": "System.Collections.Generic.IEnumerable<Havit.Blazor.Components.Web.Bootstrap.InputDateRangePredefinedRangesItem>",
            "Metadata": {
              "Common.PropertyName": "PredefinedDateRangesEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FromParsingErrorMessageEffective",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "FromParsingErrorMessageEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ToParsingErrorMessageEffective",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "ToParsingErrorMessageEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowCalendarButtonsEffective",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "ShowCalendarButtonsEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MinDateEffective",
            "TypeName": "System.DateTime",
            "Metadata": {
              "Common.PropertyName": "MinDateEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxDateEffective",
            "TypeName": "System.DateTime",
            "Metadata": {
              "Common.PropertyName": "MaxDateEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CalendarDateCustomizationProviderEffective",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.CalendarDateCustomizationProviderDelegate",
            "Metadata": {
              "Common.PropertyName": "CalendarDateCustomizationProviderEffective",
              "Components.DelegateSignature": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.DateTimeRange",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.Bootstrap.DateTimeRange>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<Havit.Blazor.Components.Web.Bootstrap.DateTimeRange>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateRangeInternal"
        }
      },
      {
        "HashCode": 1956997210,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateRangeInternal",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateRangeInternal"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "FromInputId",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "FromInputId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputCssClass",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "InputCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputSizeEffective",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputSize",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "InputSizeEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EnabledEffective",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "EnabledEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowValidationMessage",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "ShowValidationMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowPredefinedDateRangesEffective",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "ShowPredefinedDateRangesEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PredefinedDateRangesEffective",
            "TypeName": "System.Collections.Generic.IEnumerable<Havit.Blazor.Components.Web.Bootstrap.InputDateRangePredefinedRangesItem>",
            "Metadata": {
              "Common.PropertyName": "PredefinedDateRangesEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FromParsingErrorMessageEffective",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "FromParsingErrorMessageEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ToParsingErrorMessageEffective",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "ToParsingErrorMessageEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowCalendarButtonsEffective",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "ShowCalendarButtonsEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MinDateEffective",
            "TypeName": "System.DateTime",
            "Metadata": {
              "Common.PropertyName": "MinDateEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxDateEffective",
            "TypeName": "System.DateTime",
            "Metadata": {
              "Common.PropertyName": "MaxDateEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CalendarDateCustomizationProviderEffective",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.CalendarDateCustomizationProviderDelegate",
            "Metadata": {
              "Common.PropertyName": "CalendarDateCustomizationProviderEffective",
              "Components.DelegateSignature": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.DateTimeRange",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.Bootstrap.DateTimeRange>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<Havit.Blazor.Components.Web.Bootstrap.DateTimeRange>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateRangeInternal",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1631357885,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxNavLinkInternal",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\" /> variation which adds <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxNavLinkInternal.OnClick\" /> and related stuff.\n            </summary>\n            <remarks>\n            <a href=\"https://github.com/dotnet/aspnetcore/issues/18460#issuecomment-577175682\">https://github.com/dotnet/aspnetcore/issues/18460#issuecomment-577175682</a>.\n            </remarks>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxNavLinkInternal"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised when the item is clicked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ActiveClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the CSS class name applied to the NavLink when the\n            current route matches the NavLink href.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ActiveClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be added to the generated\n            <c>a</c> element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Gets or sets the child content of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Match",
            "TypeName": "Microsoft.AspNetCore.Components.Routing.NavLinkMatch",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Gets or sets a value representing the URL matching behavior.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Match"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxNavLinkInternal"
        }
      },
      {
        "HashCode": 1527997429,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxNavLinkInternal",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\" /> variation which adds <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxNavLinkInternal.OnClick\" /> and related stuff.\n            </summary>\n            <remarks>\n            <a href=\"https://github.com/dotnet/aspnetcore/issues/18460#issuecomment-577175682\">https://github.com/dotnet/aspnetcore/issues/18460#issuecomment-577175682</a>.\n            </remarks>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxNavLinkInternal"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised when the item is clicked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ActiveClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the CSS class name applied to the NavLink when the\n            current route matches the NavLink href.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ActiveClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be added to the generated\n            <c>a</c> element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Gets or sets the child content of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Match",
            "TypeName": "Microsoft.AspNetCore.Components.Routing.NavLinkMatch",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Gets or sets a value representing the URL matching behavior.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Match"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxNavLinkInternal",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 2077640602,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxNavLinkInternal.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Gets or sets the child content of the component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxNavLinkInternal"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxNavLinkInternal.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1633109012,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxNavLinkInternal.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Gets or sets the child content of the component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxNavLinkInternal"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxNavLinkInternal.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 685425349,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsAutosuggestInput",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxInputTagsAutosuggestInput"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInputInput",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Metadata": {
              "Common.PropertyName": "OnInputInput",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInputFocus",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Metadata": {
              "Common.PropertyName": "OnInputFocus",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInputBlur",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Metadata": {
              "Common.PropertyName": "OnInputBlur",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInputMouseDown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Metadata": {
              "Common.PropertyName": "OnInputMouseDown",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInputKeyDown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Metadata": {
              "Common.PropertyName": "OnInputKeyDown",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputId",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "InputId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EnabledEffective",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "EnabledEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Offset",
            "TypeName": "(System.Int32 X, System.Int32 Y)",
            "Documentation": "\n            <summary>\n            Offset between dropdown input and dropdown menu\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Offset"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsAutosuggestInput"
        }
      },
      {
        "HashCode": -1076266784,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsAutosuggestInput",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsAutosuggestInput"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInputInput",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Metadata": {
              "Common.PropertyName": "OnInputInput",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInputFocus",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Metadata": {
              "Common.PropertyName": "OnInputFocus",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInputBlur",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Metadata": {
              "Common.PropertyName": "OnInputBlur",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInputMouseDown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Metadata": {
              "Common.PropertyName": "OnInputMouseDown",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInputKeyDown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Metadata": {
              "Common.PropertyName": "OnInputKeyDown",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputId",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "InputId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EnabledEffective",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "EnabledEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Offset",
            "TypeName": "(System.Int32 X, System.Int32 Y)",
            "Documentation": "\n            <summary>\n            Offset between dropdown input and dropdown menu\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Offset"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsAutosuggestInput",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 567709037,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Internal implementation for <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputTags\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxInputTagsInternal"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AllowCustomTags",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Indicates whether you are restricted to suggested items only (<c>false</c>).\n            Default is <c>true</c> (you can type your own tags).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AllowCustomTags"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.Collections.Generic.List<System.String>",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.List<System.String>>",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DataProvider",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputTagsDataProviderDelegate",
            "Metadata": {
              "Common.PropertyName": "DataProvider",
              "Components.DelegateSignature": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SuggestMinimumLengthEffective",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Minimal number of characters to start suggesting. Default is <c>2</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SuggestMinimumLengthEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DelimitersEffective",
            "TypeName": "System.Collections.Generic.List<System.Char>",
            "Documentation": "\n            <summary>\n            Characters, when typed, divide the current input into separate tags.\n            Default is comma, semicolon and space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DelimitersEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowAddButtonEffective",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Indicates whether the add-icon (+) should be displayed.\n            Default is <c>false</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowAddButtonEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AddButtonText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Optional text for the add-button.\n            Displayed only when there are no tags (the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.Value\" /> is empty).\n            Default is <c>null</c> (none).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AddButtonText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Naked",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Indicates whether a \"naked\" variant should be displayed (no border).\n            Default is <c>false</c>.\n            Consider enabling <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.ShowAddButton\" /> when using <c>Naked</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Naked"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Short hint displayed in the input field before the user enters a value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TagBadgeSettingsEffective",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.BadgeSettings",
            "Documentation": "\n            <summary>\n            Settings for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxBadge\" /> used to render tags.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TagBadgeSettingsEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SuggestDelayEffective",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "SuggestDelayEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CoreFormControlCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            CSS of the wrapping .form-control container (corresponds to InputCssClass on regular inputs)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CoreFormControlCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputId",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "InputId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EnabledEffective",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "EnabledEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelTypeEffective",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.LabelType",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "LabelTypeEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputSizeEffective",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputSize",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "InputSizeEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputOffset",
            "TypeName": "(System.Int32 X, System.Int32 Y)",
            "Documentation": "\n            <summary>\n            Offset between dropdown input and dropdown menu\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputOffset"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Any additional CSS class to apply.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal"
        }
      },
      {
        "HashCode": 392208821,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "\n            <summary>\n            Internal implementation for <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputTags\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AllowCustomTags",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Indicates whether you are restricted to suggested items only (<c>false</c>).\n            Default is <c>true</c> (you can type your own tags).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AllowCustomTags"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.Collections.Generic.List<System.String>",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.List<System.String>>",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DataProvider",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputTagsDataProviderDelegate",
            "Metadata": {
              "Common.PropertyName": "DataProvider",
              "Components.DelegateSignature": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SuggestMinimumLengthEffective",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Minimal number of characters to start suggesting. Default is <c>2</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SuggestMinimumLengthEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DelimitersEffective",
            "TypeName": "System.Collections.Generic.List<System.Char>",
            "Documentation": "\n            <summary>\n            Characters, when typed, divide the current input into separate tags.\n            Default is comma, semicolon and space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DelimitersEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowAddButtonEffective",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Indicates whether the add-icon (+) should be displayed.\n            Default is <c>false</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowAddButtonEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AddButtonText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Optional text for the add-button.\n            Displayed only when there are no tags (the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.Value\" /> is empty).\n            Default is <c>null</c> (none).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AddButtonText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Naked",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Indicates whether a \"naked\" variant should be displayed (no border).\n            Default is <c>false</c>.\n            Consider enabling <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.ShowAddButton\" /> when using <c>Naked</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Naked"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Short hint displayed in the input field before the user enters a value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TagBadgeSettingsEffective",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.BadgeSettings",
            "Documentation": "\n            <summary>\n            Settings for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxBadge\" /> used to render tags.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TagBadgeSettingsEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SuggestDelayEffective",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "SuggestDelayEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CoreFormControlCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            CSS of the wrapping .form-control container (corresponds to InputCssClass on regular inputs)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CoreFormControlCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputId",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "InputId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EnabledEffective",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "EnabledEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelTypeEffective",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.LabelType",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "LabelTypeEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputSizeEffective",
            "TypeName": "Havit.Blazor.Components.Web.Bootstrap.InputSize",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "InputSizeEffective"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputOffset",
            "TypeName": "(System.Int32 X, System.Int32 Y)",
            "Documentation": "\n            <summary>\n            Offset between dropdown input and dropdown menu\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputOffset"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Any additional CSS class to apply.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -266924729,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxTreeViewItemInternal<TItem>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxTreeViewItemInternal"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TItem",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.Internal.HxTreeViewItemInternal<TItem> component.",
            "Metadata": {
              "Common.PropertyName": "TItem",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Item",
            "TypeName": "TItem",
            "Metadata": {
              "Common.PropertyName": "Item",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnItemSelected",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TItem>",
            "Metadata": {
              "Common.PropertyName": "OnItemSelected",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsExpanded",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "IsExpanded"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TitleSelector",
            "TypeName": "System.Func<TItem, System.String>",
            "Metadata": {
              "Common.PropertyName": "TitleSelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconSelector",
            "TypeName": "System.Func<TItem, Havit.Blazor.Components.Web.IconBase>",
            "Metadata": {
              "Common.PropertyName": "IconSelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildrenSelector",
            "TypeName": "System.Func<TItem, System.Collections.Generic.IEnumerable<TItem>>",
            "Metadata": {
              "Common.PropertyName": "ChildrenSelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Level",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "Level"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ContentTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<TItem>",
            "Metadata": {
              "Common.PropertyName": "ContentTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxTreeViewItemInternal<TItem>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": -858414448,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxTreeViewItemInternal<TItem>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxTreeViewItemInternal"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TItem",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.Internal.HxTreeViewItemInternal<TItem> component.",
            "Metadata": {
              "Common.PropertyName": "TItem",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Item",
            "TypeName": "TItem",
            "Metadata": {
              "Common.PropertyName": "Item",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnItemSelected",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TItem>",
            "Metadata": {
              "Common.PropertyName": "OnItemSelected",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsExpanded",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "IsExpanded"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TitleSelector",
            "TypeName": "System.Func<TItem, System.String>",
            "Metadata": {
              "Common.PropertyName": "TitleSelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconSelector",
            "TypeName": "System.Func<TItem, Havit.Blazor.Components.Web.IconBase>",
            "Metadata": {
              "Common.PropertyName": "IconSelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildrenSelector",
            "TypeName": "System.Func<TItem, System.Collections.Generic.IEnumerable<TItem>>",
            "Metadata": {
              "Common.PropertyName": "ChildrenSelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Level",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "Level"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ContentTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<TItem>",
            "Metadata": {
              "Common.PropertyName": "ContentTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxTreeViewItemInternal<TItem>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1622896055,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxTreeViewItemInternal<TItem>.ContentTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ContentTemplate",
            "ParentTag": "HxTreeViewItemInternal"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ContentTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxTreeViewItemInternal<TItem>.ContentTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1186434142,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxTreeViewItemInternal<TItem>.ContentTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ContentTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxTreeViewItemInternal"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ContentTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxTreeViewItemInternal<TItem>.ContentTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -423206198,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.HxInputFileCore",
        "AssemblyName": "Havit.Blazor.Components.Web",
        "Documentation": "\n            <summary>\n            Raw component extending <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputFile\" /> with direct upload.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxInputFileCore"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.InputFileCoreSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.HxInputFileCore.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UploadUrl",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            URL of the server endpoint receiving the files.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UploadUrl"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnProgress",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.UploadProgressEventArgs>",
            "Documentation": "\n            <summary>\n            Raised during running file upload (the frequency depends on browser implementation).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnProgress",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnFileUploaded",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.FileUploadedEventArgs>",
            "Documentation": "\n            <summary>\n            Raised after a file is uploaded (for every single file separately).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnFileUploaded",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnUploadCompleted",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.UploadCompletedEventArgs>",
            "Documentation": "\n            <summary>\n            Raised when all files are uploaded (after all <see cref=\"P:Havit.Blazor.Components.Web.HxInputFileCore.OnFileUploaded\" /> events).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnUploadCompleted",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Multiple",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Single <c>false</c> or multiple <c>true</c> files upload.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Multiple"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Accept",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Takes as its value a comma-separated list of one or more file types, or unique file type specifiers, describing which file types to allow.\n            <see href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept\">MDN Web Docs - HTML attribute: accept</see>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Accept"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxFileSize",
            "TypeName": "System.Int64?",
            "Documentation": "\n            <summary>\n            The maximum files size in bytes.\n            When exceeded, the <see cref=\"P:Havit.Blazor.Components.Web.HxInputFileCore.OnFileUploaded\" /> returns <c>413-RequestEntityTooLarge</c> as <see cref=\"P:Havit.Blazor.Components.Web.FileUploadedEventArgs.ResponseStatus\" />.\n            Default is <c>long.MaxValue</c> (unlimited).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxFileSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxParallelUploads",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Maximum number of concurrent uploads. Default is <c>6</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxParallelUploads"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Id",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Input element id.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Id"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnChange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>",
            "Documentation": "\n            <summary>\n            Gets or sets the event callback that will be invoked when the collection of selected files changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnChange",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.HxInputFileCore"
        }
      },
      {
        "HashCode": 936292832,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.HxInputFileCore",
        "AssemblyName": "Havit.Blazor.Components.Web",
        "Documentation": "\n            <summary>\n            Raw component extending <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputFile\" /> with direct upload.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.HxInputFileCore"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Settings",
            "TypeName": "Havit.Blazor.Components.Web.InputFileCoreSettings",
            "Documentation": "\n            <summary>\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.HxInputFileCore.Defaults\" />, overriden by individual parameters).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Settings"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UploadUrl",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            URL of the server endpoint receiving the files.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UploadUrl"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnProgress",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.UploadProgressEventArgs>",
            "Documentation": "\n            <summary>\n            Raised during running file upload (the frequency depends on browser implementation).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnProgress",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnFileUploaded",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.FileUploadedEventArgs>",
            "Documentation": "\n            <summary>\n            Raised after a file is uploaded (for every single file separately).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnFileUploaded",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnUploadCompleted",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.UploadCompletedEventArgs>",
            "Documentation": "\n            <summary>\n            Raised when all files are uploaded (after all <see cref=\"P:Havit.Blazor.Components.Web.HxInputFileCore.OnFileUploaded\" /> events).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnUploadCompleted",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Multiple",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Single <c>false</c> or multiple <c>true</c> files upload.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Multiple"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Accept",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Takes as its value a comma-separated list of one or more file types, or unique file type specifiers, describing which file types to allow.\n            <see href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept\">MDN Web Docs - HTML attribute: accept</see>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Accept"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxFileSize",
            "TypeName": "System.Int64?",
            "Documentation": "\n            <summary>\n            The maximum files size in bytes.\n            When exceeded, the <see cref=\"P:Havit.Blazor.Components.Web.HxInputFileCore.OnFileUploaded\" /> returns <c>413-RequestEntityTooLarge</c> as <see cref=\"P:Havit.Blazor.Components.Web.FileUploadedEventArgs.ResponseStatus\" />.\n            Default is <c>long.MaxValue</c> (unlimited).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxFileSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxParallelUploads",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Maximum number of concurrent uploads. Default is <c>6</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxParallelUploads"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Id",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Input element id.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Id"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnChange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>",
            "Documentation": "\n            <summary>\n            Gets or sets the event callback that will be invoked when the collection of selected files changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnChange",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.HxInputFileCore",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1202379778,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.HxFormState",
        "AssemblyName": "Havit.Blazor.Components.Web",
        "Documentation": "\n            <summary>\n            Propagates form states as a cascading parementer to child components.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxFormState"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Indicated enabled/disabled section. Value to propagate.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Visible",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>false</c>, nothing is rendered (no children). Value is not propagated, there is no where to propagate.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Visible"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.HxFormState"
        }
      },
      {
        "HashCode": -1717438185,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.HxFormState",
        "AssemblyName": "Havit.Blazor.Components.Web",
        "Documentation": "\n            <summary>\n            Propagates form states as a cascading parementer to child components.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.HxFormState"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Indicated enabled/disabled section. Value to propagate.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Visible",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When <c>false</c>, nothing is rendered (no children). Value is not propagated, there is no where to propagate.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Visible"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.HxFormState",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1559992003,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.HxFormState.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web",
        "Documentation": "\n            <summary>\n            Child content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxFormState"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.HxFormState.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 89770595,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.HxFormState.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web",
        "Documentation": "\n            <summary>\n            Child content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.HxFormState"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.HxFormState.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1702704493,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.HxModelEditForm<TModel>",
        "AssemblyName": "Havit.Blazor.Components.Web",
        "Documentation": "\n            <summary>\n            Edit form wrapper which provides strong type model and model instance update when valid form is submitted.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxModelEditForm"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TModel",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TModel for the Havit.Blazor.Components.Web.HxModelEditForm<TModel> component.",
            "Metadata": {
              "Common.PropertyName": "TModel",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Id",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Form element id.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Id"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Model",
            "TypeName": "TModel",
            "Documentation": "\n            <summary>\n            Model.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Model",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ModelChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TModel>",
            "Documentation": "\n            <summary>\n            Model event callback. Invoked when valid form is updated.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ModelChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<TModel>",
            "Documentation": "\n            <summary>\n            Child content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.HxModelEditForm<TModel>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": -743823912,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.HxModelEditForm<TModel>",
        "AssemblyName": "Havit.Blazor.Components.Web",
        "Documentation": "\n            <summary>\n            Edit form wrapper which provides strong type model and model instance update when valid form is submitted.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.HxModelEditForm"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TModel",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TModel for the Havit.Blazor.Components.Web.HxModelEditForm<TModel> component.",
            "Metadata": {
              "Common.PropertyName": "TModel",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Id",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Form element id.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Id"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Model",
            "TypeName": "TModel",
            "Documentation": "\n            <summary>\n            Model.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Model",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ModelChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TModel>",
            "Documentation": "\n            <summary>\n            Model event callback. Invoked when valid form is updated.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ModelChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<TModel>",
            "Documentation": "\n            <summary>\n            Child content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.HxModelEditForm<TModel>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 765245163,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.HxModelEditForm<TModel>.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web",
        "Documentation": "\n            <summary>\n            Child content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxModelEditForm"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ChildContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.HxModelEditForm<TModel>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1478420278,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.HxModelEditForm<TModel>.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web",
        "Documentation": "\n            <summary>\n            Child content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.HxModelEditForm"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ChildContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.HxModelEditForm<TModel>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1440477602,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.HxChangeTracker",
        "AssemblyName": "Havit.Blazor.Components.Web",
        "Documentation": "\n            <summary>\n            Subscribes to INotifyPropertyChanged changes and triggers re-rendering of ChildContent.\n            To be used when you want limit a scope of re-rendering and to prevent re-rendering of a wider component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxChangeTracker"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            The content to which the value should be provided.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.ComponentModel.INotifyPropertyChanged",
            "Documentation": "\n            <summary>\n            The value to be tracked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.HxChangeTracker"
        }
      },
      {
        "HashCode": -368490494,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.HxChangeTracker",
        "AssemblyName": "Havit.Blazor.Components.Web",
        "Documentation": "\n            <summary>\n            Subscribes to INotifyPropertyChanged changes and triggers re-rendering of ChildContent.\n            To be used when you want limit a scope of re-rendering and to prevent re-rendering of a wider component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.HxChangeTracker"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            The content to which the value should be provided.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.ComponentModel.INotifyPropertyChanged",
            "Documentation": "\n            <summary>\n            The value to be tracked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.HxChangeTracker",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -2257200,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.HxChangeTracker.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web",
        "Documentation": "\n            <summary>\n            The content to which the value should be provided.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxChangeTracker"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.HxChangeTracker.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 882235229,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.HxChangeTracker.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web",
        "Documentation": "\n            <summary>\n            The content to which the value should be provided.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.HxChangeTracker"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.HxChangeTracker.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -860607319,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.HxDynamicElement",
        "AssemblyName": "Havit.Blazor.Components.Web",
        "Documentation": "\n            <summary>\n            Renders an element with the specified name, attributes and child-content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxDynamicElement"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ElementName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the name of the element to render.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ElementName"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised after the element is clicked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClickStopPropagation",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Stop onClick-event propagation. Deafult is <c>false</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClickStopPropagation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClickPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevents the default action for the onclick event. Deafult is <c>false</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClickPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ElementRef",
            "TypeName": "Microsoft.AspNetCore.Components.ElementReference",
            "Documentation": "\n            <summary>\n            Element reference.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ElementRef"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ElementRefChanged",
            "TypeName": "System.Action<Microsoft.AspNetCore.Components.ElementReference>",
            "Documentation": "\n            <summary>\n            Action (synchronnous, not an EventCallback) called when the element's reference got captured.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ElementRefChanged",
              "Components.DelegateSignature": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IDictionary<System.String, System.Object>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.HxDynamicElement"
        }
      },
      {
        "HashCode": 1248878694,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.HxDynamicElement",
        "AssemblyName": "Havit.Blazor.Components.Web",
        "Documentation": "\n            <summary>\n            Renders an element with the specified name, attributes and child-content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.HxDynamicElement"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ElementName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the name of the element to render.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ElementName"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised after the element is clicked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClickStopPropagation",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Stop onClick-event propagation. Deafult is <c>false</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClickStopPropagation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClickPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevents the default action for the onclick event. Deafult is <c>false</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClickPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ElementRef",
            "TypeName": "Microsoft.AspNetCore.Components.ElementReference",
            "Documentation": "\n            <summary>\n            Element reference.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ElementRef"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ElementRefChanged",
            "TypeName": "System.Action<Microsoft.AspNetCore.Components.ElementReference>",
            "Documentation": "\n            <summary>\n            Action (synchronnous, not an EventCallback) called when the element's reference got captured.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ElementRefChanged",
              "Components.DelegateSignature": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IDictionary<System.String, System.Object>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.HxDynamicElement",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1666599379,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.HxDynamicElement.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HxDynamicElement"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.HxDynamicElement.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 524062357,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.HxDynamicElement.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.HxDynamicElement"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.HxDynamicElement.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1741503907,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.HxRedirectTo",
        "AssemblyName": "Havit.Blazor.Components.Web",
        "Documentation": "\n            <summary>\n            Rendering a <c>HxRedirectTo</c> will navigate to a new location.<br />\n            Can be used in <c>AuthorizeRouteView</c>, <c>Router</c> and such components to process redirection to login page, error page or such.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxRedirectTo"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Uri",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            URI to navigate to.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Uri"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ForceLoad",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If <c>true</c>, bypasses client-side routing and forces the browser to load the new\n            page from the server, whether or not the URI would normally be handled by the\n            client-side router.<br />\n            Default is <c>false</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ForceLoad"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.HxRedirectTo"
        }
      },
      {
        "HashCode": -2119881130,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.HxRedirectTo",
        "AssemblyName": "Havit.Blazor.Components.Web",
        "Documentation": "\n            <summary>\n            Rendering a <c>HxRedirectTo</c> will navigate to a new location.<br />\n            Can be used in <c>AuthorizeRouteView</c>, <c>Router</c> and such components to process redirection to login page, error page or such.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.HxRedirectTo"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Uri",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            URI to navigate to.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Uri"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ForceLoad",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If <c>true</c>, bypasses client-side routing and forces the browser to load the new\n            page from the server, whether or not the URI would normally be handled by the\n            client-side router.<br />\n            Default is <c>false</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ForceLoad"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.HxRedirectTo",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1026361901,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.HxRepeater<TItem>",
        "AssemblyName": "Havit.Blazor.Components.Web",
        "Documentation": "\n            <summary>\n            A data-bound list component that allows custom layout by repeating a specified template for each item displayed in the list.\n            Analogous to ASP.NET WebForms Repater control.\n            </summary>\n            <typeparam name=\"TItem\">item type</typeparam>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxRepeater"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TItem",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.HxRepeater<TItem> component.",
            "Metadata": {
              "Common.PropertyName": "TItem",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Template that defines how the header section of the Repeater component is displayed.\n            Renders only if there are any items to display.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<TItem>",
            "Documentation": "\n            <summary>\n            Template that defines how items in the Repeater component are displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Template that defines how the footer section of the Repeater component is displayed.\n            Renders only if there are any items to display.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FooterTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NullTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Template that defines what should be rendered in case of Items <c>null</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NullTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EmptyTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Template that defines what should be rendered in case of empty Items.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EmptyTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Data",
            "TypeName": "System.Collections.Generic.IEnumerable<TItem>",
            "Documentation": "\n            <summary>\n            Items to be rendered.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Data",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.HxRepeater<TItem>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": 1543730050,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.HxRepeater<TItem>",
        "AssemblyName": "Havit.Blazor.Components.Web",
        "Documentation": "\n            <summary>\n            A data-bound list component that allows custom layout by repeating a specified template for each item displayed in the list.\n            Analogous to ASP.NET WebForms Repater control.\n            </summary>\n            <typeparam name=\"TItem\">item type</typeparam>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.HxRepeater"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TItem",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.HxRepeater<TItem> component.",
            "Metadata": {
              "Common.PropertyName": "TItem",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Template that defines how the header section of the Repeater component is displayed.\n            Renders only if there are any items to display.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<TItem>",
            "Documentation": "\n            <summary>\n            Template that defines how items in the Repeater component are displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Template that defines how the footer section of the Repeater component is displayed.\n            Renders only if there are any items to display.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FooterTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NullTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Template that defines what should be rendered in case of Items <c>null</c>.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NullTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EmptyTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Template that defines what should be rendered in case of empty Items.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EmptyTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Data",
            "TypeName": "System.Collections.Generic.IEnumerable<TItem>",
            "Documentation": "\n            <summary>\n            Items to be rendered.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Data",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.HxRepeater<TItem>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1034364151,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.HxRepeater<TItem>.HeaderTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web",
        "Documentation": "\n            <summary>\n            Template that defines how the header section of the Repeater component is displayed.\n            Renders only if there are any items to display.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HeaderTemplate",
            "ParentTag": "HxRepeater"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.HxRepeater<TItem>.HeaderTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -377197590,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.HxRepeater<TItem>.HeaderTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web",
        "Documentation": "\n            <summary>\n            Template that defines how the header section of the Repeater component is displayed.\n            Renders only if there are any items to display.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HeaderTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.HxRepeater"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.HxRepeater<TItem>.HeaderTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1606026887,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.HxRepeater<TItem>.ItemTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web",
        "Documentation": "\n            <summary>\n            Template that defines how items in the Repeater component are displayed.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemTemplate",
            "ParentTag": "HxRepeater"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ItemTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.HxRepeater<TItem>.ItemTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -829876898,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.HxRepeater<TItem>.ItemTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web",
        "Documentation": "\n            <summary>\n            Template that defines how items in the Repeater component are displayed.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.HxRepeater"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ItemTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.HxRepeater<TItem>.ItemTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1695205728,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.HxRepeater<TItem>.FooterTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web",
        "Documentation": "\n            <summary>\n            Template that defines how the footer section of the Repeater component is displayed.\n            Renders only if there are any items to display.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "FooterTemplate",
            "ParentTag": "HxRepeater"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.HxRepeater<TItem>.FooterTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1713909970,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.HxRepeater<TItem>.FooterTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web",
        "Documentation": "\n            <summary>\n            Template that defines how the footer section of the Repeater component is displayed.\n            Renders only if there are any items to display.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "FooterTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.HxRepeater"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.HxRepeater<TItem>.FooterTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1518018623,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.HxRepeater<TItem>.NullTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web",
        "Documentation": "\n            <summary>\n            Template that defines what should be rendered in case of Items <c>null</c>.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NullTemplate",
            "ParentTag": "HxRepeater"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.HxRepeater<TItem>.NullTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -296165028,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.HxRepeater<TItem>.NullTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web",
        "Documentation": "\n            <summary>\n            Template that defines what should be rendered in case of Items <c>null</c>.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NullTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.HxRepeater"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.HxRepeater<TItem>.NullTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -686726355,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.HxRepeater<TItem>.EmptyTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web",
        "Documentation": "\n            <summary>\n            Template that defines what should be rendered in case of empty Items.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "EmptyTemplate",
            "ParentTag": "HxRepeater"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.HxRepeater<TItem>.EmptyTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 117247659,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.HxRepeater<TItem>.EmptyTemplate",
        "AssemblyName": "Havit.Blazor.Components.Web",
        "Documentation": "\n            <summary>\n            Template that defines what should be rendered in case of empty Items.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "EmptyTemplate",
            "ParentTag": "Havit.Blazor.Components.Web.HxRepeater"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.HxRepeater<TItem>.EmptyTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -667782404,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.HxIcon",
        "AssemblyName": "Havit.Blazor.Components.Web",
        "Documentation": "\n            <summary>\n            Displays an icon.\n            Currently supports <a href=\"https://icons.getbootstrap.com/\" target=\"_blank\">Bootstrap icons</a> through <c>BootstrapIcon</c> class.\n            You can add your own icon-set easily.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxIcon"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "Havit.Blazor.Components.Web.IconBase",
            "Documentation": "\n            <summary>\n            Icon to display.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            CSS Class to combine with basic icon CSS class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Additional attributes to be splatted onto an underlying HTML element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.HxIcon"
        }
      },
      {
        "HashCode": -665941273,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.HxIcon",
        "AssemblyName": "Havit.Blazor.Components.Web",
        "Documentation": "\n            <summary>\n            Displays an icon.\n            Currently supports <a href=\"https://icons.getbootstrap.com/\" target=\"_blank\">Bootstrap icons</a> through <c>BootstrapIcon</c> class.\n            You can add your own icon-set easily.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.HxIcon"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "Havit.Blazor.Components.Web.IconBase",
            "Documentation": "\n            <summary>\n            Icon to display.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            CSS Class to combine with basic icon CSS class.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Additional attributes to be splatted onto an underlying HTML element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.HxIcon",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1445841687,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Infrastructure.UpdatedContentRenderer",
        "AssemblyName": "Havit.Blazor.Components.Web",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "UpdatedContentRenderer"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Component",
            "TypeName": "Havit.Blazor.Components.Web.Infrastructure.IRenderNotificationComponent",
            "Metadata": {
              "Common.PropertyName": "Component"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Infrastructure.UpdatedContentRenderer"
        }
      },
      {
        "HashCode": -1886842429,
        "Kind": "Components.Component",
        "Name": "Havit.Blazor.Components.Web.Infrastructure.UpdatedContentRenderer",
        "AssemblyName": "Havit.Blazor.Components.Web",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Infrastructure.UpdatedContentRenderer"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Component",
            "TypeName": "Havit.Blazor.Components.Web.Infrastructure.IRenderNotificationComponent",
            "Metadata": {
              "Common.PropertyName": "Component"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Havit.Blazor.Components.Web.Infrastructure.UpdatedContentRenderer",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -2114350276,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Infrastructure.UpdatedContentRenderer.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "UpdatedContentRenderer"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Infrastructure.UpdatedContentRenderer.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1979906935,
        "Kind": "Components.ChildContent",
        "Name": "Havit.Blazor.Components.Web.Infrastructure.UpdatedContentRenderer.ChildContent",
        "AssemblyName": "Havit.Blazor.Components.Web",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Havit.Blazor.Components.Web.Infrastructure.UpdatedContentRenderer"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Havit.Blazor.Components.Web.Infrastructure.UpdatedContentRenderer.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1065816939,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "\n             <summary>\n             Combines the behaviors of <see cref=\"T:Microsoft.AspNetCore.Components.Authorization.AuthorizeView\" /> and <see cref=\"T:Microsoft.AspNetCore.Components.RouteView\" />,\n             so that it displays the page matching the specified route but only if the user\n             is authorized to see it.\n            \n             Additionally, this component supplies a cascading parameter of type <see cref=\"T:System.Threading.Tasks.Task`1\" />,\n             which makes the user's current authentication state available to descendants.\n             </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "AuthorizeRouteView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "NotAuthorized",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
            "Documentation": "\n            <summary>\n            The content that will be displayed if the user is not authorized.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NotAuthorized",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Authorizing",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            The content that will be displayed while asynchronous authorization is in progress.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Authorizing",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Resource",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            The resource to which access is being controlled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Resource"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RouteData",
            "TypeName": "Microsoft.AspNetCore.Components.RouteData",
            "IsEditorRequired": true,
            "Documentation": "\n            <summary>\n            Gets or sets the route data. This determines the page that will be\n            displayed and the parameter values that will be supplied to the page.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RouteData"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DefaultLayout",
            "TypeName": "System.Type",
            "Documentation": "\n            <summary>\n            Gets or sets the type of a layout to be used if the page does not\n            declare any layout. If specified, the type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />\n            and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DefaultLayout"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView"
        }
      },
      {
        "HashCode": 1541014912,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "\n             <summary>\n             Combines the behaviors of <see cref=\"T:Microsoft.AspNetCore.Components.Authorization.AuthorizeView\" /> and <see cref=\"T:Microsoft.AspNetCore.Components.RouteView\" />,\n             so that it displays the page matching the specified route but only if the user\n             is authorized to see it.\n            \n             Additionally, this component supplies a cascading parameter of type <see cref=\"T:System.Threading.Tasks.Task`1\" />,\n             which makes the user's current authentication state available to descendants.\n             </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "NotAuthorized",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
            "Documentation": "\n            <summary>\n            The content that will be displayed if the user is not authorized.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NotAuthorized",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Authorizing",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            The content that will be displayed while asynchronous authorization is in progress.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Authorizing",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Resource",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            The resource to which access is being controlled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Resource"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RouteData",
            "TypeName": "Microsoft.AspNetCore.Components.RouteData",
            "IsEditorRequired": true,
            "Documentation": "\n            <summary>\n            Gets or sets the route data. This determines the page that will be\n            displayed and the parameter values that will be supplied to the page.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RouteData"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DefaultLayout",
            "TypeName": "System.Type",
            "Documentation": "\n            <summary>\n            Gets or sets the type of a layout to be used if the page does not\n            declare any layout. If specified, the type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />\n            and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DefaultLayout"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1426543046,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.NotAuthorized",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "\n            <summary>\n            The content that will be displayed if the user is not authorized.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NotAuthorized",
            "ParentTag": "AuthorizeRouteView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'NotAuthorized' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.NotAuthorized",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 308161965,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.NotAuthorized",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "\n            <summary>\n            The content that will be displayed if the user is not authorized.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NotAuthorized",
            "ParentTag": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'NotAuthorized' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.NotAuthorized",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 254469406,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Authorizing",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "\n            <summary>\n            The content that will be displayed while asynchronous authorization is in progress.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Authorizing",
            "ParentTag": "AuthorizeRouteView"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Authorizing",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 933735593,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Authorizing",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "\n            <summary>\n            The content that will be displayed while asynchronous authorization is in progress.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Authorizing",
            "ParentTag": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Authorizing",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1304811949,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "\n            <summary>\n            Displays differing content depending on the user's authorization status.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "AuthorizeView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Policy",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The policy name that determines whether the content can be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Policy"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Roles",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            A comma delimited list of roles that are allowed to display the content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Roles"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
            "Documentation": "\n            <summary>\n            The content that will be displayed if the user is authorized.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NotAuthorized",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
            "Documentation": "\n            <summary>\n            The content that will be displayed if the user is not authorized.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NotAuthorized",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Authorized",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
            "Documentation": "\n            <summary>\n            The content that will be displayed if the user is authorized.\n            If you specify a value for this parameter, do not also specify a value for <see cref=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.ChildContent\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Authorized",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Authorizing",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            The content that will be displayed while asynchronous authorization is in progress.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Authorizing",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Resource",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            The resource to which access is being controlled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Resource"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView"
        }
      },
      {
        "HashCode": 472718610,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "\n            <summary>\n            Displays differing content depending on the user's authorization status.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Policy",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The policy name that determines whether the content can be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Policy"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Roles",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            A comma delimited list of roles that are allowed to display the content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Roles"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
            "Documentation": "\n            <summary>\n            The content that will be displayed if the user is authorized.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NotAuthorized",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
            "Documentation": "\n            <summary>\n            The content that will be displayed if the user is not authorized.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NotAuthorized",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Authorized",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
            "Documentation": "\n            <summary>\n            The content that will be displayed if the user is authorized.\n            If you specify a value for this parameter, do not also specify a value for <see cref=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.ChildContent\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Authorized",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Authorizing",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            The content that will be displayed while asynchronous authorization is in progress.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Authorizing",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Resource",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            The resource to which access is being controlled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Resource"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1983425438,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "\n            <summary>\n            The content that will be displayed if the user is authorized.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "AuthorizeView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ChildContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 582878815,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "\n            <summary>\n            The content that will be displayed if the user is authorized.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ChildContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1793112107,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.NotAuthorized",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "\n            <summary>\n            The content that will be displayed if the user is not authorized.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NotAuthorized",
            "ParentTag": "AuthorizeView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'NotAuthorized' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.NotAuthorized",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1033551651,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.NotAuthorized",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "\n            <summary>\n            The content that will be displayed if the user is not authorized.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NotAuthorized",
            "ParentTag": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'NotAuthorized' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.NotAuthorized",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 988221316,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorized",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "\n            <summary>\n            The content that will be displayed if the user is authorized.\n            If you specify a value for this parameter, do not also specify a value for <see cref=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.ChildContent\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Authorized",
            "ParentTag": "AuthorizeView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'Authorized' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorized",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1673292037,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorized",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "\n            <summary>\n            The content that will be displayed if the user is authorized.\n            If you specify a value for this parameter, do not also specify a value for <see cref=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.ChildContent\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Authorized",
            "ParentTag": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'Authorized' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorized",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -209287632,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorizing",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "\n            <summary>\n            The content that will be displayed while asynchronous authorization is in progress.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Authorizing",
            "ParentTag": "AuthorizeView"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorizing",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 650326898,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorizing",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "\n            <summary>\n            The content that will be displayed while asynchronous authorization is in progress.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Authorizing",
            "ParentTag": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorizing",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1336844961,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "CascadingAuthenticationState"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            The content to which the authentication state should be provided.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState"
        }
      },
      {
        "HashCode": -540155129,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            The content to which the authentication state should be provided.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -766584723,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "\n            <summary>\n            The content to which the authentication state should be provided.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "CascadingAuthenticationState"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 292603590,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "\n            <summary>\n            The content to which the authentication state should be provided.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -876609937,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.CascadingValue<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "\n            <summary>\n            A component that provides a cascading value to all descendant components.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "CascadingValue"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.CascadingValue<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            The content to which the value should be provided.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "\n            <summary>\n            The value to be provided.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Name",
            "TypeName": "System.String",
            "Documentation": "\n             <summary>\n             Optionally gives a name to the provided value. Descendant components\n             will be able to receive the value by specifying this name.\n            \n             If no name is specified, then descendant components will receive the\n             value based the type of value they are requesting.\n             </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Name"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsFixed",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, indicates that <see cref=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Value\" /> will not change. This is a\n            performance optimization that allows the framework to skip setting up\n            change notifications. Set this flag only if you will not change\n            <see cref=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Value\" /> during the component's lifetime.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsFixed"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.CascadingValue<TValue>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": -325519407,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.CascadingValue<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "\n            <summary>\n            A component that provides a cascading value to all descendant components.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.CascadingValue"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.CascadingValue<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            The content to which the value should be provided.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "\n            <summary>\n            The value to be provided.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Name",
            "TypeName": "System.String",
            "Documentation": "\n             <summary>\n             Optionally gives a name to the provided value. Descendant components\n             will be able to receive the value by specifying this name.\n            \n             If no name is specified, then descendant components will receive the\n             value based the type of value they are requesting.\n             </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Name"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsFixed",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, indicates that <see cref=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Value\" /> will not change. This is a\n            performance optimization that allows the framework to skip setting up\n            change notifications. Set this flag only if you will not change\n            <see cref=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Value\" /> during the component's lifetime.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsFixed"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.CascadingValue<TValue>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 909141050,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.CascadingValue<TValue>.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "\n            <summary>\n            The content to which the value should be provided.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "CascadingValue"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.CascadingValue<TValue>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -700243708,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.CascadingValue<TValue>.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "\n            <summary>\n            The content to which the value should be provided.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.CascadingValue"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.CascadingValue<TValue>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 2115894063,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.DynamicComponent",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "\n            <summary>\n            A component that renders another component dynamically according to its\n            <see cref=\"P:Microsoft.AspNetCore.Components.DynamicComponent.Type\" /> parameter.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "DynamicComponent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Type",
            "TypeName": "System.Type",
            "IsEditorRequired": true,
            "Documentation": "\n            <summary>\n            Gets or sets the type of the component to be rendered. The supplied type must\n            implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Type"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Parameters",
            "TypeName": "System.Collections.Generic.IDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a dictionary of parameters to be passed to the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Parameters"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.DynamicComponent"
        }
      },
      {
        "HashCode": 1480007874,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.DynamicComponent",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "\n            <summary>\n            A component that renders another component dynamically according to its\n            <see cref=\"P:Microsoft.AspNetCore.Components.DynamicComponent.Type\" /> parameter.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.DynamicComponent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Type",
            "TypeName": "System.Type",
            "IsEditorRequired": true,
            "Documentation": "\n            <summary>\n            Gets or sets the type of the component to be rendered. The supplied type must\n            implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Type"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Parameters",
            "TypeName": "System.Collections.Generic.IDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a dictionary of parameters to be passed to the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Parameters"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.DynamicComponent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 536679193,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.LayoutView",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "\n            <summary>\n            Displays the specified content inside the specified layout and any further\n            nested layouts.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "LayoutView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Gets or sets the content to display.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Layout",
            "TypeName": "System.Type",
            "Documentation": "\n            <summary>\n            Gets or sets the type of the layout in which to display the content.\n            The type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" /> and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Layout"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.LayoutView"
        }
      },
      {
        "HashCode": -2015153527,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.LayoutView",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "\n            <summary>\n            Displays the specified content inside the specified layout and any further\n            nested layouts.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.LayoutView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Gets or sets the content to display.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Layout",
            "TypeName": "System.Type",
            "Documentation": "\n            <summary>\n            Gets or sets the type of the layout in which to display the content.\n            The type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" /> and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Layout"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.LayoutView",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1879651112,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.LayoutView.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "\n            <summary>\n            Gets or sets the content to display.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "LayoutView"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.LayoutView.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1403492109,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.LayoutView.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "\n            <summary>\n            Gets or sets the content to display.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.LayoutView"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.LayoutView.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 523116328,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.RouteView",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "\n            <summary>\n            Displays the specified page component, rendering it inside its layout\n            and any further nested layouts.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "RouteView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "RouteData",
            "TypeName": "Microsoft.AspNetCore.Components.RouteData",
            "IsEditorRequired": true,
            "Documentation": "\n            <summary>\n            Gets or sets the route data. This determines the page that will be\n            displayed and the parameter values that will be supplied to the page.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RouteData"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DefaultLayout",
            "TypeName": "System.Type",
            "Documentation": "\n            <summary>\n            Gets or sets the type of a layout to be used if the page does not\n            declare any layout. If specified, the type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />\n            and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DefaultLayout"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.RouteView"
        }
      },
      {
        "HashCode": -27991392,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.RouteView",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "\n            <summary>\n            Displays the specified page component, rendering it inside its layout\n            and any further nested layouts.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.RouteView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "RouteData",
            "TypeName": "Microsoft.AspNetCore.Components.RouteData",
            "IsEditorRequired": true,
            "Documentation": "\n            <summary>\n            Gets or sets the route data. This determines the page that will be\n            displayed and the parameter values that will be supplied to the page.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RouteData"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DefaultLayout",
            "TypeName": "System.Type",
            "Documentation": "\n            <summary>\n            Gets or sets the type of a layout to be used if the page does not\n            declare any layout. If specified, the type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />\n            and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DefaultLayout"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.RouteView",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -580882377,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Routing.Router",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "\n            <summary>\n            A component that supplies route data corresponding to the current navigation state.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Router"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AppAssembly",
            "TypeName": "System.Reflection.Assembly",
            "IsEditorRequired": true,
            "Documentation": "\n            <summary>\n            Gets or sets the assembly that should be searched for components matching the URI.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AppAssembly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAssemblies",
            "TypeName": "System.Collections.Generic.IEnumerable<System.Reflection.Assembly>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional assemblies that should be searched for components\n            that can match URIs.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAssemblies"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NotFound",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "IsEditorRequired": true,
            "Documentation": "\n            <summary>\n            Gets or sets the content to display when no match is found for the requested route.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NotFound",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Found",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.RouteData>",
            "IsEditorRequired": true,
            "Documentation": "\n            <summary>\n            Gets or sets the content to display when a match is found for the requested route.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Found",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Navigating",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Get or sets the content to display when asynchronous navigation is in progress.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Navigating",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnNavigateAsync",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Routing.NavigationContext>",
            "Documentation": "\n            <summary>\n            Gets or sets a handler that should be called before navigating to a new page.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnNavigateAsync",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PreferExactMatches",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Gets or sets a flag to indicate whether route matching should prefer exact matches\n            over wildcards.\n            <para>This property is obsolete and configuring it does nothing.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PreferExactMatches"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.Router"
        }
      },
      {
        "HashCode": 596613777,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Routing.Router",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "\n            <summary>\n            A component that supplies route data corresponding to the current navigation state.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Routing.Router"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AppAssembly",
            "TypeName": "System.Reflection.Assembly",
            "IsEditorRequired": true,
            "Documentation": "\n            <summary>\n            Gets or sets the assembly that should be searched for components matching the URI.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AppAssembly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAssemblies",
            "TypeName": "System.Collections.Generic.IEnumerable<System.Reflection.Assembly>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional assemblies that should be searched for components\n            that can match URIs.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAssemblies"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NotFound",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "IsEditorRequired": true,
            "Documentation": "\n            <summary>\n            Gets or sets the content to display when no match is found for the requested route.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NotFound",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Found",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.RouteData>",
            "IsEditorRequired": true,
            "Documentation": "\n            <summary>\n            Gets or sets the content to display when a match is found for the requested route.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Found",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Navigating",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Get or sets the content to display when asynchronous navigation is in progress.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Navigating",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnNavigateAsync",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Routing.NavigationContext>",
            "Documentation": "\n            <summary>\n            Gets or sets a handler that should be called before navigating to a new page.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnNavigateAsync",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PreferExactMatches",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Gets or sets a flag to indicate whether route matching should prefer exact matches\n            over wildcards.\n            <para>This property is obsolete and configuring it does nothing.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PreferExactMatches"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.Router",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -806325141,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Routing.Router.NotFound",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "\n            <summary>\n            Gets or sets the content to display when no match is found for the requested route.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NotFound",
            "ParentTag": "Router"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.Router.NotFound",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1984749400,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Routing.Router.NotFound",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "\n            <summary>\n            Gets or sets the content to display when no match is found for the requested route.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NotFound",
            "ParentTag": "Microsoft.AspNetCore.Components.Routing.Router"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.Router.NotFound",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 477010062,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Routing.Router.Found",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "\n            <summary>\n            Gets or sets the content to display when a match is found for the requested route.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Found",
            "ParentTag": "Router"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'Found' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.Router.Found",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1834393210,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Routing.Router.Found",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "\n            <summary>\n            Gets or sets the content to display when a match is found for the requested route.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Found",
            "ParentTag": "Microsoft.AspNetCore.Components.Routing.Router"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'Found' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.Router.Found",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1895447004,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Routing.Router.Navigating",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "\n            <summary>\n            Get or sets the content to display when asynchronous navigation is in progress.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Navigating",
            "ParentTag": "Router"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.Router.Navigating",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -2136429748,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Routing.Router.Navigating",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "\n            <summary>\n            Get or sets the content to display when asynchronous navigation is in progress.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Navigating",
            "ParentTag": "Microsoft.AspNetCore.Components.Routing.Router"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.Router.Navigating",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1570376398,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator",
        "AssemblyName": "Microsoft.AspNetCore.Components.Forms",
        "Documentation": "\n            <summary>\n            Adds Data Annotations validation support to an <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "DataAnnotationsValidator"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator"
        }
      },
      {
        "HashCode": -1317134907,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator",
        "AssemblyName": "Microsoft.AspNetCore.Components.Forms",
        "Documentation": "\n            <summary>\n            Adds Data Annotations validation support to an <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 489388353,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.EditForm",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Renders a form element that cascades an <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> to descendants.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "EditForm"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created <c>form</c> element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EditContext",
            "TypeName": "Microsoft.AspNetCore.Components.Forms.EditContext",
            "Documentation": "\n            <summary>\n            Supplies the edit context explicitly. If using this parameter, do not\n            also supply <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.Model\" />, since the model value will be taken\n            from the <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditContext.Model\" /> property.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EditContext"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Model",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Specifies the top-level model object for the form. An edit context will\n            be constructed for this model. If using this parameter, do not also supply\n            a value for <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Model"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Forms.EditContext>",
            "Documentation": "\n            <summary>\n            Specifies the content to be rendered inside this <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditForm\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnSubmit",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>",
            "Documentation": "\n             <summary>\n             A callback that will be invoked when the form is submitted.\n            \n             If using this parameter, you are responsible for triggering any validation\n             manually, e.g., by calling <see cref=\"M:Microsoft.AspNetCore.Components.Forms.EditContext.Validate\" />.\n             </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnSubmit",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnValidSubmit",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>",
            "Documentation": "\n            <summary>\n            A callback that will be invoked when the form is submitted and the\n            <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> is determined to be valid.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnValidSubmit",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInvalidSubmit",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>",
            "Documentation": "\n            <summary>\n            A callback that will be invoked when the form is submitted and the\n            <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> is determined to be invalid.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnInvalidSubmit",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.EditForm"
        }
      },
      {
        "HashCode": 2060682075,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.EditForm",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Renders a form element that cascades an <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> to descendants.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.EditForm"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created <c>form</c> element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EditContext",
            "TypeName": "Microsoft.AspNetCore.Components.Forms.EditContext",
            "Documentation": "\n            <summary>\n            Supplies the edit context explicitly. If using this parameter, do not\n            also supply <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.Model\" />, since the model value will be taken\n            from the <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditContext.Model\" /> property.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EditContext"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Model",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Specifies the top-level model object for the form. An edit context will\n            be constructed for this model. If using this parameter, do not also supply\n            a value for <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Model"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Forms.EditContext>",
            "Documentation": "\n            <summary>\n            Specifies the content to be rendered inside this <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditForm\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnSubmit",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>",
            "Documentation": "\n             <summary>\n             A callback that will be invoked when the form is submitted.\n            \n             If using this parameter, you are responsible for triggering any validation\n             manually, e.g., by calling <see cref=\"M:Microsoft.AspNetCore.Components.Forms.EditContext.Validate\" />.\n             </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnSubmit",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnValidSubmit",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>",
            "Documentation": "\n            <summary>\n            A callback that will be invoked when the form is submitted and the\n            <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> is determined to be valid.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnValidSubmit",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInvalidSubmit",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>",
            "Documentation": "\n            <summary>\n            A callback that will be invoked when the form is submitted and the\n            <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> is determined to be invalid.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnInvalidSubmit",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.EditForm",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1425395868,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Specifies the content to be rendered inside this <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditForm\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "EditForm"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ChildContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 784153619,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Specifies the content to be rendered inside this <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditForm\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Forms.EditForm"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ChildContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 164362640,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputCheckbox",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            An input component for editing <see cref=\"T:System.Boolean\" /> values.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputCheckbox"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.Boolean>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputCheckbox"
        }
      },
      {
        "HashCode": -652630124,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputCheckbox",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            An input component for editing <see cref=\"T:System.Boolean\" /> values.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputCheckbox"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.Boolean>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputCheckbox",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -986492141,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputDate<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            An input component for editing date values.\n            Supported types are <see cref=\"T:System.DateTime\" /> and <see cref=\"T:System.DateTimeOffset\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputDate"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputDate<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Type",
            "TypeName": "Microsoft.AspNetCore.Components.Forms.InputDateType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Gets or sets the type of HTML input to be rendered.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Type"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ParsingErrorMessage",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the error message used when displaying an a parsing error.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ParsingErrorMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputDate<TValue>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": -1944856036,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputDate<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            An input component for editing date values.\n            Supported types are <see cref=\"T:System.DateTime\" /> and <see cref=\"T:System.DateTimeOffset\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputDate"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputDate<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Type",
            "TypeName": "Microsoft.AspNetCore.Components.Forms.InputDateType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Gets or sets the type of HTML input to be rendered.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Type"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ParsingErrorMessage",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the error message used when displaying an a parsing error.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ParsingErrorMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputDate<TValue>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1025022412,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputFile",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            A component that wraps the HTML file input element and supplies a <see cref=\"T:System.IO.Stream\" /> for each file's contents.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputFile"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "OnChange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>",
            "Documentation": "\n            <summary>\n            Gets or sets the event callback that will be invoked when the collection of selected files changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnChange",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputFile"
        }
      },
      {
        "HashCode": 2147178435,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputFile",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            A component that wraps the HTML file input element and supplies a <see cref=\"T:System.IO.Stream\" /> for each file's contents.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputFile"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "OnChange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>",
            "Documentation": "\n            <summary>\n            Gets or sets the event callback that will be invoked when the collection of selected files changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnChange",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputFile",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1699035523,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            An input component for editing numeric values.\n            Supported numeric types are <see cref=\"T:System.Int32\" />, <see cref=\"T:System.Int64\" />, <see cref=\"T:System.Int16\" />, <see cref=\"T:System.Single\" />, <see cref=\"T:System.Double\" />, <see cref=\"T:System.Decimal\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputNumber"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputNumber<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ParsingErrorMessage",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the error message used when displaying an a parsing error.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ParsingErrorMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": 1632351895,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            An input component for editing numeric values.\n            Supported numeric types are <see cref=\"T:System.Int32\" />, <see cref=\"T:System.Int64\" />, <see cref=\"T:System.Int16\" />, <see cref=\"T:System.Single\" />, <see cref=\"T:System.Double\" />, <see cref=\"T:System.Decimal\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputNumber"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputNumber<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ParsingErrorMessage",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the error message used when displaying an a parsing error.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ParsingErrorMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -664962614,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputRadio<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            An input component used for selecting a value from a group of choices.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputRadio"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputRadio<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "\n            <summary>\n            Gets or sets the value of this input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Name",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the name of the parent input radio group.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Name"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputRadio<TValue>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": 1819083398,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputRadio<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            An input component used for selecting a value from a group of choices.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputRadio"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputRadio<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "\n            <summary>\n            Gets or sets the value of this input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Name",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the name of the parent input radio group.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Name"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputRadio<TValue>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 760802062,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Groups child <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadio`1\" /> components.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputRadioGroup"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Gets or sets the child content to be rendering inside the <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Name",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the name of the group.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Name"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": 1445657756,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Groups child <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadio`1\" /> components.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Gets or sets the child content to be rendering inside the <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Name",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the name of the group.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Name"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -5688087,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Gets or sets the child content to be rendering inside the <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "InputRadioGroup"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -647344956,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Gets or sets the child content to be rendering inside the <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1743007156,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            A dropdown selection component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputSelect"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputSelect<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Gets or sets the child content to be rendering inside the select element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": -2145449461,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            A dropdown selection component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputSelect"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputSelect<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Gets or sets the child content to be rendering inside the select element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1130157769,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Gets or sets the child content to be rendering inside the select element.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "InputSelect"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -662414230,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Gets or sets the child content to be rendering inside the select element.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Forms.InputSelect"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 450500785,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputText",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            An input component for editing <see cref=\"T:System.String\" /> values.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputText"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.String>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputText"
        }
      },
      {
        "HashCode": 1393980726,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputText",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            An input component for editing <see cref=\"T:System.String\" /> values.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputText"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.String>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputText",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1805793551,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputTextArea",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            A multiline input component for editing <see cref=\"T:System.String\" /> values.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputTextArea"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.String>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputTextArea"
        }
      },
      {
        "HashCode": 942383338,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputTextArea",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            A multiline input component for editing <see cref=\"T:System.String\" /> values.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputTextArea"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.String>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputTextArea",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1397561445,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Displays a list of validation messages for a specified field within a cascaded <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ValidationMessage"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created <c>div</c> element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "\n            <summary>\n            Specifies the field for which validation messages should be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For",
              "Components.GenericTyped": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": -183000960,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Displays a list of validation messages for a specified field within a cascaded <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.ValidationMessage"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created <c>div</c> element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "\n            <summary>\n            Specifies the field for which validation messages should be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For",
              "Components.GenericTyped": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 582290182,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.ValidationSummary",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Displays a list of validation messages from a cascaded <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ValidationSummary"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Model",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Gets or sets the model to produce the list of validation messages for.\n            When specified, this lists all errors that are associated with the model instance.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Model"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created <c>ul</c> element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.ValidationSummary"
        }
      },
      {
        "HashCode": 166280902,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.ValidationSummary",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Displays a list of validation messages from a cascaded <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.ValidationSummary"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Model",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Gets or sets the model to produce the list of validation messages for.\n            When specified, this lists all errors that are associated with the model instance.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Model"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created <c>ul</c> element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.ValidationSummary",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1637542045,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Routing.FocusOnNavigate",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            After navigating from one page to another, sets focus to an element\n            matching a CSS selector. This can be used to build an accessible\n            navigation system compatible with screen readers.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "FocusOnNavigate"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "RouteData",
            "TypeName": "Microsoft.AspNetCore.Components.RouteData",
            "Documentation": "\n            <summary>\n            Gets or sets the route data. This can be obtained from an enclosing\n            <see cref=\"T:Microsoft.AspNetCore.Components.Routing.Router\" /> component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RouteData"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Selector",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets a CSS selector describing the element to be focused after\n            navigation between pages.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Selector"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.FocusOnNavigate"
        }
      },
      {
        "HashCode": 1721241727,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Routing.FocusOnNavigate",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            After navigating from one page to another, sets focus to an element\n            matching a CSS selector. This can be used to build an accessible\n            navigation system compatible with screen readers.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Routing.FocusOnNavigate"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "RouteData",
            "TypeName": "Microsoft.AspNetCore.Components.RouteData",
            "Documentation": "\n            <summary>\n            Gets or sets the route data. This can be obtained from an enclosing\n            <see cref=\"T:Microsoft.AspNetCore.Components.Routing.Router\" /> component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RouteData"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Selector",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets a CSS selector describing the element to be focused after\n            navigation between pages.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Selector"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.FocusOnNavigate",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -113796794,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Routing.NavLink",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            A component that renders an anchor tag, automatically toggling its 'active'\n            class based on whether its 'href' matches the current URI.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NavLink"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ActiveClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the CSS class name applied to the NavLink when the\n            current route matches the NavLink href.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ActiveClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be added to the generated\n            <c>a</c> element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Gets or sets the child content of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Match",
            "TypeName": "Microsoft.AspNetCore.Components.Routing.NavLinkMatch",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Gets or sets a value representing the URL matching behavior.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Match"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.NavLink"
        }
      },
      {
        "HashCode": -1066662000,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Routing.NavLink",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            A component that renders an anchor tag, automatically toggling its 'active'\n            class based on whether its 'href' matches the current URI.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Routing.NavLink"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ActiveClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the CSS class name applied to the NavLink when the\n            current route matches the NavLink href.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ActiveClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be added to the generated\n            <c>a</c> element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Gets or sets the child content of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Match",
            "TypeName": "Microsoft.AspNetCore.Components.Routing.NavLinkMatch",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Gets or sets a value representing the URL matching behavior.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Match"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.NavLink",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -386477367,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Gets or sets the child content of the component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "NavLink"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 720148254,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Gets or sets the child content of the component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Routing.NavLink"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1253305294,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Web.HeadContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Provides content to <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> components.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HeadContent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Gets or sets the content to be rendered in <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> instances.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.HeadContent"
        }
      },
      {
        "HashCode": 925449828,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Web.HeadContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Provides content to <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> components.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Web.HeadContent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Gets or sets the content to be rendered in <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> instances.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.HeadContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1567531839,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Gets or sets the content to be rendered in <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> instances.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HeadContent"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1208072112,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Gets or sets the content to be rendered in <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> instances.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Web.HeadContent"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1593959033,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Web.HeadOutlet",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Renders content provided by <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadContent\" /> components.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HeadOutlet"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.HeadOutlet"
        }
      },
      {
        "HashCode": -34130624,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Web.HeadOutlet",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Renders content provided by <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadContent\" /> components.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Web.HeadOutlet"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.HeadOutlet",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 681478386,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Web.PageTitle",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Enables rendering an HTML <c>&lt;title&gt;</c> to a <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "PageTitle"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Gets or sets the content to be rendered as the document title.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.PageTitle"
        }
      },
      {
        "HashCode": -1411648041,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Web.PageTitle",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Enables rendering an HTML <c>&lt;title&gt;</c> to a <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Web.PageTitle"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Gets or sets the content to be rendered as the document title.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.PageTitle",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 206629272,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Gets or sets the content to be rendered as the document title.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "PageTitle"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 2057572728,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Gets or sets the content to be rendered as the document title.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Web.PageTitle"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1679170265,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Web.ErrorBoundary",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Captures errors thrown from its child content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ErrorBoundary"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            The content to be displayed when there is no error.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<System.Exception>",
            "Documentation": "\n            <summary>\n            The content to be displayed when there is an error.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaximumErrorCount",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The maximum number of errors that can be handled. If more errors are received,\n            they will be treated as fatal. Calling <see cref=\"M:Microsoft.AspNetCore.Components.ErrorBoundaryBase.Recover\" /> resets the count.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaximumErrorCount"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.ErrorBoundary"
        }
      },
      {
        "HashCode": -125378770,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Web.ErrorBoundary",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Captures errors thrown from its child content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Web.ErrorBoundary"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            The content to be displayed when there is no error.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<System.Exception>",
            "Documentation": "\n            <summary>\n            The content to be displayed when there is an error.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaximumErrorCount",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The maximum number of errors that can be handled. If more errors are received,\n            they will be treated as fatal. Calling <see cref=\"M:Microsoft.AspNetCore.Components.ErrorBoundaryBase.Recover\" /> resets the count.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaximumErrorCount"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.ErrorBoundary",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1991737880,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.ErrorBoundary.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            The content to be displayed when there is no error.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "ErrorBoundary"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.ErrorBoundary.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1669670115,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.ErrorBoundary.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            The content to be displayed when there is no error.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Web.ErrorBoundary"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.ErrorBoundary.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -610365295,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.ErrorBoundary.ErrorContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            The content to be displayed when there is an error.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ErrorContent",
            "ParentTag": "ErrorBoundary"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ErrorContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.ErrorBoundary.ErrorContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1615753919,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.ErrorBoundary.ErrorContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            The content to be displayed when there is an error.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ErrorContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Web.ErrorBoundary"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ErrorContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.ErrorBoundary.ErrorContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 4186138,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Provides functionality for rendering a virtualized list of items.\n            </summary>\n            <typeparam name=\"TItem\">The <c>context</c> type for the items being rendered.</typeparam>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Virtualize"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TItem",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TItem for the Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem> component.",
            "Metadata": {
              "Common.PropertyName": "TItem",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<TItem>",
            "Documentation": "\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<TItem>",
            "Documentation": "\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemContent",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Web.Virtualization.PlaceholderContext>",
            "Documentation": "\n            <summary>\n            Gets or sets the template for items that have not yet been loaded in memory.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemSize",
            "TypeName": "System.Single",
            "Documentation": "\n            <summary>\n            Gets the size of each item in pixels. Defaults to 50px.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemsProvider",
            "TypeName": "Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderDelegate<TItem>",
            "Documentation": "\n            <summary>\n            Gets or sets the function providing items to the list.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemsProvider",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Items",
            "TypeName": "System.Collections.Generic.ICollection<TItem>",
            "Documentation": "\n            <summary>\n            Gets or sets the fixed item source.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Items",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OverscanCount",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Gets or sets a value that determines how many additional items will be rendered\n            before and after the visible region. This help to reduce the frequency of rendering\n            during scrolling. However, higher values mean that more elements will be present\n            in the page.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OverscanCount"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": -103919751,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Provides functionality for rendering a virtualized list of items.\n            </summary>\n            <typeparam name=\"TItem\">The <c>context</c> type for the items being rendered.</typeparam>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TItem",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TItem for the Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem> component.",
            "Metadata": {
              "Common.PropertyName": "TItem",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<TItem>",
            "Documentation": "\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<TItem>",
            "Documentation": "\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemContent",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Web.Virtualization.PlaceholderContext>",
            "Documentation": "\n            <summary>\n            Gets or sets the template for items that have not yet been loaded in memory.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemSize",
            "TypeName": "System.Single",
            "Documentation": "\n            <summary>\n            Gets the size of each item in pixels. Defaults to 50px.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemsProvider",
            "TypeName": "Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderDelegate<TItem>",
            "Documentation": "\n            <summary>\n            Gets or sets the function providing items to the list.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemsProvider",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Items",
            "TypeName": "System.Collections.Generic.ICollection<TItem>",
            "Documentation": "\n            <summary>\n            Gets or sets the fixed item source.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Items",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OverscanCount",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Gets or sets a value that determines how many additional items will be rendered\n            before and after the visible region. This help to reduce the frequency of rendering\n            during scrolling. However, higher values mean that more elements will be present\n            in the page.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OverscanCount"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1321560795,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Virtualize"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ChildContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 463600014,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ChildContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -179339345,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ItemContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemContent",
            "ParentTag": "Virtualize"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ItemContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ItemContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1289654327,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ItemContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ItemContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ItemContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1788259050,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.Placeholder",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Gets or sets the template for items that have not yet been loaded in memory.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Placeholder",
            "ParentTag": "Virtualize"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'Placeholder' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.Placeholder",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 74259640,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.Placeholder",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Gets or sets the template for items that have not yet been loaded in memory.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Placeholder",
            "ParentTag": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'Placeholder' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.Placeholder",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 186592043,
        "Kind": "Components.EventHandler",
        "Name": "onfocus",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onfocus' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfocus",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfocus:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfocus:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onfocus",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>",
            "Documentation": "Sets the '@onfocus' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onfocus"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfocus' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onfocus' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.FocusEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1655639245,
        "Kind": "Components.EventHandler",
        "Name": "onblur",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onblur' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onblur",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onblur:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onblur:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onblur",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>",
            "Documentation": "Sets the '@onblur' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onblur"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onblur' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onblur' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.FocusEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1121151949,
        "Kind": "Components.EventHandler",
        "Name": "onfocusin",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onfocusin' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfocusin",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfocusin:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfocusin:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onfocusin",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>",
            "Documentation": "Sets the '@onfocusin' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onfocusin"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfocusin' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onfocusin' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.FocusEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1979636908,
        "Kind": "Components.EventHandler",
        "Name": "onfocusout",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onfocusout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfocusout",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfocusout:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfocusout:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onfocusout",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>",
            "Documentation": "Sets the '@onfocusout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onfocusout"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfocusout' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onfocusout' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.FocusEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1905724443,
        "Kind": "Components.EventHandler",
        "Name": "onmouseover",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onmouseover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseover",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseover:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseover:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onmouseover",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "Sets the '@onmouseover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onmouseover"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmouseover' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onmouseover' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.MouseEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -892848959,
        "Kind": "Components.EventHandler",
        "Name": "onmouseout",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onmouseout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseout",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseout:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseout:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onmouseout",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "Sets the '@onmouseout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onmouseout"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmouseout' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onmouseout' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.MouseEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 1446718439,
        "Kind": "Components.EventHandler",
        "Name": "onmousemove",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onmousemove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmousemove",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmousemove:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmousemove:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onmousemove",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "Sets the '@onmousemove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onmousemove"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmousemove' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onmousemove' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.MouseEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1588424014,
        "Kind": "Components.EventHandler",
        "Name": "onmousedown",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onmousedown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmousedown",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmousedown:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmousedown:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onmousedown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "Sets the '@onmousedown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onmousedown"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmousedown' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onmousedown' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.MouseEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 868747197,
        "Kind": "Components.EventHandler",
        "Name": "onmouseup",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onmouseup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseup",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseup:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseup:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onmouseup",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "Sets the '@onmouseup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onmouseup"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmouseup' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onmouseup' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.MouseEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 787426028,
        "Kind": "Components.EventHandler",
        "Name": "onclick",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onclick' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onclick",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onclick:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onclick:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onclick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "Sets the '@onclick' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onclick"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onclick' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onclick' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.MouseEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 1313643291,
        "Kind": "Components.EventHandler",
        "Name": "ondblclick",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ondblclick' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondblclick",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondblclick:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondblclick:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ondblclick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "Sets the '@ondblclick' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ondblclick"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondblclick' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ondblclick' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.MouseEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1902757884,
        "Kind": "Components.EventHandler",
        "Name": "onwheel",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onwheel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.WheelEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onwheel",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onwheel:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onwheel:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onwheel",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.WheelEventArgs>",
            "Documentation": "Sets the '@onwheel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.WheelEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onwheel"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onwheel' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onwheel' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.WheelEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1878369800,
        "Kind": "Components.EventHandler",
        "Name": "onmousewheel",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onmousewheel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.WheelEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmousewheel",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmousewheel:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmousewheel:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onmousewheel",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.WheelEventArgs>",
            "Documentation": "Sets the '@onmousewheel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.WheelEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onmousewheel"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmousewheel' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onmousewheel' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.WheelEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 442055878,
        "Kind": "Components.EventHandler",
        "Name": "oncontextmenu",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@oncontextmenu' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncontextmenu",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncontextmenu:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncontextmenu:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@oncontextmenu",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "Sets the '@oncontextmenu' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "oncontextmenu"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncontextmenu' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@oncontextmenu' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.MouseEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 1472062986,
        "Kind": "Components.EventHandler",
        "Name": "ondrag",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ondrag' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondrag",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondrag:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondrag:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ondrag",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>",
            "Documentation": "Sets the '@ondrag' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ondrag"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondrag' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ondrag' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.DragEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 210482135,
        "Kind": "Components.EventHandler",
        "Name": "ondragend",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ondragend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragend",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragend:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragend:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ondragend",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>",
            "Documentation": "Sets the '@ondragend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ondragend"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragend' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ondragend' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.DragEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1450766640,
        "Kind": "Components.EventHandler",
        "Name": "ondragenter",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ondragenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragenter",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragenter:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragenter:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ondragenter",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>",
            "Documentation": "Sets the '@ondragenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ondragenter"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragenter' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ondragenter' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.DragEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1747362364,
        "Kind": "Components.EventHandler",
        "Name": "ondragleave",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ondragleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragleave",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragleave:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragleave:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ondragleave",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>",
            "Documentation": "Sets the '@ondragleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ondragleave"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragleave' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ondragleave' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.DragEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 169165660,
        "Kind": "Components.EventHandler",
        "Name": "ondragover",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ondragover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragover",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragover:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragover:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ondragover",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>",
            "Documentation": "Sets the '@ondragover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ondragover"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragover' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ondragover' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.DragEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -745044341,
        "Kind": "Components.EventHandler",
        "Name": "ondragstart",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ondragstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragstart",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragstart:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragstart:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ondragstart",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>",
            "Documentation": "Sets the '@ondragstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ondragstart"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragstart' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ondragstart' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.DragEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 1139402182,
        "Kind": "Components.EventHandler",
        "Name": "ondrop",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ondrop' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondrop",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondrop:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondrop:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ondrop",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>",
            "Documentation": "Sets the '@ondrop' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ondrop"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondrop' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ondrop' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.DragEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 976705603,
        "Kind": "Components.EventHandler",
        "Name": "onkeydown",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onkeydown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onkeydown",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onkeydown:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onkeydown:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onkeydown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "Sets the '@onkeydown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onkeydown"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onkeydown' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onkeydown' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.KeyboardEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 593278123,
        "Kind": "Components.EventHandler",
        "Name": "onkeyup",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onkeyup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onkeyup",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onkeyup:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onkeyup:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onkeyup",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "Sets the '@onkeyup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onkeyup"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onkeyup' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onkeyup' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.KeyboardEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1388389237,
        "Kind": "Components.EventHandler",
        "Name": "onkeypress",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onkeypress' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onkeypress",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onkeypress:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onkeypress:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onkeypress",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "Sets the '@onkeypress' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onkeypress"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onkeypress' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onkeypress' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.KeyboardEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -821980582,
        "Kind": "Components.EventHandler",
        "Name": "onchange",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onchange' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.ChangeEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onchange",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onchange:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onchange:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onchange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>",
            "Documentation": "Sets the '@onchange' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.ChangeEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onchange"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onchange' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onchange' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.ChangeEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 1295922993,
        "Kind": "Components.EventHandler",
        "Name": "oninput",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@oninput' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.ChangeEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oninput",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oninput:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oninput:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@oninput",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>",
            "Documentation": "Sets the '@oninput' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.ChangeEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "oninput"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@oninput' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@oninput' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.ChangeEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 240224611,
        "Kind": "Components.EventHandler",
        "Name": "oninvalid",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@oninvalid' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oninvalid",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oninvalid:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oninvalid:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@oninvalid",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@oninvalid' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "oninvalid"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@oninvalid' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@oninvalid' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 1961592489,
        "Kind": "Components.EventHandler",
        "Name": "onreset",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onreset' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onreset",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onreset:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onreset:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onreset",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onreset' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onreset"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onreset' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onreset' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1723223064,
        "Kind": "Components.EventHandler",
        "Name": "onselect",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onselect' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onselect",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onselect:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onselect:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onselect",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onselect' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onselect"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onselect' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onselect' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -335010394,
        "Kind": "Components.EventHandler",
        "Name": "onselectstart",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onselectstart' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onselectstart",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onselectstart:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onselectstart:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onselectstart",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onselectstart' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onselectstart"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onselectstart' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onselectstart' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1490632599,
        "Kind": "Components.EventHandler",
        "Name": "onselectionchange",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onselectionchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onselectionchange",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onselectionchange:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onselectionchange:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onselectionchange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onselectionchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onselectionchange"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onselectionchange' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onselectionchange' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 906527888,
        "Kind": "Components.EventHandler",
        "Name": "onsubmit",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onsubmit' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onsubmit",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onsubmit:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onsubmit:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onsubmit",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onsubmit' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onsubmit"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onsubmit' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onsubmit' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -502713351,
        "Kind": "Components.EventHandler",
        "Name": "onbeforecopy",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onbeforecopy' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforecopy",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforecopy:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforecopy:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onbeforecopy",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onbeforecopy' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onbeforecopy"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforecopy' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onbeforecopy' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -955657122,
        "Kind": "Components.EventHandler",
        "Name": "onbeforecut",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onbeforecut' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforecut",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforecut:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforecut:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onbeforecut",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onbeforecut' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onbeforecut"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforecut' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onbeforecut' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 1907747834,
        "Kind": "Components.EventHandler",
        "Name": "onbeforepaste",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onbeforepaste' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforepaste",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforepaste:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforepaste:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onbeforepaste",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onbeforepaste' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onbeforepaste"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforepaste' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onbeforepaste' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -411851640,
        "Kind": "Components.EventHandler",
        "Name": "oncopy",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@oncopy' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncopy",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncopy:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncopy:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@oncopy",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>",
            "Documentation": "Sets the '@oncopy' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "oncopy"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncopy' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@oncopy' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.ClipboardEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 1392332545,
        "Kind": "Components.EventHandler",
        "Name": "oncut",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@oncut' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncut",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncut:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncut:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@oncut",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>",
            "Documentation": "Sets the '@oncut' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "oncut"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncut' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@oncut' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.ClipboardEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 578549584,
        "Kind": "Components.EventHandler",
        "Name": "onpaste",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpaste' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpaste",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpaste:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpaste:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpaste",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>",
            "Documentation": "Sets the '@onpaste' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpaste"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpaste' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpaste' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.ClipboardEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -537730330,
        "Kind": "Components.EventHandler",
        "Name": "ontouchcancel",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ontouchcancel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchcancel",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchcancel:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchcancel:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ontouchcancel",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>",
            "Documentation": "Sets the '@ontouchcancel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ontouchcancel"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchcancel' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ontouchcancel' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.TouchEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 2104360724,
        "Kind": "Components.EventHandler",
        "Name": "ontouchend",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ontouchend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchend",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchend:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchend:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ontouchend",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>",
            "Documentation": "Sets the '@ontouchend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ontouchend"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchend' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ontouchend' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.TouchEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 1358171059,
        "Kind": "Components.EventHandler",
        "Name": "ontouchmove",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ontouchmove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchmove",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchmove:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchmove:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ontouchmove",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>",
            "Documentation": "Sets the '@ontouchmove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ontouchmove"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchmove' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ontouchmove' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.TouchEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 974592162,
        "Kind": "Components.EventHandler",
        "Name": "ontouchstart",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ontouchstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchstart",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchstart:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchstart:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ontouchstart",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>",
            "Documentation": "Sets the '@ontouchstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ontouchstart"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchstart' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ontouchstart' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.TouchEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1364108548,
        "Kind": "Components.EventHandler",
        "Name": "ontouchenter",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ontouchenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchenter",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchenter:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchenter:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ontouchenter",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>",
            "Documentation": "Sets the '@ontouchenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ontouchenter"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchenter' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ontouchenter' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.TouchEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1526526883,
        "Kind": "Components.EventHandler",
        "Name": "ontouchleave",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ontouchleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchleave",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchleave:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchleave:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ontouchleave",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>",
            "Documentation": "Sets the '@ontouchleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ontouchleave"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchleave' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ontouchleave' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.TouchEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 304086471,
        "Kind": "Components.EventHandler",
        "Name": "ongotpointercapture",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ongotpointercapture' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ongotpointercapture",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ongotpointercapture:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ongotpointercapture:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ongotpointercapture",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>",
            "Documentation": "Sets the '@ongotpointercapture' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ongotpointercapture"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ongotpointercapture' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ongotpointercapture' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.PointerEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 862188923,
        "Kind": "Components.EventHandler",
        "Name": "onlostpointercapture",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onlostpointercapture' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onlostpointercapture",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onlostpointercapture:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onlostpointercapture:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onlostpointercapture",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>",
            "Documentation": "Sets the '@onlostpointercapture' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onlostpointercapture"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onlostpointercapture' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onlostpointercapture' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.PointerEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 431891662,
        "Kind": "Components.EventHandler",
        "Name": "onpointercancel",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpointercancel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointercancel",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointercancel:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointercancel:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpointercancel",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>",
            "Documentation": "Sets the '@onpointercancel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpointercancel"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointercancel' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpointercancel' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.PointerEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1435287063,
        "Kind": "Components.EventHandler",
        "Name": "onpointerdown",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpointerdown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerdown",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerdown:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerdown:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpointerdown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>",
            "Documentation": "Sets the '@onpointerdown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpointerdown"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerdown' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpointerdown' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.PointerEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 2047867003,
        "Kind": "Components.EventHandler",
        "Name": "onpointerenter",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpointerenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerenter",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerenter:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerenter:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpointerenter",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>",
            "Documentation": "Sets the '@onpointerenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpointerenter"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerenter' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpointerenter' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.PointerEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1669894437,
        "Kind": "Components.EventHandler",
        "Name": "onpointerleave",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpointerleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerleave",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerleave:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerleave:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpointerleave",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>",
            "Documentation": "Sets the '@onpointerleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpointerleave"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerleave' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpointerleave' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.PointerEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 105655141,
        "Kind": "Components.EventHandler",
        "Name": "onpointermove",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpointermove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointermove",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointermove:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointermove:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpointermove",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>",
            "Documentation": "Sets the '@onpointermove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpointermove"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointermove' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpointermove' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.PointerEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -54689486,
        "Kind": "Components.EventHandler",
        "Name": "onpointerout",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpointerout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerout",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerout:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerout:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpointerout",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>",
            "Documentation": "Sets the '@onpointerout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpointerout"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerout' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpointerout' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.PointerEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1805960553,
        "Kind": "Components.EventHandler",
        "Name": "onpointerover",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpointerover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerover",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerover:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerover:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpointerover",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>",
            "Documentation": "Sets the '@onpointerover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpointerover"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerover' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpointerover' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.PointerEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 1284792013,
        "Kind": "Components.EventHandler",
        "Name": "onpointerup",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpointerup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerup",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerup:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerup:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpointerup",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>",
            "Documentation": "Sets the '@onpointerup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpointerup"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerup' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpointerup' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.PointerEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -337109147,
        "Kind": "Components.EventHandler",
        "Name": "oncanplay",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@oncanplay' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncanplay",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncanplay:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncanplay:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@oncanplay",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@oncanplay' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "oncanplay"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncanplay' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@oncanplay' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 1137904826,
        "Kind": "Components.EventHandler",
        "Name": "oncanplaythrough",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@oncanplaythrough' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncanplaythrough",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncanplaythrough:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncanplaythrough:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@oncanplaythrough",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@oncanplaythrough' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "oncanplaythrough"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncanplaythrough' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@oncanplaythrough' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -868689525,
        "Kind": "Components.EventHandler",
        "Name": "oncuechange",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@oncuechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncuechange",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncuechange:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncuechange:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@oncuechange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@oncuechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "oncuechange"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncuechange' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@oncuechange' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1004520427,
        "Kind": "Components.EventHandler",
        "Name": "ondurationchange",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ondurationchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondurationchange",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondurationchange:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondurationchange:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ondurationchange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@ondurationchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ondurationchange"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondurationchange' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ondurationchange' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 1620358731,
        "Kind": "Components.EventHandler",
        "Name": "onemptied",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onemptied' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onemptied",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onemptied:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onemptied:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onemptied",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onemptied' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onemptied"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onemptied' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onemptied' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -472682042,
        "Kind": "Components.EventHandler",
        "Name": "onpause",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpause' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpause",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpause:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpause:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpause",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onpause' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpause"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpause' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpause' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 1774201348,
        "Kind": "Components.EventHandler",
        "Name": "onplay",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onplay' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onplay",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onplay:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onplay:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onplay",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onplay' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onplay"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onplay' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onplay' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -2007368528,
        "Kind": "Components.EventHandler",
        "Name": "onplaying",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onplaying' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onplaying",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onplaying:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onplaying:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onplaying",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onplaying' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onplaying"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onplaying' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onplaying' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 1184999635,
        "Kind": "Components.EventHandler",
        "Name": "onratechange",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onratechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onratechange",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onratechange:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onratechange:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onratechange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onratechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onratechange"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onratechange' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onratechange' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 764619040,
        "Kind": "Components.EventHandler",
        "Name": "onseeked",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onseeked' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onseeked",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onseeked:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onseeked:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onseeked",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onseeked' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onseeked"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onseeked' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onseeked' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 859214160,
        "Kind": "Components.EventHandler",
        "Name": "onseeking",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onseeking' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onseeking",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onseeking:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onseeking:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onseeking",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onseeking' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onseeking"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onseeking' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onseeking' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1801158310,
        "Kind": "Components.EventHandler",
        "Name": "onstalled",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onstalled' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onstalled",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onstalled:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onstalled:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onstalled",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onstalled' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onstalled"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onstalled' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onstalled' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -353765892,
        "Kind": "Components.EventHandler",
        "Name": "onstop",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onstop' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onstop",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onstop:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onstop:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onstop",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onstop' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onstop"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onstop' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onstop' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 1950188589,
        "Kind": "Components.EventHandler",
        "Name": "onsuspend",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onsuspend' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onsuspend",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onsuspend:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onsuspend:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onsuspend",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onsuspend' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onsuspend"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onsuspend' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onsuspend' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -216696633,
        "Kind": "Components.EventHandler",
        "Name": "ontimeupdate",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ontimeupdate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontimeupdate",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontimeupdate:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontimeupdate:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ontimeupdate",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@ontimeupdate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ontimeupdate"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontimeupdate' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ontimeupdate' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1890949290,
        "Kind": "Components.EventHandler",
        "Name": "onvolumechange",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onvolumechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onvolumechange",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onvolumechange:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onvolumechange:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onvolumechange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onvolumechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onvolumechange"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onvolumechange' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onvolumechange' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 1544053299,
        "Kind": "Components.EventHandler",
        "Name": "onwaiting",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onwaiting' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onwaiting",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onwaiting:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onwaiting:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onwaiting",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onwaiting' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onwaiting"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onwaiting' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onwaiting' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -2076119368,
        "Kind": "Components.EventHandler",
        "Name": "onloadstart",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onloadstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadstart",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadstart:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadstart:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onloadstart",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>",
            "Documentation": "Sets the '@onloadstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onloadstart"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onloadstart' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onloadstart' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.ProgressEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -734285010,
        "Kind": "Components.EventHandler",
        "Name": "ontimeout",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ontimeout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontimeout",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontimeout:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontimeout:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ontimeout",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>",
            "Documentation": "Sets the '@ontimeout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ontimeout"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontimeout' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ontimeout' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.ProgressEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1391952131,
        "Kind": "Components.EventHandler",
        "Name": "onabort",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onabort' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onabort",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onabort:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onabort:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onabort",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>",
            "Documentation": "Sets the '@onabort' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onabort"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onabort' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onabort' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.ProgressEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -324657617,
        "Kind": "Components.EventHandler",
        "Name": "onload",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onload' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onload",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onload:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onload:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onload",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>",
            "Documentation": "Sets the '@onload' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onload"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onload' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onload' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.ProgressEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -173838871,
        "Kind": "Components.EventHandler",
        "Name": "onloadend",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onloadend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadend",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadend:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadend:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onloadend",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>",
            "Documentation": "Sets the '@onloadend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onloadend"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onloadend' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onloadend' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.ProgressEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -341682906,
        "Kind": "Components.EventHandler",
        "Name": "onprogress",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onprogress' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onprogress",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onprogress:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onprogress:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onprogress",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>",
            "Documentation": "Sets the '@onprogress' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onprogress"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onprogress' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onprogress' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.ProgressEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 1604151266,
        "Kind": "Components.EventHandler",
        "Name": "onerror",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onerror' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ErrorEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onerror",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onerror:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onerror:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onerror",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ErrorEventArgs>",
            "Documentation": "Sets the '@onerror' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ErrorEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onerror"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onerror' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onerror' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.ErrorEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 1623512693,
        "Kind": "Components.EventHandler",
        "Name": "onactivate",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onactivate",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onactivate:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onactivate:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onactivate",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onactivate"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onactivate' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onactivate' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1714354502,
        "Kind": "Components.EventHandler",
        "Name": "onbeforeactivate",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onbeforeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforeactivate",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforeactivate:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforeactivate:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onbeforeactivate",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onbeforeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onbeforeactivate"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforeactivate' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onbeforeactivate' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 775998936,
        "Kind": "Components.EventHandler",
        "Name": "onbeforedeactivate",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onbeforedeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforedeactivate",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforedeactivate:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforedeactivate:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onbeforedeactivate",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onbeforedeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onbeforedeactivate"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforedeactivate' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onbeforedeactivate' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 2102367221,
        "Kind": "Components.EventHandler",
        "Name": "ondeactivate",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ondeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondeactivate",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondeactivate:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondeactivate:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ondeactivate",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@ondeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ondeactivate"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondeactivate' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ondeactivate' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 1987822902,
        "Kind": "Components.EventHandler",
        "Name": "onended",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onended' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onended",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onended:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onended:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onended",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onended' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onended"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onended' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onended' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 1485114574,
        "Kind": "Components.EventHandler",
        "Name": "onfullscreenchange",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onfullscreenchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfullscreenchange",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfullscreenchange:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfullscreenchange:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onfullscreenchange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onfullscreenchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onfullscreenchange"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfullscreenchange' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onfullscreenchange' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -2003801423,
        "Kind": "Components.EventHandler",
        "Name": "onfullscreenerror",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onfullscreenerror' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfullscreenerror",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfullscreenerror:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfullscreenerror:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onfullscreenerror",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onfullscreenerror' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onfullscreenerror"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfullscreenerror' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onfullscreenerror' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -384664444,
        "Kind": "Components.EventHandler",
        "Name": "onloadeddata",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onloadeddata' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadeddata",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadeddata:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadeddata:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onloadeddata",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onloadeddata' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onloadeddata"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onloadeddata' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onloadeddata' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 410701632,
        "Kind": "Components.EventHandler",
        "Name": "onloadedmetadata",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onloadedmetadata' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadedmetadata",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadedmetadata:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadedmetadata:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onloadedmetadata",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onloadedmetadata' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onloadedmetadata"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onloadedmetadata' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onloadedmetadata' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1911062033,
        "Kind": "Components.EventHandler",
        "Name": "onpointerlockchange",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpointerlockchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerlockchange",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerlockchange:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerlockchange:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpointerlockchange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onpointerlockchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpointerlockchange"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerlockchange' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpointerlockchange' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 1391094284,
        "Kind": "Components.EventHandler",
        "Name": "onpointerlockerror",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpointerlockerror' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerlockerror",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerlockerror:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerlockerror:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpointerlockerror",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onpointerlockerror' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpointerlockerror"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerlockerror' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpointerlockerror' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1058189993,
        "Kind": "Components.EventHandler",
        "Name": "onreadystatechange",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onreadystatechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onreadystatechange",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onreadystatechange:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onreadystatechange:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onreadystatechange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onreadystatechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onreadystatechange"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onreadystatechange' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onreadystatechange' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 85037801,
        "Kind": "Components.EventHandler",
        "Name": "onscroll",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onscroll' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onscroll",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onscroll:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onscroll:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onscroll",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onscroll' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onscroll"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onscroll' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onscroll' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 2025965901,
        "Kind": "Components.EventHandler",
        "Name": "ontoggle",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ontoggle' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontoggle",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontoggle:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontoggle:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ontoggle",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@ontoggle' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ontoggle"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontoggle' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ontoggle' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1183855237,
        "Kind": "Components.Splat",
        "Name": "Attributes",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Merges a collection of attributes into the current element or component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@attributes",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Splat",
            "Name": "@attributes",
            "TypeName": "System.Object",
            "Documentation": "Merges a collection of attributes into the current element or component.",
            "Metadata": {
              "Common.PropertyName": "Attributes",
              "Common.DirectiveAttribute": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Splat",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Attributes"
        }
      },
      {
        "HashCode": -1132855933,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.Razor",
        "Documentation": "\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting elements containing attributes with URL expected values.\n            </summary>\n            <remarks>Resolves URLs starting with '~/' (relative to the application's 'webroot' setting) that are not\n            targeted by other <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" />s. Runs prior to other <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" />s to ensure\n            application-relative URLs are resolved.</remarks>\n        ",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "itemid",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "href",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "applet",
            "Attributes": [
              {
                "Name": "archive",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "area",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "href",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "audio",
            "Attributes": [
              {
                "Name": "src",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "base",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "href",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "blockquote",
            "Attributes": [
              {
                "Name": "cite",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "button",
            "Attributes": [
              {
                "Name": "formaction",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "del",
            "Attributes": [
              {
                "Name": "cite",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "embed",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "src",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "form",
            "Attributes": [
              {
                "Name": "action",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "html",
            "Attributes": [
              {
                "Name": "manifest",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "iframe",
            "Attributes": [
              {
                "Name": "src",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "img",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "src",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "img",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "srcset",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "src",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "formaction",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "ins",
            "Attributes": [
              {
                "Name": "cite",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "link",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "href",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "menuitem",
            "Attributes": [
              {
                "Name": "icon",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "object",
            "Attributes": [
              {
                "Name": "archive",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "object",
            "Attributes": [
              {
                "Name": "data",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "q",
            "Attributes": [
              {
                "Name": "cite",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "script",
            "Attributes": [
              {
                "Name": "src",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "source",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "src",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "source",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "srcset",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "track",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "src",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "video",
            "Attributes": [
              {
                "Name": "src",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "video",
            "Attributes": [
              {
                "Name": "poster",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "ITagHelper",
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper"
        }
      },
      {
        "HashCode": -1779468348,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;a&gt; elements.\n            </summary>\n        ",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "asp-action"
              }
            ]
          },
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "asp-controller"
              }
            ]
          },
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "asp-area"
              }
            ]
          },
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "asp-page"
              }
            ]
          },
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "asp-page-handler"
              }
            ]
          },
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "asp-fragment"
              }
            ]
          },
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "asp-host"
              }
            ]
          },
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "asp-protocol"
              }
            ]
          },
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "asp-route"
              }
            ]
          },
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "asp-all-route-data"
              }
            ]
          },
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "asp-route-",
                "NameComparison": 1
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "asp-action",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The name of the action method.\n            </summary>\n            <remarks>\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Route\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Page\" /> is non-<c>null</c>.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "Action"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-controller",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The name of the controller.\n            </summary>\n            <remarks>\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Route\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Page\" /> is non-<c>null</c>.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "Controller"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-area",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The name of the area.\n            </summary>\n            <remarks>\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Route\" /> is non-<c>null</c>.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "Area"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-page",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The name of the page.\n            </summary>\n            <remarks>\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Route\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Action\" />, <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Controller\" />\n            is non-<c>null</c>.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "Page"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-page-handler",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The name of the page handler.\n            </summary>\n            <remarks>\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Route\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Action\" />, or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Controller\" />\n            is non-<c>null</c>.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "PageHandler"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-protocol",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The protocol for the URL, such as \"http\" or \"https\".\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Protocol"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-host",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The host name.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Host"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fragment",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The URL fragment name.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Fragment"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-route",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Name of the route.\n            </summary>\n            <remarks>\n            Must be <c>null</c> if one of <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Action\" />, <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Controller\" />, <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Area\" />\n            or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Page\" /> is non-<c>null</c>.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "Route"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-all-route-data",
            "TypeName": "System.Collections.Generic.IDictionary<System.String, System.String>",
            "IndexerNamePrefix": "asp-route-",
            "IndexerTypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional parameters for the route.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RouteValues"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "ITagHelper",
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper"
        }
      },
      {
        "HashCode": -1759759661,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.TagHelper\" /> implementation targeting &lt;cache&gt; elements.\n            </summary>\n        ",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "cache"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "priority",
            "TypeName": "Microsoft.Extensions.Caching.Memory.CacheItemPriority?",
            "Documentation": "\n            <summary>\n            Gets or sets the <see cref=\"T:Microsoft.Extensions.Caching.Memory.CacheItemPriority\" /> policy for the cache entry.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Priority"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets a <see cref=\"T:System.String\" /> to vary the cached result by.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "VaryBy"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-header",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets a comma-delimited set of HTTP request headers to vary the cached result by.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "VaryByHeader"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-query",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets a comma-delimited set of query parameters to vary the cached result by.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "VaryByQuery"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-route",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets a comma-delimited set of route data parameters to vary the cached result by.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "VaryByRoute"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-cookie",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets a comma-delimited set of cookie names to vary the cached result by.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "VaryByCookie"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-user",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Gets or sets a value that determines if the cached result is to be varied by the Identity for the logged in\n            <see cref=\"P:Microsoft.AspNetCore.Http.HttpContext.User\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "VaryByUser"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-culture",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Gets or sets a value that determines if the cached result is to be varied by request culture.\n            <para>\n            Setting this to <c>true</c> would result in the result to be varied by <see cref=\"P:System.Globalization.CultureInfo.CurrentCulture\" />\n            and <see cref=\"P:System.Globalization.CultureInfo.CurrentUICulture\" />.\n            </para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "VaryByCulture"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "expires-on",
            "TypeName": "System.DateTimeOffset?",
            "Documentation": "\n            <summary>\n            Gets or sets the exact <see cref=\"T:System.DateTimeOffset\" /> the cache entry should be evicted.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ExpiresOn"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "expires-after",
            "TypeName": "System.TimeSpan?",
            "Documentation": "\n            <summary>\n            Gets or sets the duration, from the time the cache entry was added, when it should be evicted.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ExpiresAfter"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "expires-sliding",
            "TypeName": "System.TimeSpan?",
            "Documentation": "\n            <summary>\n            Gets or sets the duration from last access that the cache entry should be evicted.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ExpiresSliding"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "enabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Gets or sets the value which determines if the tag helper is enabled or not.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "ITagHelper",
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelper"
        }
      },
      {
        "HashCode": -327369146,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.ComponentTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "\n            <summary>\n            A <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.TagHelper\" /> that renders a Razor component.\n            </summary>\n        ",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "component",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "params",
            "TypeName": "System.Collections.Generic.IDictionary<System.String, System.Object>",
            "IndexerNamePrefix": "param-",
            "IndexerTypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Gets or sets values for component parameters.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Parameters"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "type",
            "TypeName": "System.Type",
            "Documentation": "\n            <summary>\n            Gets or sets the component type. This value is required.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ComponentType"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "render-mode",
            "TypeName": "Microsoft.AspNetCore.Mvc.Rendering.RenderMode",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Gets or sets the <see cref=\"T:Microsoft.AspNetCore.Mvc.Rendering.RenderMode\" />\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RenderMode"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "ITagHelper",
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.ComponentTagHelper"
        }
      },
      {
        "HashCode": 1367150986,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.DistributedCacheTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.TagHelper\" /> implementation targeting &lt;distributed-cache&gt; elements.\n            </summary>\n        ",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "distributed-cache",
            "Attributes": [
              {
                "Name": "name"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "name",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets a unique name to discriminate cached entries.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Name"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets a <see cref=\"T:System.String\" /> to vary the cached result by.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "VaryBy"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-header",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets a comma-delimited set of HTTP request headers to vary the cached result by.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "VaryByHeader"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-query",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets a comma-delimited set of query parameters to vary the cached result by.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "VaryByQuery"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-route",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets a comma-delimited set of route data parameters to vary the cached result by.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "VaryByRoute"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-cookie",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets a comma-delimited set of cookie names to vary the cached result by.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "VaryByCookie"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-user",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Gets or sets a value that determines if the cached result is to be varied by the Identity for the logged in\n            <see cref=\"P:Microsoft.AspNetCore.Http.HttpContext.User\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "VaryByUser"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-culture",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Gets or sets a value that determines if the cached result is to be varied by request culture.\n            <para>\n            Setting this to <c>true</c> would result in the result to be varied by <see cref=\"P:System.Globalization.CultureInfo.CurrentCulture\" />\n            and <see cref=\"P:System.Globalization.CultureInfo.CurrentUICulture\" />.\n            </para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "VaryByCulture"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "expires-on",
            "TypeName": "System.DateTimeOffset?",
            "Documentation": "\n            <summary>\n            Gets or sets the exact <see cref=\"T:System.DateTimeOffset\" /> the cache entry should be evicted.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ExpiresOn"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "expires-after",
            "TypeName": "System.TimeSpan?",
            "Documentation": "\n            <summary>\n            Gets or sets the duration, from the time the cache entry was added, when it should be evicted.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ExpiresAfter"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "expires-sliding",
            "TypeName": "System.TimeSpan?",
            "Documentation": "\n            <summary>\n            Gets or sets the duration from last access that the cache entry should be evicted.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ExpiresSliding"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "enabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Gets or sets the value which determines if the tag helper is enabled or not.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "ITagHelper",
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.DistributedCacheTagHelper"
        }
      },
      {
        "HashCode": 885020507,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;environment&gt; elements that conditionally renders\n            content based on the current value of <see cref=\"P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.EnvironmentName\" />.\n            If the environment is not listed in the specified <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Names\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Include\" />,\n            or if it is in <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Exclude\" />, the content will not be rendered.\n            </summary>\n        ",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "environment"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "names",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            A comma separated list of environment names in which the content should be rendered.\n            If the current environment is also in the <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Exclude\" /> list, the content will not be rendered.\n            </summary>\n            <remarks>\n            The specified environment names are compared case insensitively to the current value of\n            <see cref=\"P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.EnvironmentName\" />.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "Names"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "include",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            A comma separated list of environment names in which the content should be rendered.\n            If the current environment is also in the <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Exclude\" /> list, the content will not be rendered.\n            </summary>\n            <remarks>\n            The specified environment names are compared case insensitively to the current value of\n            <see cref=\"P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.EnvironmentName\" />.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "Include"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "exclude",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            A comma separated list of environment names in which the content will not be rendered.\n            </summary>\n            <remarks>\n            The specified environment names are compared case insensitively to the current value of\n            <see cref=\"P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.EnvironmentName\" />.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "Exclude"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "ITagHelper",
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper"
        }
      },
      {
        "HashCode": -1155389725,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;button&gt; elements and &lt;input&gt; elements with\n            their <c>type</c> attribute set to <c>image</c> or <c>submit</c>.\n            </summary>\n        ",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "button",
            "Attributes": [
              {
                "Name": "asp-action"
              }
            ]
          },
          {
            "TagName": "button",
            "Attributes": [
              {
                "Name": "asp-controller"
              }
            ]
          },
          {
            "TagName": "button",
            "Attributes": [
              {
                "Name": "asp-area"
              }
            ]
          },
          {
            "TagName": "button",
            "Attributes": [
              {
                "Name": "asp-page"
              }
            ]
          },
          {
            "TagName": "button",
            "Attributes": [
              {
                "Name": "asp-page-handler"
              }
            ]
          },
          {
            "TagName": "button",
            "Attributes": [
              {
                "Name": "asp-fragment"
              }
            ]
          },
          {
            "TagName": "button",
            "Attributes": [
              {
                "Name": "asp-route"
              }
            ]
          },
          {
            "TagName": "button",
            "Attributes": [
              {
                "Name": "asp-all-route-data"
              }
            ]
          },
          {
            "TagName": "button",
            "Attributes": [
              {
                "Name": "asp-route-",
                "NameComparison": 1
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "image",
                "ValueComparison": 1
              },
              {
                "Name": "asp-action"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "image",
                "ValueComparison": 1
              },
              {
                "Name": "asp-controller"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "image",
                "ValueComparison": 1
              },
              {
                "Name": "asp-area"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "image",
                "ValueComparison": 1
              },
              {
                "Name": "asp-page"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "image",
                "ValueComparison": 1
              },
              {
                "Name": "asp-page-handler"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "image",
                "ValueComparison": 1
              },
              {
                "Name": "asp-fragment"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "image",
                "ValueComparison": 1
              },
              {
                "Name": "asp-route"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "image",
                "ValueComparison": 1
              },
              {
                "Name": "asp-all-route-data"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "image",
                "ValueComparison": 1
              },
              {
                "Name": "asp-route-",
                "NameComparison": 1
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "submit",
                "ValueComparison": 1
              },
              {
                "Name": "asp-action"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "submit",
                "ValueComparison": 1
              },
              {
                "Name": "asp-controller"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "submit",
                "ValueComparison": 1
              },
              {
                "Name": "asp-area"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "submit",
                "ValueComparison": 1
              },
              {
                "Name": "asp-page"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "submit",
                "ValueComparison": 1
              },
              {
                "Name": "asp-page-handler"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "submit",
                "ValueComparison": 1
              },
              {
                "Name": "asp-fragment"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "submit",
                "ValueComparison": 1
              },
              {
                "Name": "asp-route"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "submit",
                "ValueComparison": 1
              },
              {
                "Name": "asp-all-route-data"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "submit",
                "ValueComparison": 1
              },
              {
                "Name": "asp-route-",
                "NameComparison": 1
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "asp-action",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The name of the action method.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Action"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-controller",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The name of the controller.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Controller"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-area",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The name of the area.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Area"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-page",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The name of the page.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Page"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-page-handler",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The name of the page handler.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PageHandler"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fragment",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the URL fragment.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Fragment"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-route",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Name of the route.\n            </summary>\n            <remarks>\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.Action\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.Controller\" /> is non-<c>null</c>.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "Route"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-all-route-data",
            "TypeName": "System.Collections.Generic.IDictionary<System.String, System.String>",
            "IndexerNamePrefix": "asp-route-",
            "IndexerTypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional parameters for the route.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RouteValues"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "ITagHelper",
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper"
        }
      },
      {
        "HashCode": -91825474,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;form&gt; elements.\n            </summary>\n        ",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "form"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "asp-action",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The name of the action method.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Action"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-controller",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The name of the controller.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Controller"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-area",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The name of the area.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Area"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-page",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The name of the page.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Page"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-page-handler",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The name of the page handler.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PageHandler"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-antiforgery",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Whether the antiforgery token should be generated.\n            </summary>\n            <value>Defaults to <c>false</c> if user provides an <c>action</c> attribute\n            or if the <c>method</c> is <see cref=\"F:Microsoft.AspNetCore.Mvc.Rendering.FormMethod.Get\" />; <c>true</c> otherwise.</value>\n        ",
            "Metadata": {
              "Common.PropertyName": "Antiforgery"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fragment",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the URL fragment.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Fragment"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-route",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Name of the route.\n            </summary>\n            <remarks>\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.Action\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.Controller\" /> is non-<c>null</c>.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "Route"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-all-route-data",
            "TypeName": "System.Collections.Generic.IDictionary<System.String, System.String>",
            "IndexerNamePrefix": "asp-route-",
            "IndexerTypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional parameters for the route.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RouteValues"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "ITagHelper",
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper"
        }
      },
      {
        "HashCode": -248207518,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.ImageTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;img&gt; elements that supports file versioning.\n            </summary>\n            <remarks>\n            The tag helper won't process for cases with just the 'src' attribute.\n            </remarks>\n        ",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "img",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "asp-append-version"
              },
              {
                "Name": "src"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "src",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Source of the image.\n            </summary>\n            <remarks>\n            Passed through to the generated HTML in all cases.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "Src"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-append-version",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Value indicating if file version should be appended to the src urls.\n            </summary>\n            <remarks>\n            If <c>true</c> then a query string \"v\" with the encoded content of the file is added.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "AppendVersion"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "ITagHelper",
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.ImageTagHelper"
        }
      },
      {
        "HashCode": 101784419,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;input&gt; elements with an <c>asp-for</c> attribute.\n            </summary>\n        ",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "asp-for"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "asp-for",
            "TypeName": "Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression",
            "Documentation": "\n            <summary>\n            An expression to be evaluated against the current model.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-format",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The format string (see https://msdn.microsoft.com/en-us/library/txafckwd.aspx) used to format the\n            <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.For\" /> result. Sets the generated \"value\" attribute to that formatted string.\n            </summary>\n            <remarks>\n            Not used if the provided (see <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.InputTypeName\" />) or calculated \"type\" attribute value is\n            <c>checkbox</c>, <c>password</c>, or <c>radio</c>. That is, <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.Format\" /> is used when calling\n            <see cref=\"M:Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator.GenerateTextBox(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer,System.String,System.Object,System.String,System.Object)\" />.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "Format"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "type",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The type of the &lt;input&gt; element.\n            </summary>\n            <remarks>\n            Passed through to the generated HTML in all cases. Also used to determine the <see cref=\"T:Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator\" />\n            helper to call and the default <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.Format\" /> value. A default <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.Format\" /> is not calculated\n            if the provided (see <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.InputTypeName\" />) or calculated \"type\" attribute value is <c>checkbox</c>,\n            <c>hidden</c>, <c>password</c>, or <c>radio</c>.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputTypeName"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "name",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The name of the &lt;input&gt; element.\n            </summary>\n            <remarks>\n            Passed through to the generated HTML in all cases. Also used to determine whether <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.For\" /> is\n            valid with an empty <see cref=\"P:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression.Name\" />.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "Name"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "value",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The value of the &lt;input&gt; element.\n            </summary>\n            <remarks>\n            Passed through to the generated HTML in all cases. Also used to determine the generated \"checked\" attribute\n            if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.InputTypeName\" /> is \"radio\". Must not be <c>null</c> in that case.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "ITagHelper",
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper"
        }
      },
      {
        "HashCode": 1485244122,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;label&gt; elements with an <c>asp-for</c> attribute.\n            </summary>\n        ",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "label",
            "Attributes": [
              {
                "Name": "asp-for"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "asp-for",
            "TypeName": "Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression",
            "Documentation": "\n            <summary>\n            An expression to be evaluated against the current model.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "ITagHelper",
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper"
        }
      },
      {
        "HashCode": 2142480928,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;link&gt; elements that supports fallback href paths.\n            </summary>\n            <remarks>\n            The tag helper won't process for cases with just the 'href' attribute.\n            </remarks>\n        ",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "link",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "asp-href-include"
              }
            ]
          },
          {
            "TagName": "link",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "asp-href-exclude"
              }
            ]
          },
          {
            "TagName": "link",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "asp-fallback-href"
              }
            ]
          },
          {
            "TagName": "link",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "asp-fallback-href-include"
              }
            ]
          },
          {
            "TagName": "link",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "asp-fallback-href-exclude"
              }
            ]
          },
          {
            "TagName": "link",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "asp-fallback-test-class"
              }
            ]
          },
          {
            "TagName": "link",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "asp-fallback-test-property"
              }
            ]
          },
          {
            "TagName": "link",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "asp-fallback-test-value"
              }
            ]
          },
          {
            "TagName": "link",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "asp-append-version"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "href",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Address of the linked resource.\n            </summary>\n            <remarks>\n            Passed through to the generated HTML in all cases.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "Href"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-href-include",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            A comma separated list of globbed file patterns of CSS stylesheets to load.\n            The glob patterns are assessed relative to the application's 'webroot' setting.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HrefInclude"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-href-exclude",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            A comma separated list of globbed file patterns of CSS stylesheets to exclude from loading.\n            The glob patterns are assessed relative to the application's 'webroot' setting.\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.HrefInclude\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HrefExclude"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fallback-href",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The URL of a CSS stylesheet to fallback to in the case the primary one fails.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FallbackHref"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-suppress-fallback-integrity",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Boolean value that determines if an integrity hash will be compared with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHref\" /> value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SuppressFallbackIntegrity"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-append-version",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Value indicating if file version should be appended to the href urls.\n            </summary>\n            <remarks>\n            If <c>true</c> then a query string \"v\" with the encoded content of the file is added.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "AppendVersion"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fallback-href-include",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            A comma separated list of globbed file patterns of CSS stylesheets to fallback to in the case the primary\n            one fails.\n            The glob patterns are assessed relative to the application's 'webroot' setting.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FallbackHrefInclude"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fallback-href-exclude",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            A comma separated list of globbed file patterns of CSS stylesheets to exclude from the fallback list, in\n            the case the primary one fails.\n            The glob patterns are assessed relative to the application's 'webroot' setting.\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHrefInclude\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FallbackHrefExclude"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fallback-test-class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The class name defined in the stylesheet to use for the fallback test.\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestProperty\" /> and <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestValue\" />,\n            and either <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHref\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHrefInclude\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FallbackTestClass"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fallback-test-property",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The CSS property name to use for the fallback test.\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestClass\" /> and <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestValue\" />,\n            and either <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHref\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHrefInclude\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FallbackTestProperty"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fallback-test-value",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The CSS property value to use for the fallback test.\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestClass\" /> and <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestProperty\" />,\n            and either <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHref\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHrefInclude\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FallbackTestValue"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "ITagHelper",
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper"
        }
      },
      {
        "HashCode": 1253548802,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;option&gt; elements.\n            </summary>\n            <remarks>\n            This <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> works in conjunction with <see cref=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper\" />. It reads elements\n            content but does not modify that content. The only modification it makes is to add a <c>selected</c> attribute\n            in some cases.\n            </remarks>\n        ",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "option"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "value",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Specifies a value for the &lt;option&gt; element.\n            </summary>\n            <remarks>\n            Passed through to the generated HTML in all cases.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "ITagHelper",
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper"
        }
      },
      {
        "HashCode": 643572243,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "\n            <summary>\n            Renders a partial view.\n            </summary>\n        ",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "partial",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "name"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "name",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The name or path of the partial view that is rendered to the response.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Name"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "for",
            "TypeName": "Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression",
            "Documentation": "\n            <summary>\n            An expression to be evaluated against the current model. Cannot be used together with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.Model\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "model",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            The model to pass into the partial view. Cannot be used together with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.For\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Model"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "optional",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When optional, executing the tag helper will no-op if the view cannot be located.\n            Otherwise will throw stating the view could not be found.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Optional"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "fallback-name",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            View to lookup if the view specified by <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.Name\" /> cannot be located.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FallbackName"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "view-data",
            "TypeName": "Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary",
            "IndexerNamePrefix": "view-data-",
            "IndexerTypeName": "System.Object",
            "Documentation": "\n            <summary>\n            A <see cref=\"T:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary\" /> to pass into the partial view.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ViewData"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "ITagHelper",
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper"
        }
      },
      {
        "HashCode": 1470701497,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.PersistComponentStateTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "\n            <summary>\n            A <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.TagHelper\" /> that saves the state of Razor components rendered on the page up to that point.\n            </summary>\n        ",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "persist-component-state",
            "TagStructure": 2
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "persist-mode",
            "TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.PersistenceMode?",
            "Documentation": "\n            <summary>\n            Gets or sets the <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PersistComponentStateTagHelper.PersistenceMode\" /> for the state to persist.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PersistenceMode"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "ITagHelper",
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.PersistComponentStateTagHelper"
        }
      },
      {
        "HashCode": 1884971208,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;script&gt; elements that supports fallback src paths.\n            </summary>\n            <remarks>\n            The tag helper won't process for cases with just the 'src' attribute.\n            </remarks>\n        ",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "script",
            "Attributes": [
              {
                "Name": "asp-src-include"
              }
            ]
          },
          {
            "TagName": "script",
            "Attributes": [
              {
                "Name": "asp-src-exclude"
              }
            ]
          },
          {
            "TagName": "script",
            "Attributes": [
              {
                "Name": "asp-fallback-src"
              }
            ]
          },
          {
            "TagName": "script",
            "Attributes": [
              {
                "Name": "asp-fallback-src-include"
              }
            ]
          },
          {
            "TagName": "script",
            "Attributes": [
              {
                "Name": "asp-fallback-src-exclude"
              }
            ]
          },
          {
            "TagName": "script",
            "Attributes": [
              {
                "Name": "asp-fallback-test"
              }
            ]
          },
          {
            "TagName": "script",
            "Attributes": [
              {
                "Name": "asp-append-version"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "src",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Address of the external script to use.\n            </summary>\n            <remarks>\n            Passed through to the generated HTML in all cases.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "Src"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-src-include",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            A comma separated list of globbed file patterns of JavaScript scripts to load.\n            The glob patterns are assessed relative to the application's 'webroot' setting.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SrcInclude"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-src-exclude",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            A comma separated list of globbed file patterns of JavaScript scripts to exclude from loading.\n            The glob patterns are assessed relative to the application's 'webroot' setting.\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.SrcInclude\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SrcExclude"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fallback-src",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The URL of a Script tag to fallback to in the case the primary one fails.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FallbackSrc"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-suppress-fallback-integrity",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Boolean value that determines if an integrity hash will be compared with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.FallbackSrc\" /> value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SuppressFallbackIntegrity"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-append-version",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Value indicating if file version should be appended to src urls.\n            </summary>\n            <remarks>\n            A query string \"v\" with the encoded content of the file is added.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "AppendVersion"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fallback-src-include",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            A comma separated list of globbed file patterns of JavaScript scripts to fallback to in the case the\n            primary one fails.\n            The glob patterns are assessed relative to the application's 'webroot' setting.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FallbackSrcInclude"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fallback-src-exclude",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            A comma separated list of globbed file patterns of JavaScript scripts to exclude from the fallback list, in\n            the case the primary one fails.\n            The glob patterns are assessed relative to the application's 'webroot' setting.\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.FallbackSrcInclude\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FallbackSrcExclude"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fallback-test",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The script method defined in the primary script to use for the fallback test.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FallbackTestExpression"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "ITagHelper",
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper"
        }
      },
      {
        "HashCode": 1013644952,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;select&gt; elements with <c>asp-for</c> and/or\n            <c>asp-items</c> attribute(s).\n            </summary>\n        ",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "select",
            "Attributes": [
              {
                "Name": "asp-for"
              }
            ]
          },
          {
            "TagName": "select",
            "Attributes": [
              {
                "Name": "asp-items"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "asp-for",
            "TypeName": "Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression",
            "Documentation": "\n            <summary>\n            An expression to be evaluated against the current model.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-items",
            "TypeName": "System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>",
            "Documentation": "\n            <summary>\n            A collection of <see cref=\"T:Microsoft.AspNetCore.Mvc.Rendering.SelectListItem\" /> objects used to populate the &lt;select&gt; element with\n            &lt;optgroup&gt; and &lt;option&gt; elements.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Items"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "name",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The name of the &lt;input&gt; element.\n            </summary>\n            <remarks>\n            Passed through to the generated HTML in all cases. Also used to determine whether <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper.For\" /> is\n            valid with an empty <see cref=\"P:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression.Name\" />.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "Name"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "ITagHelper",
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper"
        }
      },
      {
        "HashCode": 906726600,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.TextAreaTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;textarea&gt; elements with an <c>asp-for</c> attribute.\n            </summary>\n        ",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "textarea",
            "Attributes": [
              {
                "Name": "asp-for"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "asp-for",
            "TypeName": "Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression",
            "Documentation": "\n            <summary>\n            An expression to be evaluated against the current model.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "name",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The name of the &lt;input&gt; element.\n            </summary>\n            <remarks>\n            Passed through to the generated HTML in all cases. Also used to determine whether <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.TextAreaTagHelper.For\" /> is\n            valid with an empty <see cref=\"P:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression.Name\" />.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "Name"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "ITagHelper",
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.TextAreaTagHelper"
        }
      },
      {
        "HashCode": -2082634604,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.ValidationMessageTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting any HTML element with an <c>asp-validation-for</c>\n            attribute.\n            </summary>\n        ",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "span",
            "Attributes": [
              {
                "Name": "asp-validation-for"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "asp-validation-for",
            "TypeName": "Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression",
            "Documentation": "\n            <summary>\n            Gets an expression to be evaluated against the current model.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "ITagHelper",
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.ValidationMessageTagHelper"
        }
      },
      {
        "HashCode": -887397812,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.ValidationSummaryTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting any HTML element with an <c>asp-validation-summary</c>\n            attribute.\n            </summary>\n        ",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "div",
            "Attributes": [
              {
                "Name": "asp-validation-summary"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "asp-validation-summary",
            "TypeName": "Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            If <see cref=\"F:Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary.All\" /> or <see cref=\"F:Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary.ModelOnly\" />, appends a validation\n            summary. Otherwise (<see cref=\"F:Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary.None\" />, the default), this tag helper does nothing.\n            </summary>\n            <exception cref=\"T:System.ArgumentException\">\n            Thrown if setter is called with an undefined <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ValidationSummaryTagHelper.ValidationSummary\" /> value e.g.\n            <c>(ValidationSummary)23</c>.\n            </exception>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValidationSummary"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "ITagHelper",
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.ValidationSummaryTagHelper"
        }
      },
      {
        "HashCode": 141407075,
        "Kind": "Components.Bind",
        "Name": "Bind",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to an attribute and a change event, based on the naming of the bind attribute. For example: <code>@bind-value=\"...\"</code> and <code>@bind-value:event=\"onchange\"</code> will assign the current value of the expression to the 'value' attribute, and assign a delegate that attempts to set the value to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@bind-",
                "NameComparison": 1,
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-...",
            "TypeName": "System.Collections.Generic.Dictionary<string, object>",
            "IndexerNamePrefix": "@bind-",
            "IndexerTypeName": "System.Object",
            "Documentation": "Binds the provided expression to an attribute and a change event, based on the naming of the bind attribute. For example: <code>@bind-value=\"...\"</code> and <code>@bind-value:event=\"onchange\"</code> will assign the current value of the expression to the 'value' attribute, and assign a delegate that attempts to set the value to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the corresponding bind attribute. For example: <code>@bind-value:format=\"...\"</code> will apply a format string to the value specified in <code>@bind-value=\"...\"</code>. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind-...' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Common.ClassifyAttributesOnly": "True",
          "Components.Bind.Fallback": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Bind"
        }
      },
      {
        "HashCode": 1135165520,
        "Kind": "Components.Bind",
        "Name": "Bind",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "@bind",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Common.ClassifyAttributesOnly": "True",
          "Components.Bind.ValueAttribute": "value",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.IsInvariantCulture": "False",
          "Components.Bind.Format": null,
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes"
        }
      },
      {
        "HashCode": -1432910606,
        "Kind": "Components.Bind",
        "Name": "Bind_value",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "@bind-value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-value",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind_value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Common.ClassifyAttributesOnly": "True",
          "Components.Bind.ValueAttribute": "value",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.IsInvariantCulture": "False",
          "Components.Bind.Format": null,
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes"
        }
      },
      {
        "HashCode": -168823864,
        "Kind": "Components.Bind",
        "Name": "Bind",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'checked' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "checkbox",
                "ValueComparison": 1
              },
              {
                "Name": "@bind",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'checked' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_checked"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_checked"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-checked",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_checked"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Common.ClassifyAttributesOnly": "True",
          "Components.Bind.ValueAttribute": "checked",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.IsInvariantCulture": "False",
          "Components.Bind.Format": null,
          "Components.Bind.TypeAttribute": "checkbox",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes"
        }
      },
      {
        "HashCode": -424622683,
        "Kind": "Components.Bind",
        "Name": "Bind",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "text",
                "ValueComparison": 1
              },
              {
                "Name": "@bind",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Common.ClassifyAttributesOnly": "True",
          "Components.Bind.ValueAttribute": "value",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.IsInvariantCulture": "False",
          "Components.Bind.Format": null,
          "Components.Bind.TypeAttribute": "text",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes"
        }
      },
      {
        "HashCode": -1632586745,
        "Kind": "Components.Bind",
        "Name": "Bind",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "number",
                "ValueComparison": 1
              },
              {
                "Name": "@bind",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Common.ClassifyAttributesOnly": "True",
          "Components.Bind.ValueAttribute": "value",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.IsInvariantCulture": "True",
          "Components.Bind.Format": null,
          "Components.Bind.TypeAttribute": "number",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes"
        }
      },
      {
        "HashCode": 1603119386,
        "Kind": "Components.Bind",
        "Name": "Bind_value",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "number",
                "ValueComparison": 1
              },
              {
                "Name": "@bind-value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-value",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind_value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Common.ClassifyAttributesOnly": "True",
          "Components.Bind.ValueAttribute": "value",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.IsInvariantCulture": "True",
          "Components.Bind.Format": null,
          "Components.Bind.TypeAttribute": "number",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes"
        }
      },
      {
        "HashCode": 1617849760,
        "Kind": "Components.Bind",
        "Name": "Bind",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "date",
                "ValueComparison": 1
              },
              {
                "Name": "@bind",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Common.ClassifyAttributesOnly": "True",
          "Components.Bind.ValueAttribute": "value",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.IsInvariantCulture": "True",
          "Components.Bind.Format": "yyyy-MM-dd",
          "Components.Bind.TypeAttribute": "date",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes"
        }
      },
      {
        "HashCode": 1032959981,
        "Kind": "Components.Bind",
        "Name": "Bind_value",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "date",
                "ValueComparison": 1
              },
              {
                "Name": "@bind-value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-value",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind_value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Common.ClassifyAttributesOnly": "True",
          "Components.Bind.ValueAttribute": "value",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.IsInvariantCulture": "True",
          "Components.Bind.Format": "yyyy-MM-dd",
          "Components.Bind.TypeAttribute": "date",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes"
        }
      },
      {
        "HashCode": 272177428,
        "Kind": "Components.Bind",
        "Name": "Bind",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "datetime-local",
                "ValueComparison": 1
              },
              {
                "Name": "@bind",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Common.ClassifyAttributesOnly": "True",
          "Components.Bind.ValueAttribute": "value",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.IsInvariantCulture": "True",
          "Components.Bind.Format": "yyyy-MM-ddTHH:mm:ss",
          "Components.Bind.TypeAttribute": "datetime-local",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes"
        }
      },
      {
        "HashCode": 1301266069,
        "Kind": "Components.Bind",
        "Name": "Bind_value",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "datetime-local",
                "ValueComparison": 1
              },
              {
                "Name": "@bind-value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-value",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind_value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Common.ClassifyAttributesOnly": "True",
          "Components.Bind.ValueAttribute": "value",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.IsInvariantCulture": "True",
          "Components.Bind.Format": "yyyy-MM-ddTHH:mm:ss",
          "Components.Bind.TypeAttribute": "datetime-local",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes"
        }
      },
      {
        "HashCode": 1494465513,
        "Kind": "Components.Bind",
        "Name": "Bind",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "month",
                "ValueComparison": 1
              },
              {
                "Name": "@bind",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Common.ClassifyAttributesOnly": "True",
          "Components.Bind.ValueAttribute": "value",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.IsInvariantCulture": "True",
          "Components.Bind.Format": "yyyy-MM",
          "Components.Bind.TypeAttribute": "month",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes"
        }
      },
      {
        "HashCode": 1191265366,
        "Kind": "Components.Bind",
        "Name": "Bind_value",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "month",
                "ValueComparison": 1
              },
              {
                "Name": "@bind-value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-value",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind_value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Common.ClassifyAttributesOnly": "True",
          "Components.Bind.ValueAttribute": "value",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.IsInvariantCulture": "True",
          "Components.Bind.Format": "yyyy-MM",
          "Components.Bind.TypeAttribute": "month",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes"
        }
      },
      {
        "HashCode": -676580572,
        "Kind": "Components.Bind",
        "Name": "Bind",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "time",
                "ValueComparison": 1
              },
              {
                "Name": "@bind",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Common.ClassifyAttributesOnly": "True",
          "Components.Bind.ValueAttribute": "value",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.IsInvariantCulture": "True",
          "Components.Bind.Format": "HH:mm:ss",
          "Components.Bind.TypeAttribute": "time",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes"
        }
      },
      {
        "HashCode": -1475182035,
        "Kind": "Components.Bind",
        "Name": "Bind_value",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "time",
                "ValueComparison": 1
              },
              {
                "Name": "@bind-value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-value",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind_value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Common.ClassifyAttributesOnly": "True",
          "Components.Bind.ValueAttribute": "value",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.IsInvariantCulture": "True",
          "Components.Bind.Format": "HH:mm:ss",
          "Components.Bind.TypeAttribute": "time",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes"
        }
      },
      {
        "HashCode": 590119871,
        "Kind": "Components.Bind",
        "Name": "Bind",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "select",
            "Attributes": [
              {
                "Name": "@bind",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Common.ClassifyAttributesOnly": "True",
          "Components.Bind.ValueAttribute": "value",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.IsInvariantCulture": "False",
          "Components.Bind.Format": null,
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes"
        }
      },
      {
        "HashCode": 1579814920,
        "Kind": "Components.Bind",
        "Name": "Bind",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "textarea",
            "Attributes": [
              {
                "Name": "@bind",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Common.ClassifyAttributesOnly": "True",
          "Components.Bind.ValueAttribute": "value",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.IsInvariantCulture": "False",
          "Components.Bind.Format": null,
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes"
        }
      },
      {
        "HashCode": -586256917,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxAccordion",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'ExpandedItemId' property and a change event delegate to the 'ExpandedItemIdChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxAccordion",
            "Attributes": [
              {
                "Name": "@bind-ExpandedItemId",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-ExpandedItemId",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'ExpandedItemId' property and a change event delegate to the 'ExpandedItemIdChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ExpandedItemId"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "ExpandedItemId",
          "Components.Bind.ChangeAttribute": "ExpandedItemIdChanged",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxAccordion"
        }
      },
      {
        "HashCode": -436569708,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxAccordion",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'ExpandedItemId' property and a change event delegate to the 'ExpandedItemIdChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxAccordion",
            "Attributes": [
              {
                "Name": "@bind-ExpandedItemId",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-ExpandedItemId",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'ExpandedItemId' property and a change event delegate to the 'ExpandedItemIdChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ExpandedItemId"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "ExpandedItemId",
          "Components.Bind.ChangeAttribute": "ExpandedItemIdChanged",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxAccordion",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -489716644,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCalendar",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxCalendar",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.DateTime?>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCalendar"
        }
      },
      {
        "HashCode": 1304268130,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCalendar",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'DisplayMonth' property and a change event delegate to the 'DisplayMonthChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxCalendar",
            "Attributes": [
              {
                "Name": "@bind-DisplayMonth",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-DisplayMonth",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.DateTime>",
            "Documentation": "Binds the provided expression to the 'DisplayMonth' property and a change event delegate to the 'DisplayMonthChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "DisplayMonth"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "DisplayMonth",
          "Components.Bind.ChangeAttribute": "DisplayMonthChanged",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCalendar"
        }
      },
      {
        "HashCode": -1632825049,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCalendar",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxCalendar",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.DateTime?>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCalendar",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -188030695,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCalendar",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'DisplayMonth' property and a change event delegate to the 'DisplayMonthChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxCalendar",
            "Attributes": [
              {
                "Name": "@bind-DisplayMonth",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-DisplayMonth",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.DateTime>",
            "Documentation": "Binds the provided expression to the 'DisplayMonth' property and a change event delegate to the 'DisplayMonthChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "DisplayMonth"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "DisplayMonth",
          "Components.Bind.ChangeAttribute": "DisplayMonthChanged",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCalendar",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1453016929,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxFilterForm<TModel>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'Model' property and a change event delegate to the 'ModelChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxFilterForm",
            "Attributes": [
              {
                "Name": "@bind-Model",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Model",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TModel>",
            "Documentation": "Binds the provided expression to the 'Model' property and a change event delegate to the 'ModelChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Model"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Model",
          "Components.Bind.ChangeAttribute": "ModelChanged",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxFilterForm<TModel>"
        }
      },
      {
        "HashCode": 522977428,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxFilterForm<TModel>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'Model' property and a change event delegate to the 'ModelChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxFilterForm",
            "Attributes": [
              {
                "Name": "@bind-Model",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Model",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TModel>",
            "Documentation": "Binds the provided expression to the 'Model' property and a change event delegate to the 'ModelChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Model"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Model",
          "Components.Bind.ChangeAttribute": "ModelChanged",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxFilterForm<TModel>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1056991974,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxAutosuggest",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>"
        }
      },
      {
        "HashCode": 1033650691,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 439486893,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxCheckboxList",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.List<TValue>>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem>"
        }
      },
      {
        "HashCode": -1896413100,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.List<TValue>>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1848998674,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputCheckbox",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxInputCheckbox",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputCheckbox"
        }
      },
      {
        "HashCode": -1941877554,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputCheckbox",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxInputCheckbox",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputCheckbox",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1689441015,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxInputDate",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>"
        }
      },
      {
        "HashCode": 4125040,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxInputDate",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1845981996,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxInputDateRange",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.Bootstrap.DateTimeRange>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange"
        }
      },
      {
        "HashCode": 1960470264,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.Bootstrap.DateTimeRange>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1725674587,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxInputNumber",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>"
        }
      },
      {
        "HashCode": -125966252,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxInputNumber",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1148408477,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxInputPercent",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>"
        }
      },
      {
        "HashCode": -1512570483,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxInputPercent",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1801411418,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputSwitch",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxInputSwitch",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputSwitch"
        }
      },
      {
        "HashCode": -148844239,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputSwitch",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxInputSwitch",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputSwitch",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -240154963,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputText",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxInputText",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputText"
        }
      },
      {
        "HashCode": 135579395,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputText",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxInputText",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputText",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1828774987,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxInputTextArea",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea"
        }
      },
      {
        "HashCode": -1346593290,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -936225413,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxRadioButtonList",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>"
        }
      },
      {
        "HashCode": 334066971,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 7970638,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxSelect",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>"
        }
      },
      {
        "HashCode": 372926062,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxSelect",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 757031914,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'SelectedDataItem' property and a change event delegate to the 'SelectedDataItemChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxGrid",
            "Attributes": [
              {
                "Name": "@bind-SelectedDataItem",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedDataItem",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TItem>",
            "Documentation": "Binds the provided expression to the 'SelectedDataItem' property and a change event delegate to the 'SelectedDataItemChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedDataItem"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedDataItem",
          "Components.Bind.ChangeAttribute": "SelectedDataItemChanged",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>"
        }
      },
      {
        "HashCode": 755697198,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'SelectedDataItems' property and a change event delegate to the 'SelectedDataItemsChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxGrid",
            "Attributes": [
              {
                "Name": "@bind-SelectedDataItems",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedDataItems",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.HashSet<TItem>>",
            "Documentation": "Binds the provided expression to the 'SelectedDataItems' property and a change event delegate to the 'SelectedDataItemsChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedDataItems"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedDataItems",
          "Components.Bind.ChangeAttribute": "SelectedDataItemsChanged",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>"
        }
      },
      {
        "HashCode": -228062983,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'CurrentUserState' property and a change event delegate to the 'CurrentUserStateChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxGrid",
            "Attributes": [
              {
                "Name": "@bind-CurrentUserState",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-CurrentUserState",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.Bootstrap.GridUserState<TItem>>",
            "Documentation": "Binds the provided expression to the 'CurrentUserState' property and a change event delegate to the 'CurrentUserStateChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "CurrentUserState"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "CurrentUserState",
          "Components.Bind.ChangeAttribute": "CurrentUserStateChanged",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>"
        }
      },
      {
        "HashCode": -1322787658,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'SelectedDataItem' property and a change event delegate to the 'SelectedDataItemChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxGrid",
            "Attributes": [
              {
                "Name": "@bind-SelectedDataItem",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedDataItem",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TItem>",
            "Documentation": "Binds the provided expression to the 'SelectedDataItem' property and a change event delegate to the 'SelectedDataItemChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedDataItem"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedDataItem",
          "Components.Bind.ChangeAttribute": "SelectedDataItemChanged",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1225490755,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'SelectedDataItems' property and a change event delegate to the 'SelectedDataItemsChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxGrid",
            "Attributes": [
              {
                "Name": "@bind-SelectedDataItems",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedDataItems",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.HashSet<TItem>>",
            "Documentation": "Binds the provided expression to the 'SelectedDataItems' property and a change event delegate to the 'SelectedDataItemsChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedDataItems"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedDataItems",
          "Components.Bind.ChangeAttribute": "SelectedDataItemsChanged",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1508430413,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'CurrentUserState' property and a change event delegate to the 'CurrentUserStateChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxGrid",
            "Attributes": [
              {
                "Name": "@bind-CurrentUserState",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-CurrentUserState",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.Bootstrap.GridUserState<TItem>>",
            "Documentation": "Binds the provided expression to the 'CurrentUserState' property and a change event delegate to the 'CurrentUserStateChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "CurrentUserState"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "CurrentUserState",
          "Components.Bind.ChangeAttribute": "CurrentUserStateChanged",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1733803289,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxPager",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'CurrentPageIndex' property and a change event delegate to the 'CurrentPageIndexChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxPager",
            "Attributes": [
              {
                "Name": "@bind-CurrentPageIndex",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-CurrentPageIndex",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "Binds the provided expression to the 'CurrentPageIndex' property and a change event delegate to the 'CurrentPageIndexChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "CurrentPageIndex"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "CurrentPageIndex",
          "Components.Bind.ChangeAttribute": "CurrentPageIndexChanged",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxPager"
        }
      },
      {
        "HashCode": -323091736,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxPager",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'CurrentPageIndex' property and a change event delegate to the 'CurrentPageIndexChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxPager",
            "Attributes": [
              {
                "Name": "@bind-CurrentPageIndex",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-CurrentPageIndex",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "Binds the provided expression to the 'CurrentPageIndex' property and a change event delegate to the 'CurrentPageIndexChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "CurrentPageIndex"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "CurrentPageIndex",
          "Components.Bind.ChangeAttribute": "CurrentPageIndexChanged",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxPager",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1642255484,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'FilterModel' property and a change event delegate to the 'FilterModelChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxListLayout",
            "Attributes": [
              {
                "Name": "@bind-FilterModel",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-FilterModel",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TFilterModel>",
            "Documentation": "Binds the provided expression to the 'FilterModel' property and a change event delegate to the 'FilterModelChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "FilterModel"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "FilterModel",
          "Components.Bind.ChangeAttribute": "FilterModelChanged",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>"
        }
      },
      {
        "HashCode": -1007518957,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'FilterModel' property and a change event delegate to the 'FilterModelChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout",
            "Attributes": [
              {
                "Name": "@bind-FilterModel",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-FilterModel",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TFilterModel>",
            "Documentation": "Binds the provided expression to the 'FilterModel' property and a change event delegate to the 'FilterModelChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "FilterModel"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "FilterModel",
          "Components.Bind.ChangeAttribute": "FilterModelChanged",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1129005388,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxNamedViewList<TFilterModel>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'FilterModel' property and a change event delegate to the 'FilterModelChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxNamedViewList",
            "Attributes": [
              {
                "Name": "@bind-FilterModel",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-FilterModel",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TFilterModel>",
            "Documentation": "Binds the provided expression to the 'FilterModel' property and a change event delegate to the 'FilterModelChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "FilterModel"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "FilterModel",
          "Components.Bind.ChangeAttribute": "FilterModelChanged",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxNamedViewList<TFilterModel>"
        }
      },
      {
        "HashCode": 770564392,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxNamedViewList<TFilterModel>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'FilterModel' property and a change event delegate to the 'FilterModelChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxNamedViewList",
            "Attributes": [
              {
                "Name": "@bind-FilterModel",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-FilterModel",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TFilterModel>",
            "Documentation": "Binds the provided expression to the 'FilterModel' property and a change event delegate to the 'FilterModelChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "FilterModel"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "FilterModel",
          "Components.Bind.ChangeAttribute": "FilterModelChanged",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxNamedViewList<TFilterModel>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1121878463,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxTabPanel",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'ActiveTabId' property and a change event delegate to the 'ActiveTabIdChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxTabPanel",
            "Attributes": [
              {
                "Name": "@bind-ActiveTabId",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-ActiveTabId",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'ActiveTabId' property and a change event delegate to the 'ActiveTabIdChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ActiveTabId"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "ActiveTabId",
          "Components.Bind.ChangeAttribute": "ActiveTabIdChanged",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxTabPanel"
        }
      },
      {
        "HashCode": -258379967,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxTabPanel",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'ActiveTabId' property and a change event delegate to the 'ActiveTabIdChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxTabPanel",
            "Attributes": [
              {
                "Name": "@bind-ActiveTabId",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-ActiveTabId",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'ActiveTabId' property and a change event delegate to the 'ActiveTabIdChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ActiveTabId"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "ActiveTabId",
          "Components.Bind.ChangeAttribute": "ActiveTabIdChanged",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxTabPanel",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1219451261,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputTags",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxInputTags",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.List<System.String>>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputTags"
        }
      },
      {
        "HashCode": -2026656355,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxInputTags",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxInputTags",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.List<System.String>>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxInputTags",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 2087065989,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxTreeView<TItem>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'SelectedItem' property and a change event delegate to the 'SelectedItemChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxTreeView",
            "Attributes": [
              {
                "Name": "@bind-SelectedItem",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedItem",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TItem>",
            "Documentation": "Binds the provided expression to the 'SelectedItem' property and a change event delegate to the 'SelectedItemChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedItem"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedItem",
          "Components.Bind.ChangeAttribute": "SelectedItemChanged",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxTreeView<TItem>"
        }
      },
      {
        "HashCode": 1470701172,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.HxTreeView<TItem>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'SelectedItem' property and a change event delegate to the 'SelectedItemChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.HxTreeView",
            "Attributes": [
              {
                "Name": "@bind-SelectedItem",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedItem",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TItem>",
            "Documentation": "Binds the provided expression to the 'SelectedItem' property and a change event delegate to the 'SelectedItemChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedItem"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedItem",
          "Components.Bind.ChangeAttribute": "SelectedItemChanged",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.HxTreeView<TItem>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -33941342,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxAutosuggestInternal",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue>"
        }
      },
      {
        "HashCode": 712770442,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -2144486649,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal<TValue>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxInputDateInternal",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal<TValue>"
        }
      },
      {
        "HashCode": -1660660256,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal<TValue>",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal<TValue>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 359340228,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateRangeInternal",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxInputDateRangeInternal",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.Bootstrap.DateTimeRange>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateRangeInternal"
        }
      },
      {
        "HashCode": 1755531077,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateRangeInternal",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateRangeInternal",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.Bootstrap.DateTimeRange>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateRangeInternal",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1344776708,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxInputTagsInternal",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.List<System.String>>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal"
        }
      },
      {
        "HashCode": 1098544748,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal",
        "AssemblyName": "Havit.Blazor.Components.Web.Bootstrap",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.List<System.String>>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Common.TypeName": "Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -411517137,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.HxModelEditForm<TModel>",
        "AssemblyName": "Havit.Blazor.Components.Web",
        "Documentation": "Binds the provided expression to the 'Model' property and a change event delegate to the 'ModelChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxModelEditForm",
            "Attributes": [
              {
                "Name": "@bind-Model",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Model",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TModel>",
            "Documentation": "Binds the provided expression to the 'Model' property and a change event delegate to the 'ModelChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Model"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Model",
          "Components.Bind.ChangeAttribute": "ModelChanged",
          "Common.TypeName": "Havit.Blazor.Components.Web.HxModelEditForm<TModel>"
        }
      },
      {
        "HashCode": -903844394,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.HxModelEditForm<TModel>",
        "AssemblyName": "Havit.Blazor.Components.Web",
        "Documentation": "Binds the provided expression to the 'Model' property and a change event delegate to the 'ModelChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.HxModelEditForm",
            "Attributes": [
              {
                "Name": "@bind-Model",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Model",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TModel>",
            "Documentation": "Binds the provided expression to the 'Model' property and a change event delegate to the 'ModelChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Model"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Model",
          "Components.Bind.ChangeAttribute": "ModelChanged",
          "Common.TypeName": "Havit.Blazor.Components.Web.HxModelEditForm<TModel>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 2932546,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.HxDynamicElement",
        "AssemblyName": "Havit.Blazor.Components.Web",
        "Documentation": "Binds the provided expression to the 'ElementRef' property and a change event delegate to the 'ElementRefChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HxDynamicElement",
            "Attributes": [
              {
                "Name": "@bind-ElementRef",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-ElementRef",
            "TypeName": "System.Action<Microsoft.AspNetCore.Components.ElementReference>",
            "Documentation": "Binds the provided expression to the 'ElementRef' property and a change event delegate to the 'ElementRefChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ElementRef"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "ElementRef",
          "Components.Bind.ChangeAttribute": "ElementRefChanged",
          "Common.TypeName": "Havit.Blazor.Components.Web.HxDynamicElement"
        }
      },
      {
        "HashCode": -2085343839,
        "Kind": "Components.Bind",
        "Name": "Havit.Blazor.Components.Web.HxDynamicElement",
        "AssemblyName": "Havit.Blazor.Components.Web",
        "Documentation": "Binds the provided expression to the 'ElementRef' property and a change event delegate to the 'ElementRefChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Havit.Blazor.Components.Web.HxDynamicElement",
            "Attributes": [
              {
                "Name": "@bind-ElementRef",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-ElementRef",
            "TypeName": "System.Action<Microsoft.AspNetCore.Components.ElementReference>",
            "Documentation": "Binds the provided expression to the 'ElementRef' property and a change event delegate to the 'ElementRefChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ElementRef"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "ElementRef",
          "Components.Bind.ChangeAttribute": "ElementRefChanged",
          "Common.TypeName": "Havit.Blazor.Components.Web.HxDynamicElement",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1962586894,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputCheckbox",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputCheckbox",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputCheckbox"
        }
      },
      {
        "HashCode": -1399675068,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputCheckbox",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputCheckbox",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputCheckbox",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1097895423,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputDate<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputDate",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputDate<TValue>"
        }
      },
      {
        "HashCode": 1762180549,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputDate<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputDate",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputDate<TValue>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 503994948,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputNumber",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>"
        }
      },
      {
        "HashCode": 1867010193,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputNumber",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1900368744,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputRadioGroup",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>"
        }
      },
      {
        "HashCode": 955767402,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1900299773,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputSelect",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>"
        }
      },
      {
        "HashCode": 150911277,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputSelect",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1172267626,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputText",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputText",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputText"
        }
      },
      {
        "HashCode": 2043668605,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputText",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputText",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputText",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 736565861,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputTextArea",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputTextArea",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputTextArea"
        }
      },
      {
        "HashCode": 1916311747,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputTextArea",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputTextArea",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputTextArea",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -285528496,
        "Kind": "Components.Ref",
        "Name": "Ref",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Populates the specified field or property with a reference to the element or component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ref",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Ref",
            "Name": "@ref",
            "TypeName": "System.Object",
            "Documentation": "Populates the specified field or property with a reference to the element or component.",
            "Metadata": {
              "Common.PropertyName": "Ref",
              "Common.DirectiveAttribute": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Ref",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Ref"
        }
      },
      {
        "HashCode": -406693614,
        "Kind": "Components.Key",
        "Name": "Key",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Ensures that the component or element will be preserved across renders if (and only if) the supplied key value matches.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@key",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Key",
            "Name": "@key",
            "TypeName": "System.Object",
            "Documentation": "Ensures that the component or element will be preserved across renders if (and only if) the supplied key value matches.",
            "Metadata": {
              "Common.PropertyName": "Key",
              "Common.DirectiveAttribute": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Key",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Key"
        }
      }
    ],
    "CSharpLanguageVersion": 1000
  },
  "RootNamespace": "BlazorControlCefa",
  "Documents": [
    {
      "FilePath": "c:\\Users\\furbina\\source\\repos\\BlazorControlCefa\\Pages\\VisitType\\VisitTypeListComponent.razor",
      "TargetPath": "Pages\\VisitType\\VisitTypeListComponent.razor",
      "FileKind": "component"
    },
    {
      "FilePath": "c:\\Users\\furbina\\source\\repos\\BlazorControlCefa\\Pages\\Department\\DepartmentListComponent.razor",
      "TargetPath": "Pages\\Department\\DepartmentListComponent.razor",
      "FileKind": "component"
    },
    {
      "FilePath": "c:\\Users\\furbina\\source\\repos\\BlazorControlCefa\\Pages\\Person\\PersonEditComponent.razor",
      "TargetPath": "Pages\\Person\\PersonEditComponent.razor",
      "FileKind": "component"
    },
    {
      "FilePath": "c:\\Users\\furbina\\source\\repos\\BlazorControlCefa\\Pages\\Visit\\CompanionComponent.razor",
      "TargetPath": "Pages\\Visit\\CompanionComponent.razor",
      "FileKind": "component"
    },
    {
      "FilePath": "c:\\Users\\furbina\\source\\repos\\BlazorControlCefa\\Shared\\MainLayout.razor",
      "TargetPath": "Shared\\MainLayout.razor",
      "FileKind": "component"
    },
    {
      "FilePath": "c:\\Users\\furbina\\source\\repos\\BlazorControlCefa\\Pages\\Person\\PersonsListComponent.razor",
      "TargetPath": "Pages\\Person\\PersonsListComponent.razor",
      "FileKind": "component"
    },
    {
      "FilePath": "c:\\Users\\furbina\\source\\repos\\BlazorControlCefa\\Pages\\_Host.cshtml",
      "TargetPath": "Pages\\_Host.cshtml",
      "FileKind": "mvc"
    },
    {
      "FilePath": "c:\\Users\\furbina\\source\\repos\\BlazorControlCefa\\Pages\\Department\\DepartmentEditComponent.razor",
      "TargetPath": "Pages\\Department\\DepartmentEditComponent.razor",
      "FileKind": "component"
    },
    {
      "FilePath": "c:\\Users\\furbina\\source\\repos\\BlazorControlCefa\\Pages\\VehicleType\\VehicleTypeListComponent.razor",
      "TargetPath": "Pages\\VehicleType\\VehicleTypeListComponent.razor",
      "FileKind": "component"
    },
    {
      "FilePath": "c:\\Users\\furbina\\source\\repos\\BlazorControlCefa\\Pages\\Visit\\VehicleVisitDetailComponent.razor",
      "TargetPath": "Pages\\Visit\\VehicleVisitDetailComponent.razor",
      "FileKind": "component"
    },
    {
      "FilePath": "c:\\Users\\furbina\\source\\repos\\BlazorControlCefa\\_Imports.razor",
      "TargetPath": "_Imports.razor",
      "FileKind": "componentImport"
    },
    {
      "FilePath": "c:\\Users\\furbina\\source\\repos\\BlazorControlCefa\\Shared\\NavMenu.razor",
      "TargetPath": "Shared\\NavMenu.razor",
      "FileKind": "component"
    },
    {
      "FilePath": "c:\\Users\\furbina\\source\\repos\\BlazorControlCefa\\Pages\\VehicleType\\VehicleTypeEditComponent.razor",
      "TargetPath": "Pages\\VehicleType\\VehicleTypeEditComponent.razor",
      "FileKind": "component"
    },
    {
      "FilePath": "c:\\Users\\furbina\\source\\repos\\BlazorControlCefa\\Pages\\Reason\\ReasonEditComponent.razor",
      "TargetPath": "Pages\\Reason\\ReasonEditComponent.razor",
      "FileKind": "component"
    },
    {
      "FilePath": "c:\\Users\\furbina\\source\\repos\\BlazorControlCefa\\Pages\\VehicleBrand\\VehicleBrandEditComponent.razor",
      "TargetPath": "Pages\\VehicleBrand\\VehicleBrandEditComponent.razor",
      "FileKind": "component"
    },
    {
      "FilePath": "c:\\Users\\furbina\\source\\repos\\BlazorControlCefa\\Pages\\Position\\PositionEditComponent.razor",
      "TargetPath": "Pages\\Position\\PositionEditComponent.razor",
      "FileKind": "component"
    },
    {
      "FilePath": "c:\\Users\\furbina\\source\\repos\\BlazorControlCefa\\Pages\\Error.cshtml",
      "TargetPath": "Pages\\Error.cshtml",
      "FileKind": "mvc"
    },
    {
      "FilePath": "c:\\Users\\furbina\\source\\repos\\BlazorControlCefa\\App.razor",
      "TargetPath": "App.razor",
      "FileKind": "component"
    },
    {
      "FilePath": "c:\\Users\\furbina\\source\\repos\\BlazorControlCefa\\Pages\\Visit\\PersonFinderComponent.razor",
      "TargetPath": "Pages\\Visit\\PersonFinderComponent.razor",
      "FileKind": "component"
    },
    {
      "FilePath": "c:\\Users\\furbina\\source\\repos\\BlazorControlCefa\\Pages\\Vehicle\\VehicleListComponent.razor",
      "TargetPath": "Pages\\Vehicle\\VehicleListComponent.razor",
      "FileKind": "component"
    },
    {
      "FilePath": "c:\\Users\\furbina\\source\\repos\\BlazorControlCefa\\Pages\\_Layout.cshtml",
      "TargetPath": "Pages\\_Layout.cshtml",
      "FileKind": "mvc"
    },
    {
      "FilePath": "c:\\Users\\furbina\\source\\repos\\BlazorControlCefa\\Pages\\Person\\VehicleAsigment\\PersonVehicleComponent.razor",
      "TargetPath": "Pages\\Person\\VehicleAsigment\\PersonVehicleComponent.razor",
      "FileKind": "component"
    },
    {
      "FilePath": "c:\\Users\\furbina\\source\\repos\\BlazorControlCefa\\Pages\\Visit\\VisitComponent.razor",
      "TargetPath": "Pages\\Visit\\VisitComponent.razor",
      "FileKind": "component"
    },
    {
      "FilePath": "c:\\Users\\furbina\\source\\repos\\BlazorControlCefa\\Pages\\Vehicle\\VehicleEditComponent.razor",
      "TargetPath": "Pages\\Vehicle\\VehicleEditComponent.razor",
      "FileKind": "component"
    },
    {
      "FilePath": "c:\\Users\\furbina\\source\\repos\\BlazorControlCefa\\Pages\\PersonType\\PersonTypesListComponent.razor",
      "TargetPath": "Pages\\PersonType\\PersonTypesListComponent.razor",
      "FileKind": "component"
    },
    {
      "FilePath": "c:\\Users\\furbina\\source\\repos\\BlazorControlCefa\\Pages\\Reason\\ReasonListComponent.razor",
      "TargetPath": "Pages\\Reason\\ReasonListComponent.razor",
      "FileKind": "component"
    },
    {
      "FilePath": "c:\\Users\\furbina\\source\\repos\\BlazorControlCefa\\Pages\\Position\\PositionListComponent.razor",
      "TargetPath": "Pages\\Position\\PositionListComponent.razor",
      "FileKind": "component"
    },
    {
      "FilePath": "c:\\Users\\furbina\\source\\repos\\BlazorControlCefa\\Pages\\Visit\\CreatePersonForAVisitComponent.razor",
      "TargetPath": "Pages\\Visit\\CreatePersonForAVisitComponent.razor",
      "FileKind": "component"
    },
    {
      "FilePath": "c:\\Users\\furbina\\source\\repos\\BlazorControlCefa\\Pages\\VisitType\\VisitTypeEditComponent.razor",
      "TargetPath": "Pages\\VisitType\\VisitTypeEditComponent.razor",
      "FileKind": "component"
    },
    {
      "FilePath": "c:\\Users\\furbina\\source\\repos\\BlazorControlCefa\\Pages\\PersonType\\PersonTypeEditComponent.razor",
      "TargetPath": "Pages\\PersonType\\PersonTypeEditComponent.razor",
      "FileKind": "component"
    },
    {
      "FilePath": "c:\\Users\\furbina\\source\\repos\\BlazorControlCefa\\Components\\Search.razor",
      "TargetPath": "Components\\Search.razor",
      "FileKind": "component"
    },
    {
      "FilePath": "c:\\Users\\furbina\\source\\repos\\BlazorControlCefa\\Pages\\Index.razor",
      "TargetPath": "Pages\\Index.razor",
      "FileKind": "component"
    },
    {
      "FilePath": "c:\\Users\\furbina\\source\\repos\\BlazorControlCefa\\Pages\\Person\\VehicleAsigment\\CreateVehicleForAPerson.razor",
      "TargetPath": "Pages\\Person\\VehicleAsigment\\CreateVehicleForAPerson.razor",
      "FileKind": "component"
    },
    {
      "FilePath": "c:\\Users\\furbina\\source\\repos\\BlazorControlCefa\\Areas\\Identity\\Pages\\Account\\LogOut.cshtml",
      "TargetPath": "Areas\\Identity\\Pages\\Account\\LogOut.cshtml",
      "FileKind": "mvc"
    },
    {
      "FilePath": "c:\\Users\\furbina\\source\\repos\\BlazorControlCefa\\Components\\Pagination.razor",
      "TargetPath": "Components\\Pagination.razor",
      "FileKind": "component"
    },
    {
      "FilePath": "c:\\Users\\furbina\\source\\repos\\BlazorControlCefa\\Pages\\Vehicle\\VehiclePlateFinderComponent.razor",
      "TargetPath": "Pages\\Vehicle\\VehiclePlateFinderComponent.razor",
      "FileKind": "component"
    },
    {
      "FilePath": "c:\\Users\\furbina\\source\\repos\\BlazorControlCefa\\Pages\\VehicleBrand\\VehicleBrandListComponent.razor",
      "TargetPath": "Pages\\VehicleBrand\\VehicleBrandListComponent.razor",
      "FileKind": "component"
    },
    {
      "FilePath": "c:\\Users\\furbina\\source\\repos\\BlazorControlCefa\\Areas\\Identity\\Pages\\Shared\\_LoginPartial.cshtml",
      "TargetPath": "Areas\\Identity\\Pages\\Shared\\_LoginPartial.cshtml",
      "FileKind": "mvc"
    },
    {
      "FilePath": "c:\\Users\\furbina\\source\\repos\\BlazorControlCefa\\Shared\\LoginDisplay.razor",
      "TargetPath": "Shared\\LoginDisplay.razor",
      "FileKind": "component"
    },
    {
      "FilePath": "c:\\Users\\furbina\\source\\repos\\BlazorControlCefa\\Shared\\SurveyPrompt.razor",
      "TargetPath": "Shared\\SurveyPrompt.razor",
      "FileKind": "component"
    },
    {
      "FilePath": "c:\\Users\\furbina\\source\\repos\\BlazorControlCefa\\Pages\\Visit\\NotesComponent.razor",
      "TargetPath": "Pages\\Visit\\NotesComponent.razor",
      "FileKind": "component"
    }
  ],
  "SerializationFormat": "0.2"
}