@page "/vehicles"

@using BlazorControlCefa.Application.Dtos.Vehicle
@using BlazorControlCefa.Application.Wrappers
@using BlazorControlCefa.Data.Entities
@using BlazorControlCefa.Components
@using BlazorControlCefa.Repositories.Vehicle
@using System.Security.Claims

@inject IAuthorizationService AuthorizationService
@inject IVehicleRepository VehicleRepository


@attribute [Authorize(Policy = "personView-Policy")]

<PageTitle>Vehículos</PageTitle>

<nav class="navbar navbar-expand-lg navbar-light bg-light shadow-sm rounded">
    <div class="container-fluid">
        <a class="navbar-brand fs-3">Vehículos</a>
        <AuthorizeView Policy="personCreate-Policy">
            <a class="btn btn-outline-primary me-2" href="/vehicles/edit">
                <span class="oi oi-plus me-2" aria-hidden="true"></span>
                Nuevo
            </a>
        </AuthorizeView>
        <a class="btn btn-outline-primary me-2" href="/vehicles/edit"
           data-bs-toggle="tooltip" data-bs-placement="bottom" title="Exportar">
            <span class="oi oi-data-transfer-download"></span>
        </a>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
            </ul>
            <div class="d-flex">
                <Search OnSearchChanged="SearchChanged" Placeholder="Buscar" ToolTips="Buscar por Nombre, Apellido, Cédula" />
            </div>
        </div>
    </div>
</nav>

<br />

<div class="spinner @(!IsLoading? "visually-hidden" : string.Empty)"></div>

@if (Vehicles is not null)
{
    <table class="table caption-top table-hover bg-light shadow-sm rounded">
        <caption>Página @MetaData.PageNumber de @MetaData.TotalPages de @MetaData.TotalCount Registros</caption>
        <thead class="table-light">
            <tr>
                <th>Placa</th>
                <th>Tipo Vehiculo</th>
                <th>Marca</th>
                <th>Color</th>
                <th>Código</th>
                <th>Empresa</th>
                <th>Estado</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var vehicle in Vehicles)
            {
                <tr>
                    <td>@vehicle.Plate</td>
                    <td>@vehicle.VehicleTypes.Name</td>
                    <td>@vehicle.VehicleBrands.Name</td>
                    <td>@vehicle.Color</td>                    
                    <td>@vehicle.VehicleCode</td>                    
                    <td>@vehicle.CompanyName</td>                    
                    <td>
                        <span class="badge @(vehicle.IsActive? "bg-primary": "bg-secondary")">
                            @(vehicle.IsActive? "Activo": "Inactivo")
                        </span>
                    </td>
                    <td>
                        <AuthorizeView Policy="personEdit-Policy">
                            @if (vehicle.OwnerType.ToString() == "DeEstaEmpresa" && !(AuthorizationService.AuthorizeAsync(User, "personDelete-Policy")).Result.Succeeded)
                            {
                                DisabledEdit = true;
                            }
                            else
                            {
                                DisabledEdit = false;
                            }
                            <a class="btn btn-light btn-sm text-primary @(DisabledEdit? "disabled" :string.Empty)" href="/vehicles/edit/@vehicle.Id"
                       data-bs-toggle="tooltip" data-bs-placement="bottom" title="Editar">
                                <span class="oi oi-pencil" aria-hidden="true"></span>
                            </a>
                        </AuthorizeView>

                        <AuthorizeView Policy="personView-Policy">
                            <a class="btn btn-light btn-sm text-secondary" href="/vehicles/edit/detail/@vehicle.Id"
                       data-bs-toggle="tooltip" data-bs-placement="bottom" title="Ver detalle">
                                <span class="oi oi-eye" aria-hidden="true"></span>
                            </a>
                        </AuthorizeView>

                        <AuthorizeView Policy="personDelete-Policy">
                            <a class="btn btn-light btn-sm text-danger" href="/vehicles/edit/delete/@vehicle.Id"
                       data-bs-toggle="tooltip" data-bs-placement="bottom" title="Borrar">
                                <span class="oi oi-trash" aria-hidden="true"></span>
                            </a>
                        </AuthorizeView>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage"></Pagination>
}

@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private ClaimsPrincipal User { get; set; }

    private List<Vehicle> Vehicles { get; set; } = new List<Vehicle>();
    private MetaData MetaData { get; set; } = new MetaData();
    private VehicleParametersDto _vehicleParameters = new VehicleParametersDto();

    private bool DisabledEdit { get; set; } = false;
    private bool IsLoading { get; set; } = false;


    protected override async Task OnInitializedAsync()
    {
        User = (await authenticationStateTask).User;

        //await Task.Run(Load);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Load();
        }
    }

    private async Task Load()
    {
        StateHasChanged();
        IsLoading = true;
        //System.Threading.Thread.Sleep(100);
        var pagingResponse = await VehicleRepository.GetAllVehicleAsync(_vehicleParameters, MetaData);
        Vehicles = pagingResponse.Items;
        MetaData = pagingResponse.MetaData;
        IsLoading = false;
        StateHasChanged();
    }

    private async Task SelectedPage(int page)
    {
        _vehicleParameters.PageNumber = page;
        await Load();
        //await Task.Run(Load);
    }

    private async Task SearchChanged(string searchTerm)
    {
        _vehicleParameters.PageNumber = 1;
        _vehicleParameters.Filters = searchTerm;
        await Load();
        //await Task.Run(Load);
    }
}

