@using System.Globalization
@using BlazorControlCefa.Data.Entities
@using BlazorControlCefa.Repositories.Person

@inject IPersonRepository PersonRepository

<div class="row g-0 mb-6">
    <div class="col-md-11">
        <HxAutosuggest Label=""
                       Placeholder="Buscar por Persona"
                       TItem="Person"
                       TValue="int"
                       @bind-Value="@Person"
                       DataProvider="ProvideSuggestions"
                       ValueSelector="(Person c) => c.Id"                       
                       TextSelector="(Person c) => string.Concat(c.FirstName, ' ', c.LastName)"
                       ItemFromValueResolver="OnChangeSelection" Enabled=Enabled>
            <ItemTemplate Context="item">
                <div>@item.FirstName @item.LastName</div>
                <div>Cédula: @item.Cedula</div>                
                <span class="badge rounded-pill bg-success bg-opacity-75">@item.PersonTypes.Name</span>
            </ItemTemplate>
            <EmptyTemplate>
                <span class="p-2">No se pudo encontrar ninguna persona coincidente</span>
            </EmptyTemplate>
        </HxAutosuggest>
    </div>
    <div class="col-md-1 d-flex">
        <HxButton Color="ThemeColor.Primary" Enabled="@(Person==0? false: true)" Icon="BootstrapIcon.BoxArrowDown" CssClass="ms-1" OnClick="@(() => OnPersonSeleted.InvokeAsync(Person))" />
    </div>
</div>

@*<p class="mt-3">Current value: @Plate</p>*@

@code
{
    [Parameter]
    public EventCallback<int> OnPersonSeleted { get; set; }

    [Parameter]
    public int Person { get; set; } = 0;

    [Parameter]
    public bool Enabled { get; set; } = true;

    private async Task<AutosuggestDataProviderResult<Person>> ProvideSuggestions(AutosuggestDataProviderRequest request)
    {

        await Task.Delay(400); // backend API speed simulation
        var collection = await PersonRepository.GetAllPersonForSelectionAsync();

        return new AutosuggestDataProviderResult<Person>
            {
                Data = collection
                            .Where(v => (v.FirstName?.Contains(request.UserInput, StringComparison.CurrentCultureIgnoreCase) ?? false) ||
                                    (v.LastName?.Contains(request.UserInput, StringComparison.CurrentCultureIgnoreCase) ?? false))
                            .OrderBy(v => v.FirstName)
                            .ToList()
            };
    }

    private async Task<Person> ResolveAutosuggestItemFromValue(int? value)
    {
        StateHasChanged();

        if (value is null)
        {
            return null;
        }
        await Task.Delay(400); // backend API speed simulation

        return await PersonRepository.GetPersonAsync(value.Value);
    }

    private async Task<Person> OnChangeSelection(int value)
    {

        return await PersonRepository.GetPersonAsync(value);
    }
}